generator client {
  provider = "prisma-client-js"
  output   = "../../node_modules/.prisma/private"
}

datasource db {
  provider = "postgresql"
  url      = env("PRIVATE_DB_URL") // Comes from your .env file
}

enum AuthLogEvent {
  LOGIN
  LOGOUT
  ACTIVATE
  DEACTIVATE
  BLOCKED_USER
  UNBLOCKED_USER
  BLOCKED_DEVICE
  UNBLOCKED_DEVICE
  CHANGE_PASSWORD
  REGISTER
  CHECK_AUTH_LOGS
  GET_USER_ACTIVE_DEVICES
  GET_MY_ACTIVE_DEVICES
  ACCESS_TOKEN
  REFRESH_TOKEN
  UPDATE_ACCOUNT_DETAILS
  PROVIDE_USER_ACCOUNT_DETAILS
  PROVIDE_MY_ACCOUNT_DETAILS
  GET_TOTAL_REGISTERED_USERS
  SET_ACCESS_TOKEN_FOR_ADMIN
  CLEAN_UP_DEACTIVATED_USER
  CLEAN_UP_DEVICE_RATE_LIMIT
  CLEAN_UP_AUTH_LOGS
}

enum DeviceType {
  LAPTOP
  MOBILE
  TABLET
}

enum PerformedBy {
  CUSTOMER
  ADMIN
  SYSTEM
}

enum DeviceBlockReason {
  SUSPICIOUS_ACTIVITY
  TOO_MANY_FAILED_ATTEMPTS
  REPORTED_BY_USER
  BLOCKED_BY_ADMIN
  UNKNOWN_DEVICE_LOGIN
  COMPROMISED_CREDENTIALS
}

enum DeviceUnblockReason {
  FALSE_POSITIVE
  MANUAL_REVIEW_CLEARED
  REPORTED_AS_SAFE
  UNBLOCKED_BY_ADMIN
}

model DeviceRateLimit {
  deviceID      String   @id
  attempts      Int      @default(1)
  lastAttemptAt DateTime @default(now())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model AuthLog {
  id          Int          @id @default(autoincrement())
  userID      String
  eventType   AuthLogEvent
  deviceID    String
  deviceName  String?
  deviceType  DeviceType?
  performedBy PerformedBy  @default(CUSTOMER)
  timestamp   DateTime     @default(now())
  adminAction AdminAction?

  @@index([userID])
}

model AdminAction {
  id           Int            @id
  authLog      AuthLog        @relation(fields: [id], references: [id])
  targetUserID String?
  reason       String?
  filter       AuthLogEvent[]
}

model Counter {
  id  String @id
  seq Int    @default(0)
}

model RateLimit {
  deviceID      String
  routeKey      String
  requestCount  Int      @default(1)
  lastRequestAt DateTime @default(now())

  @@id([deviceID, routeKey])
}

model DeviceBlock {
  deviceID    String    @id // Primary key â€“ Device UUID
  isBlocked   Boolean   @default(false) // Current status
  blockedAt   DateTime? // When it was blocked
  unblockedAt DateTime? // When it was unblocked
  blockedBy   String? // Admin userID who blocked
  unblockedBy String? // Admin userID who unblocked
  blockReason        DeviceBlockReason?
  unblockReason      DeviceUnblockReason?

  // Optional: for traceability
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
