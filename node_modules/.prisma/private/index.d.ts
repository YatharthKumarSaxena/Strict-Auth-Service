
/**
 * Client
**/

import * as runtime from './runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model DeviceRateLimit
 * 
 */
export type DeviceRateLimit = $Result.DefaultSelection<Prisma.$DeviceRateLimitPayload>
/**
 * Model AuthLog
 * 
 */
export type AuthLog = $Result.DefaultSelection<Prisma.$AuthLogPayload>
/**
 * Model AdminAction
 * 
 */
export type AdminAction = $Result.DefaultSelection<Prisma.$AdminActionPayload>
/**
 * Model Counter
 * 
 */
export type Counter = $Result.DefaultSelection<Prisma.$CounterPayload>
/**
 * Model RateLimit
 * 
 */
export type RateLimit = $Result.DefaultSelection<Prisma.$RateLimitPayload>
/**
 * Model DeviceBlock
 * 
 */
export type DeviceBlock = $Result.DefaultSelection<Prisma.$DeviceBlockPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const AuthLogEvent: {
  LOGIN: 'LOGIN',
  LOGOUT: 'LOGOUT',
  ACTIVATE: 'ACTIVATE',
  DEACTIVATE: 'DEACTIVATE',
  BLOCKED_USER: 'BLOCKED_USER',
  UNBLOCKED_USER: 'UNBLOCKED_USER',
  BLOCKED_DEVICE: 'BLOCKED_DEVICE',
  UNBLOCKED_DEVICE: 'UNBLOCKED_DEVICE',
  CHANGE_PASSWORD: 'CHANGE_PASSWORD',
  REGISTER: 'REGISTER',
  CHECK_AUTH_LOGS: 'CHECK_AUTH_LOGS',
  GET_USER_ACTIVE_DEVICES: 'GET_USER_ACTIVE_DEVICES',
  GET_MY_ACTIVE_DEVICES: 'GET_MY_ACTIVE_DEVICES',
  ACCESS_TOKEN: 'ACCESS_TOKEN',
  REFRESH_TOKEN: 'REFRESH_TOKEN',
  UPDATE_ACCOUNT_DETAILS: 'UPDATE_ACCOUNT_DETAILS',
  PROVIDE_USER_ACCOUNT_DETAILS: 'PROVIDE_USER_ACCOUNT_DETAILS',
  PROVIDE_MY_ACCOUNT_DETAILS: 'PROVIDE_MY_ACCOUNT_DETAILS',
  GET_TOTAL_REGISTERED_USERS: 'GET_TOTAL_REGISTERED_USERS',
  SET_ACCESS_TOKEN_FOR_ADMIN: 'SET_ACCESS_TOKEN_FOR_ADMIN',
  CLEAN_UP_DEACTIVATED_USER: 'CLEAN_UP_DEACTIVATED_USER',
  CLEAN_UP_DEVICE_RATE_LIMIT: 'CLEAN_UP_DEVICE_RATE_LIMIT',
  CLEAN_UP_AUTH_LOGS: 'CLEAN_UP_AUTH_LOGS'
};

export type AuthLogEvent = (typeof AuthLogEvent)[keyof typeof AuthLogEvent]


export const DeviceType: {
  LAPTOP: 'LAPTOP',
  MOBILE: 'MOBILE',
  TABLET: 'TABLET'
};

export type DeviceType = (typeof DeviceType)[keyof typeof DeviceType]


export const PerformedBy: {
  CUSTOMER: 'CUSTOMER',
  ADMIN: 'ADMIN',
  SYSTEM: 'SYSTEM'
};

export type PerformedBy = (typeof PerformedBy)[keyof typeof PerformedBy]


export const DeviceBlockReason: {
  SUSPICIOUS_ACTIVITY: 'SUSPICIOUS_ACTIVITY',
  TOO_MANY_FAILED_ATTEMPTS: 'TOO_MANY_FAILED_ATTEMPTS',
  REPORTED_BY_USER: 'REPORTED_BY_USER',
  BLOCKED_BY_ADMIN: 'BLOCKED_BY_ADMIN',
  UNKNOWN_DEVICE_LOGIN: 'UNKNOWN_DEVICE_LOGIN',
  COMPROMISED_CREDENTIALS: 'COMPROMISED_CREDENTIALS'
};

export type DeviceBlockReason = (typeof DeviceBlockReason)[keyof typeof DeviceBlockReason]


export const DeviceUnblockReason: {
  FALSE_POSITIVE: 'FALSE_POSITIVE',
  MANUAL_REVIEW_CLEARED: 'MANUAL_REVIEW_CLEARED',
  REPORTED_AS_SAFE: 'REPORTED_AS_SAFE',
  UNBLOCKED_BY_ADMIN: 'UNBLOCKED_BY_ADMIN'
};

export type DeviceUnblockReason = (typeof DeviceUnblockReason)[keyof typeof DeviceUnblockReason]

}

export type AuthLogEvent = $Enums.AuthLogEvent

export const AuthLogEvent: typeof $Enums.AuthLogEvent

export type DeviceType = $Enums.DeviceType

export const DeviceType: typeof $Enums.DeviceType

export type PerformedBy = $Enums.PerformedBy

export const PerformedBy: typeof $Enums.PerformedBy

export type DeviceBlockReason = $Enums.DeviceBlockReason

export const DeviceBlockReason: typeof $Enums.DeviceBlockReason

export type DeviceUnblockReason = $Enums.DeviceUnblockReason

export const DeviceUnblockReason: typeof $Enums.DeviceUnblockReason

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more DeviceRateLimits
 * const deviceRateLimits = await prisma.deviceRateLimit.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more DeviceRateLimits
   * const deviceRateLimits = await prisma.deviceRateLimit.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.deviceRateLimit`: Exposes CRUD operations for the **DeviceRateLimit** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more DeviceRateLimits
    * const deviceRateLimits = await prisma.deviceRateLimit.findMany()
    * ```
    */
  get deviceRateLimit(): Prisma.DeviceRateLimitDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.authLog`: Exposes CRUD operations for the **AuthLog** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AuthLogs
    * const authLogs = await prisma.authLog.findMany()
    * ```
    */
  get authLog(): Prisma.AuthLogDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.adminAction`: Exposes CRUD operations for the **AdminAction** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AdminActions
    * const adminActions = await prisma.adminAction.findMany()
    * ```
    */
  get adminAction(): Prisma.AdminActionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.counter`: Exposes CRUD operations for the **Counter** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Counters
    * const counters = await prisma.counter.findMany()
    * ```
    */
  get counter(): Prisma.CounterDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.rateLimit`: Exposes CRUD operations for the **RateLimit** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more RateLimits
    * const rateLimits = await prisma.rateLimit.findMany()
    * ```
    */
  get rateLimit(): Prisma.RateLimitDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.deviceBlock`: Exposes CRUD operations for the **DeviceBlock** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more DeviceBlocks
    * const deviceBlocks = await prisma.deviceBlock.findMany()
    * ```
    */
  get deviceBlock(): Prisma.DeviceBlockDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.11.1
   * Query Engine version: f40f79ec31188888a2e33acda0ecc8fd10a853a9
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    DeviceRateLimit: 'DeviceRateLimit',
    AuthLog: 'AuthLog',
    AdminAction: 'AdminAction',
    Counter: 'Counter',
    RateLimit: 'RateLimit',
    DeviceBlock: 'DeviceBlock'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "deviceRateLimit" | "authLog" | "adminAction" | "counter" | "rateLimit" | "deviceBlock"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      DeviceRateLimit: {
        payload: Prisma.$DeviceRateLimitPayload<ExtArgs>
        fields: Prisma.DeviceRateLimitFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DeviceRateLimitFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DeviceRateLimitPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DeviceRateLimitFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DeviceRateLimitPayload>
          }
          findFirst: {
            args: Prisma.DeviceRateLimitFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DeviceRateLimitPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DeviceRateLimitFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DeviceRateLimitPayload>
          }
          findMany: {
            args: Prisma.DeviceRateLimitFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DeviceRateLimitPayload>[]
          }
          create: {
            args: Prisma.DeviceRateLimitCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DeviceRateLimitPayload>
          }
          createMany: {
            args: Prisma.DeviceRateLimitCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.DeviceRateLimitCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DeviceRateLimitPayload>[]
          }
          delete: {
            args: Prisma.DeviceRateLimitDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DeviceRateLimitPayload>
          }
          update: {
            args: Prisma.DeviceRateLimitUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DeviceRateLimitPayload>
          }
          deleteMany: {
            args: Prisma.DeviceRateLimitDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DeviceRateLimitUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.DeviceRateLimitUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DeviceRateLimitPayload>[]
          }
          upsert: {
            args: Prisma.DeviceRateLimitUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DeviceRateLimitPayload>
          }
          aggregate: {
            args: Prisma.DeviceRateLimitAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDeviceRateLimit>
          }
          groupBy: {
            args: Prisma.DeviceRateLimitGroupByArgs<ExtArgs>
            result: $Utils.Optional<DeviceRateLimitGroupByOutputType>[]
          }
          count: {
            args: Prisma.DeviceRateLimitCountArgs<ExtArgs>
            result: $Utils.Optional<DeviceRateLimitCountAggregateOutputType> | number
          }
        }
      }
      AuthLog: {
        payload: Prisma.$AuthLogPayload<ExtArgs>
        fields: Prisma.AuthLogFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AuthLogFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuthLogPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AuthLogFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuthLogPayload>
          }
          findFirst: {
            args: Prisma.AuthLogFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuthLogPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AuthLogFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuthLogPayload>
          }
          findMany: {
            args: Prisma.AuthLogFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuthLogPayload>[]
          }
          create: {
            args: Prisma.AuthLogCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuthLogPayload>
          }
          createMany: {
            args: Prisma.AuthLogCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AuthLogCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuthLogPayload>[]
          }
          delete: {
            args: Prisma.AuthLogDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuthLogPayload>
          }
          update: {
            args: Prisma.AuthLogUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuthLogPayload>
          }
          deleteMany: {
            args: Prisma.AuthLogDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AuthLogUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AuthLogUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuthLogPayload>[]
          }
          upsert: {
            args: Prisma.AuthLogUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuthLogPayload>
          }
          aggregate: {
            args: Prisma.AuthLogAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAuthLog>
          }
          groupBy: {
            args: Prisma.AuthLogGroupByArgs<ExtArgs>
            result: $Utils.Optional<AuthLogGroupByOutputType>[]
          }
          count: {
            args: Prisma.AuthLogCountArgs<ExtArgs>
            result: $Utils.Optional<AuthLogCountAggregateOutputType> | number
          }
        }
      }
      AdminAction: {
        payload: Prisma.$AdminActionPayload<ExtArgs>
        fields: Prisma.AdminActionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AdminActionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminActionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AdminActionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminActionPayload>
          }
          findFirst: {
            args: Prisma.AdminActionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminActionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AdminActionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminActionPayload>
          }
          findMany: {
            args: Prisma.AdminActionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminActionPayload>[]
          }
          create: {
            args: Prisma.AdminActionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminActionPayload>
          }
          createMany: {
            args: Prisma.AdminActionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AdminActionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminActionPayload>[]
          }
          delete: {
            args: Prisma.AdminActionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminActionPayload>
          }
          update: {
            args: Prisma.AdminActionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminActionPayload>
          }
          deleteMany: {
            args: Prisma.AdminActionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AdminActionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AdminActionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminActionPayload>[]
          }
          upsert: {
            args: Prisma.AdminActionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminActionPayload>
          }
          aggregate: {
            args: Prisma.AdminActionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAdminAction>
          }
          groupBy: {
            args: Prisma.AdminActionGroupByArgs<ExtArgs>
            result: $Utils.Optional<AdminActionGroupByOutputType>[]
          }
          count: {
            args: Prisma.AdminActionCountArgs<ExtArgs>
            result: $Utils.Optional<AdminActionCountAggregateOutputType> | number
          }
        }
      }
      Counter: {
        payload: Prisma.$CounterPayload<ExtArgs>
        fields: Prisma.CounterFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CounterFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CounterPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CounterFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CounterPayload>
          }
          findFirst: {
            args: Prisma.CounterFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CounterPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CounterFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CounterPayload>
          }
          findMany: {
            args: Prisma.CounterFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CounterPayload>[]
          }
          create: {
            args: Prisma.CounterCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CounterPayload>
          }
          createMany: {
            args: Prisma.CounterCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CounterCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CounterPayload>[]
          }
          delete: {
            args: Prisma.CounterDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CounterPayload>
          }
          update: {
            args: Prisma.CounterUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CounterPayload>
          }
          deleteMany: {
            args: Prisma.CounterDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CounterUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CounterUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CounterPayload>[]
          }
          upsert: {
            args: Prisma.CounterUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CounterPayload>
          }
          aggregate: {
            args: Prisma.CounterAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCounter>
          }
          groupBy: {
            args: Prisma.CounterGroupByArgs<ExtArgs>
            result: $Utils.Optional<CounterGroupByOutputType>[]
          }
          count: {
            args: Prisma.CounterCountArgs<ExtArgs>
            result: $Utils.Optional<CounterCountAggregateOutputType> | number
          }
        }
      }
      RateLimit: {
        payload: Prisma.$RateLimitPayload<ExtArgs>
        fields: Prisma.RateLimitFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RateLimitFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RateLimitPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RateLimitFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RateLimitPayload>
          }
          findFirst: {
            args: Prisma.RateLimitFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RateLimitPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RateLimitFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RateLimitPayload>
          }
          findMany: {
            args: Prisma.RateLimitFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RateLimitPayload>[]
          }
          create: {
            args: Prisma.RateLimitCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RateLimitPayload>
          }
          createMany: {
            args: Prisma.RateLimitCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.RateLimitCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RateLimitPayload>[]
          }
          delete: {
            args: Prisma.RateLimitDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RateLimitPayload>
          }
          update: {
            args: Prisma.RateLimitUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RateLimitPayload>
          }
          deleteMany: {
            args: Prisma.RateLimitDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RateLimitUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.RateLimitUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RateLimitPayload>[]
          }
          upsert: {
            args: Prisma.RateLimitUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RateLimitPayload>
          }
          aggregate: {
            args: Prisma.RateLimitAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRateLimit>
          }
          groupBy: {
            args: Prisma.RateLimitGroupByArgs<ExtArgs>
            result: $Utils.Optional<RateLimitGroupByOutputType>[]
          }
          count: {
            args: Prisma.RateLimitCountArgs<ExtArgs>
            result: $Utils.Optional<RateLimitCountAggregateOutputType> | number
          }
        }
      }
      DeviceBlock: {
        payload: Prisma.$DeviceBlockPayload<ExtArgs>
        fields: Prisma.DeviceBlockFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DeviceBlockFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DeviceBlockPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DeviceBlockFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DeviceBlockPayload>
          }
          findFirst: {
            args: Prisma.DeviceBlockFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DeviceBlockPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DeviceBlockFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DeviceBlockPayload>
          }
          findMany: {
            args: Prisma.DeviceBlockFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DeviceBlockPayload>[]
          }
          create: {
            args: Prisma.DeviceBlockCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DeviceBlockPayload>
          }
          createMany: {
            args: Prisma.DeviceBlockCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.DeviceBlockCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DeviceBlockPayload>[]
          }
          delete: {
            args: Prisma.DeviceBlockDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DeviceBlockPayload>
          }
          update: {
            args: Prisma.DeviceBlockUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DeviceBlockPayload>
          }
          deleteMany: {
            args: Prisma.DeviceBlockDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DeviceBlockUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.DeviceBlockUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DeviceBlockPayload>[]
          }
          upsert: {
            args: Prisma.DeviceBlockUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DeviceBlockPayload>
          }
          aggregate: {
            args: Prisma.DeviceBlockAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDeviceBlock>
          }
          groupBy: {
            args: Prisma.DeviceBlockGroupByArgs<ExtArgs>
            result: $Utils.Optional<DeviceBlockGroupByOutputType>[]
          }
          count: {
            args: Prisma.DeviceBlockCountArgs<ExtArgs>
            result: $Utils.Optional<DeviceBlockCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    deviceRateLimit?: DeviceRateLimitOmit
    authLog?: AuthLogOmit
    adminAction?: AdminActionOmit
    counter?: CounterOmit
    rateLimit?: RateLimitOmit
    deviceBlock?: DeviceBlockOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */



  /**
   * Models
   */

  /**
   * Model DeviceRateLimit
   */

  export type AggregateDeviceRateLimit = {
    _count: DeviceRateLimitCountAggregateOutputType | null
    _avg: DeviceRateLimitAvgAggregateOutputType | null
    _sum: DeviceRateLimitSumAggregateOutputType | null
    _min: DeviceRateLimitMinAggregateOutputType | null
    _max: DeviceRateLimitMaxAggregateOutputType | null
  }

  export type DeviceRateLimitAvgAggregateOutputType = {
    attempts: number | null
  }

  export type DeviceRateLimitSumAggregateOutputType = {
    attempts: number | null
  }

  export type DeviceRateLimitMinAggregateOutputType = {
    deviceID: string | null
    attempts: number | null
    lastAttemptAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type DeviceRateLimitMaxAggregateOutputType = {
    deviceID: string | null
    attempts: number | null
    lastAttemptAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type DeviceRateLimitCountAggregateOutputType = {
    deviceID: number
    attempts: number
    lastAttemptAt: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type DeviceRateLimitAvgAggregateInputType = {
    attempts?: true
  }

  export type DeviceRateLimitSumAggregateInputType = {
    attempts?: true
  }

  export type DeviceRateLimitMinAggregateInputType = {
    deviceID?: true
    attempts?: true
    lastAttemptAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type DeviceRateLimitMaxAggregateInputType = {
    deviceID?: true
    attempts?: true
    lastAttemptAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type DeviceRateLimitCountAggregateInputType = {
    deviceID?: true
    attempts?: true
    lastAttemptAt?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type DeviceRateLimitAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DeviceRateLimit to aggregate.
     */
    where?: DeviceRateLimitWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DeviceRateLimits to fetch.
     */
    orderBy?: DeviceRateLimitOrderByWithRelationInput | DeviceRateLimitOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DeviceRateLimitWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DeviceRateLimits from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DeviceRateLimits.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned DeviceRateLimits
    **/
    _count?: true | DeviceRateLimitCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DeviceRateLimitAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DeviceRateLimitSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DeviceRateLimitMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DeviceRateLimitMaxAggregateInputType
  }

  export type GetDeviceRateLimitAggregateType<T extends DeviceRateLimitAggregateArgs> = {
        [P in keyof T & keyof AggregateDeviceRateLimit]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDeviceRateLimit[P]>
      : GetScalarType<T[P], AggregateDeviceRateLimit[P]>
  }




  export type DeviceRateLimitGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DeviceRateLimitWhereInput
    orderBy?: DeviceRateLimitOrderByWithAggregationInput | DeviceRateLimitOrderByWithAggregationInput[]
    by: DeviceRateLimitScalarFieldEnum[] | DeviceRateLimitScalarFieldEnum
    having?: DeviceRateLimitScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DeviceRateLimitCountAggregateInputType | true
    _avg?: DeviceRateLimitAvgAggregateInputType
    _sum?: DeviceRateLimitSumAggregateInputType
    _min?: DeviceRateLimitMinAggregateInputType
    _max?: DeviceRateLimitMaxAggregateInputType
  }

  export type DeviceRateLimitGroupByOutputType = {
    deviceID: string
    attempts: number
    lastAttemptAt: Date
    createdAt: Date
    updatedAt: Date
    _count: DeviceRateLimitCountAggregateOutputType | null
    _avg: DeviceRateLimitAvgAggregateOutputType | null
    _sum: DeviceRateLimitSumAggregateOutputType | null
    _min: DeviceRateLimitMinAggregateOutputType | null
    _max: DeviceRateLimitMaxAggregateOutputType | null
  }

  type GetDeviceRateLimitGroupByPayload<T extends DeviceRateLimitGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DeviceRateLimitGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DeviceRateLimitGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DeviceRateLimitGroupByOutputType[P]>
            : GetScalarType<T[P], DeviceRateLimitGroupByOutputType[P]>
        }
      >
    >


  export type DeviceRateLimitSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    deviceID?: boolean
    attempts?: boolean
    lastAttemptAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["deviceRateLimit"]>

  export type DeviceRateLimitSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    deviceID?: boolean
    attempts?: boolean
    lastAttemptAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["deviceRateLimit"]>

  export type DeviceRateLimitSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    deviceID?: boolean
    attempts?: boolean
    lastAttemptAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["deviceRateLimit"]>

  export type DeviceRateLimitSelectScalar = {
    deviceID?: boolean
    attempts?: boolean
    lastAttemptAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type DeviceRateLimitOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"deviceID" | "attempts" | "lastAttemptAt" | "createdAt" | "updatedAt", ExtArgs["result"]["deviceRateLimit"]>

  export type $DeviceRateLimitPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "DeviceRateLimit"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      deviceID: string
      attempts: number
      lastAttemptAt: Date
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["deviceRateLimit"]>
    composites: {}
  }

  type DeviceRateLimitGetPayload<S extends boolean | null | undefined | DeviceRateLimitDefaultArgs> = $Result.GetResult<Prisma.$DeviceRateLimitPayload, S>

  type DeviceRateLimitCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<DeviceRateLimitFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: DeviceRateLimitCountAggregateInputType | true
    }

  export interface DeviceRateLimitDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['DeviceRateLimit'], meta: { name: 'DeviceRateLimit' } }
    /**
     * Find zero or one DeviceRateLimit that matches the filter.
     * @param {DeviceRateLimitFindUniqueArgs} args - Arguments to find a DeviceRateLimit
     * @example
     * // Get one DeviceRateLimit
     * const deviceRateLimit = await prisma.deviceRateLimit.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DeviceRateLimitFindUniqueArgs>(args: SelectSubset<T, DeviceRateLimitFindUniqueArgs<ExtArgs>>): Prisma__DeviceRateLimitClient<$Result.GetResult<Prisma.$DeviceRateLimitPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one DeviceRateLimit that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {DeviceRateLimitFindUniqueOrThrowArgs} args - Arguments to find a DeviceRateLimit
     * @example
     * // Get one DeviceRateLimit
     * const deviceRateLimit = await prisma.deviceRateLimit.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DeviceRateLimitFindUniqueOrThrowArgs>(args: SelectSubset<T, DeviceRateLimitFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DeviceRateLimitClient<$Result.GetResult<Prisma.$DeviceRateLimitPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first DeviceRateLimit that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DeviceRateLimitFindFirstArgs} args - Arguments to find a DeviceRateLimit
     * @example
     * // Get one DeviceRateLimit
     * const deviceRateLimit = await prisma.deviceRateLimit.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DeviceRateLimitFindFirstArgs>(args?: SelectSubset<T, DeviceRateLimitFindFirstArgs<ExtArgs>>): Prisma__DeviceRateLimitClient<$Result.GetResult<Prisma.$DeviceRateLimitPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first DeviceRateLimit that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DeviceRateLimitFindFirstOrThrowArgs} args - Arguments to find a DeviceRateLimit
     * @example
     * // Get one DeviceRateLimit
     * const deviceRateLimit = await prisma.deviceRateLimit.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DeviceRateLimitFindFirstOrThrowArgs>(args?: SelectSubset<T, DeviceRateLimitFindFirstOrThrowArgs<ExtArgs>>): Prisma__DeviceRateLimitClient<$Result.GetResult<Prisma.$DeviceRateLimitPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more DeviceRateLimits that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DeviceRateLimitFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all DeviceRateLimits
     * const deviceRateLimits = await prisma.deviceRateLimit.findMany()
     * 
     * // Get first 10 DeviceRateLimits
     * const deviceRateLimits = await prisma.deviceRateLimit.findMany({ take: 10 })
     * 
     * // Only select the `deviceID`
     * const deviceRateLimitWithDeviceIDOnly = await prisma.deviceRateLimit.findMany({ select: { deviceID: true } })
     * 
     */
    findMany<T extends DeviceRateLimitFindManyArgs>(args?: SelectSubset<T, DeviceRateLimitFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DeviceRateLimitPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a DeviceRateLimit.
     * @param {DeviceRateLimitCreateArgs} args - Arguments to create a DeviceRateLimit.
     * @example
     * // Create one DeviceRateLimit
     * const DeviceRateLimit = await prisma.deviceRateLimit.create({
     *   data: {
     *     // ... data to create a DeviceRateLimit
     *   }
     * })
     * 
     */
    create<T extends DeviceRateLimitCreateArgs>(args: SelectSubset<T, DeviceRateLimitCreateArgs<ExtArgs>>): Prisma__DeviceRateLimitClient<$Result.GetResult<Prisma.$DeviceRateLimitPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many DeviceRateLimits.
     * @param {DeviceRateLimitCreateManyArgs} args - Arguments to create many DeviceRateLimits.
     * @example
     * // Create many DeviceRateLimits
     * const deviceRateLimit = await prisma.deviceRateLimit.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DeviceRateLimitCreateManyArgs>(args?: SelectSubset<T, DeviceRateLimitCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many DeviceRateLimits and returns the data saved in the database.
     * @param {DeviceRateLimitCreateManyAndReturnArgs} args - Arguments to create many DeviceRateLimits.
     * @example
     * // Create many DeviceRateLimits
     * const deviceRateLimit = await prisma.deviceRateLimit.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many DeviceRateLimits and only return the `deviceID`
     * const deviceRateLimitWithDeviceIDOnly = await prisma.deviceRateLimit.createManyAndReturn({
     *   select: { deviceID: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends DeviceRateLimitCreateManyAndReturnArgs>(args?: SelectSubset<T, DeviceRateLimitCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DeviceRateLimitPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a DeviceRateLimit.
     * @param {DeviceRateLimitDeleteArgs} args - Arguments to delete one DeviceRateLimit.
     * @example
     * // Delete one DeviceRateLimit
     * const DeviceRateLimit = await prisma.deviceRateLimit.delete({
     *   where: {
     *     // ... filter to delete one DeviceRateLimit
     *   }
     * })
     * 
     */
    delete<T extends DeviceRateLimitDeleteArgs>(args: SelectSubset<T, DeviceRateLimitDeleteArgs<ExtArgs>>): Prisma__DeviceRateLimitClient<$Result.GetResult<Prisma.$DeviceRateLimitPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one DeviceRateLimit.
     * @param {DeviceRateLimitUpdateArgs} args - Arguments to update one DeviceRateLimit.
     * @example
     * // Update one DeviceRateLimit
     * const deviceRateLimit = await prisma.deviceRateLimit.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DeviceRateLimitUpdateArgs>(args: SelectSubset<T, DeviceRateLimitUpdateArgs<ExtArgs>>): Prisma__DeviceRateLimitClient<$Result.GetResult<Prisma.$DeviceRateLimitPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more DeviceRateLimits.
     * @param {DeviceRateLimitDeleteManyArgs} args - Arguments to filter DeviceRateLimits to delete.
     * @example
     * // Delete a few DeviceRateLimits
     * const { count } = await prisma.deviceRateLimit.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DeviceRateLimitDeleteManyArgs>(args?: SelectSubset<T, DeviceRateLimitDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DeviceRateLimits.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DeviceRateLimitUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many DeviceRateLimits
     * const deviceRateLimit = await prisma.deviceRateLimit.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DeviceRateLimitUpdateManyArgs>(args: SelectSubset<T, DeviceRateLimitUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DeviceRateLimits and returns the data updated in the database.
     * @param {DeviceRateLimitUpdateManyAndReturnArgs} args - Arguments to update many DeviceRateLimits.
     * @example
     * // Update many DeviceRateLimits
     * const deviceRateLimit = await prisma.deviceRateLimit.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more DeviceRateLimits and only return the `deviceID`
     * const deviceRateLimitWithDeviceIDOnly = await prisma.deviceRateLimit.updateManyAndReturn({
     *   select: { deviceID: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends DeviceRateLimitUpdateManyAndReturnArgs>(args: SelectSubset<T, DeviceRateLimitUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DeviceRateLimitPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one DeviceRateLimit.
     * @param {DeviceRateLimitUpsertArgs} args - Arguments to update or create a DeviceRateLimit.
     * @example
     * // Update or create a DeviceRateLimit
     * const deviceRateLimit = await prisma.deviceRateLimit.upsert({
     *   create: {
     *     // ... data to create a DeviceRateLimit
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the DeviceRateLimit we want to update
     *   }
     * })
     */
    upsert<T extends DeviceRateLimitUpsertArgs>(args: SelectSubset<T, DeviceRateLimitUpsertArgs<ExtArgs>>): Prisma__DeviceRateLimitClient<$Result.GetResult<Prisma.$DeviceRateLimitPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of DeviceRateLimits.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DeviceRateLimitCountArgs} args - Arguments to filter DeviceRateLimits to count.
     * @example
     * // Count the number of DeviceRateLimits
     * const count = await prisma.deviceRateLimit.count({
     *   where: {
     *     // ... the filter for the DeviceRateLimits we want to count
     *   }
     * })
    **/
    count<T extends DeviceRateLimitCountArgs>(
      args?: Subset<T, DeviceRateLimitCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DeviceRateLimitCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a DeviceRateLimit.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DeviceRateLimitAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DeviceRateLimitAggregateArgs>(args: Subset<T, DeviceRateLimitAggregateArgs>): Prisma.PrismaPromise<GetDeviceRateLimitAggregateType<T>>

    /**
     * Group by DeviceRateLimit.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DeviceRateLimitGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DeviceRateLimitGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DeviceRateLimitGroupByArgs['orderBy'] }
        : { orderBy?: DeviceRateLimitGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DeviceRateLimitGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDeviceRateLimitGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the DeviceRateLimit model
   */
  readonly fields: DeviceRateLimitFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for DeviceRateLimit.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DeviceRateLimitClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the DeviceRateLimit model
   */
  interface DeviceRateLimitFieldRefs {
    readonly deviceID: FieldRef<"DeviceRateLimit", 'String'>
    readonly attempts: FieldRef<"DeviceRateLimit", 'Int'>
    readonly lastAttemptAt: FieldRef<"DeviceRateLimit", 'DateTime'>
    readonly createdAt: FieldRef<"DeviceRateLimit", 'DateTime'>
    readonly updatedAt: FieldRef<"DeviceRateLimit", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * DeviceRateLimit findUnique
   */
  export type DeviceRateLimitFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DeviceRateLimit
     */
    select?: DeviceRateLimitSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DeviceRateLimit
     */
    omit?: DeviceRateLimitOmit<ExtArgs> | null
    /**
     * Filter, which DeviceRateLimit to fetch.
     */
    where: DeviceRateLimitWhereUniqueInput
  }

  /**
   * DeviceRateLimit findUniqueOrThrow
   */
  export type DeviceRateLimitFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DeviceRateLimit
     */
    select?: DeviceRateLimitSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DeviceRateLimit
     */
    omit?: DeviceRateLimitOmit<ExtArgs> | null
    /**
     * Filter, which DeviceRateLimit to fetch.
     */
    where: DeviceRateLimitWhereUniqueInput
  }

  /**
   * DeviceRateLimit findFirst
   */
  export type DeviceRateLimitFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DeviceRateLimit
     */
    select?: DeviceRateLimitSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DeviceRateLimit
     */
    omit?: DeviceRateLimitOmit<ExtArgs> | null
    /**
     * Filter, which DeviceRateLimit to fetch.
     */
    where?: DeviceRateLimitWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DeviceRateLimits to fetch.
     */
    orderBy?: DeviceRateLimitOrderByWithRelationInput | DeviceRateLimitOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DeviceRateLimits.
     */
    cursor?: DeviceRateLimitWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DeviceRateLimits from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DeviceRateLimits.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DeviceRateLimits.
     */
    distinct?: DeviceRateLimitScalarFieldEnum | DeviceRateLimitScalarFieldEnum[]
  }

  /**
   * DeviceRateLimit findFirstOrThrow
   */
  export type DeviceRateLimitFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DeviceRateLimit
     */
    select?: DeviceRateLimitSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DeviceRateLimit
     */
    omit?: DeviceRateLimitOmit<ExtArgs> | null
    /**
     * Filter, which DeviceRateLimit to fetch.
     */
    where?: DeviceRateLimitWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DeviceRateLimits to fetch.
     */
    orderBy?: DeviceRateLimitOrderByWithRelationInput | DeviceRateLimitOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DeviceRateLimits.
     */
    cursor?: DeviceRateLimitWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DeviceRateLimits from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DeviceRateLimits.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DeviceRateLimits.
     */
    distinct?: DeviceRateLimitScalarFieldEnum | DeviceRateLimitScalarFieldEnum[]
  }

  /**
   * DeviceRateLimit findMany
   */
  export type DeviceRateLimitFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DeviceRateLimit
     */
    select?: DeviceRateLimitSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DeviceRateLimit
     */
    omit?: DeviceRateLimitOmit<ExtArgs> | null
    /**
     * Filter, which DeviceRateLimits to fetch.
     */
    where?: DeviceRateLimitWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DeviceRateLimits to fetch.
     */
    orderBy?: DeviceRateLimitOrderByWithRelationInput | DeviceRateLimitOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing DeviceRateLimits.
     */
    cursor?: DeviceRateLimitWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DeviceRateLimits from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DeviceRateLimits.
     */
    skip?: number
    distinct?: DeviceRateLimitScalarFieldEnum | DeviceRateLimitScalarFieldEnum[]
  }

  /**
   * DeviceRateLimit create
   */
  export type DeviceRateLimitCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DeviceRateLimit
     */
    select?: DeviceRateLimitSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DeviceRateLimit
     */
    omit?: DeviceRateLimitOmit<ExtArgs> | null
    /**
     * The data needed to create a DeviceRateLimit.
     */
    data: XOR<DeviceRateLimitCreateInput, DeviceRateLimitUncheckedCreateInput>
  }

  /**
   * DeviceRateLimit createMany
   */
  export type DeviceRateLimitCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many DeviceRateLimits.
     */
    data: DeviceRateLimitCreateManyInput | DeviceRateLimitCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * DeviceRateLimit createManyAndReturn
   */
  export type DeviceRateLimitCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DeviceRateLimit
     */
    select?: DeviceRateLimitSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the DeviceRateLimit
     */
    omit?: DeviceRateLimitOmit<ExtArgs> | null
    /**
     * The data used to create many DeviceRateLimits.
     */
    data: DeviceRateLimitCreateManyInput | DeviceRateLimitCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * DeviceRateLimit update
   */
  export type DeviceRateLimitUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DeviceRateLimit
     */
    select?: DeviceRateLimitSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DeviceRateLimit
     */
    omit?: DeviceRateLimitOmit<ExtArgs> | null
    /**
     * The data needed to update a DeviceRateLimit.
     */
    data: XOR<DeviceRateLimitUpdateInput, DeviceRateLimitUncheckedUpdateInput>
    /**
     * Choose, which DeviceRateLimit to update.
     */
    where: DeviceRateLimitWhereUniqueInput
  }

  /**
   * DeviceRateLimit updateMany
   */
  export type DeviceRateLimitUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update DeviceRateLimits.
     */
    data: XOR<DeviceRateLimitUpdateManyMutationInput, DeviceRateLimitUncheckedUpdateManyInput>
    /**
     * Filter which DeviceRateLimits to update
     */
    where?: DeviceRateLimitWhereInput
    /**
     * Limit how many DeviceRateLimits to update.
     */
    limit?: number
  }

  /**
   * DeviceRateLimit updateManyAndReturn
   */
  export type DeviceRateLimitUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DeviceRateLimit
     */
    select?: DeviceRateLimitSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the DeviceRateLimit
     */
    omit?: DeviceRateLimitOmit<ExtArgs> | null
    /**
     * The data used to update DeviceRateLimits.
     */
    data: XOR<DeviceRateLimitUpdateManyMutationInput, DeviceRateLimitUncheckedUpdateManyInput>
    /**
     * Filter which DeviceRateLimits to update
     */
    where?: DeviceRateLimitWhereInput
    /**
     * Limit how many DeviceRateLimits to update.
     */
    limit?: number
  }

  /**
   * DeviceRateLimit upsert
   */
  export type DeviceRateLimitUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DeviceRateLimit
     */
    select?: DeviceRateLimitSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DeviceRateLimit
     */
    omit?: DeviceRateLimitOmit<ExtArgs> | null
    /**
     * The filter to search for the DeviceRateLimit to update in case it exists.
     */
    where: DeviceRateLimitWhereUniqueInput
    /**
     * In case the DeviceRateLimit found by the `where` argument doesn't exist, create a new DeviceRateLimit with this data.
     */
    create: XOR<DeviceRateLimitCreateInput, DeviceRateLimitUncheckedCreateInput>
    /**
     * In case the DeviceRateLimit was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DeviceRateLimitUpdateInput, DeviceRateLimitUncheckedUpdateInput>
  }

  /**
   * DeviceRateLimit delete
   */
  export type DeviceRateLimitDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DeviceRateLimit
     */
    select?: DeviceRateLimitSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DeviceRateLimit
     */
    omit?: DeviceRateLimitOmit<ExtArgs> | null
    /**
     * Filter which DeviceRateLimit to delete.
     */
    where: DeviceRateLimitWhereUniqueInput
  }

  /**
   * DeviceRateLimit deleteMany
   */
  export type DeviceRateLimitDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DeviceRateLimits to delete
     */
    where?: DeviceRateLimitWhereInput
    /**
     * Limit how many DeviceRateLimits to delete.
     */
    limit?: number
  }

  /**
   * DeviceRateLimit without action
   */
  export type DeviceRateLimitDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DeviceRateLimit
     */
    select?: DeviceRateLimitSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DeviceRateLimit
     */
    omit?: DeviceRateLimitOmit<ExtArgs> | null
  }


  /**
   * Model AuthLog
   */

  export type AggregateAuthLog = {
    _count: AuthLogCountAggregateOutputType | null
    _avg: AuthLogAvgAggregateOutputType | null
    _sum: AuthLogSumAggregateOutputType | null
    _min: AuthLogMinAggregateOutputType | null
    _max: AuthLogMaxAggregateOutputType | null
  }

  export type AuthLogAvgAggregateOutputType = {
    id: number | null
  }

  export type AuthLogSumAggregateOutputType = {
    id: number | null
  }

  export type AuthLogMinAggregateOutputType = {
    id: number | null
    userID: string | null
    eventType: $Enums.AuthLogEvent | null
    deviceID: string | null
    deviceName: string | null
    deviceType: $Enums.DeviceType | null
    performedBy: $Enums.PerformedBy | null
    timestamp: Date | null
  }

  export type AuthLogMaxAggregateOutputType = {
    id: number | null
    userID: string | null
    eventType: $Enums.AuthLogEvent | null
    deviceID: string | null
    deviceName: string | null
    deviceType: $Enums.DeviceType | null
    performedBy: $Enums.PerformedBy | null
    timestamp: Date | null
  }

  export type AuthLogCountAggregateOutputType = {
    id: number
    userID: number
    eventType: number
    deviceID: number
    deviceName: number
    deviceType: number
    performedBy: number
    timestamp: number
    _all: number
  }


  export type AuthLogAvgAggregateInputType = {
    id?: true
  }

  export type AuthLogSumAggregateInputType = {
    id?: true
  }

  export type AuthLogMinAggregateInputType = {
    id?: true
    userID?: true
    eventType?: true
    deviceID?: true
    deviceName?: true
    deviceType?: true
    performedBy?: true
    timestamp?: true
  }

  export type AuthLogMaxAggregateInputType = {
    id?: true
    userID?: true
    eventType?: true
    deviceID?: true
    deviceName?: true
    deviceType?: true
    performedBy?: true
    timestamp?: true
  }

  export type AuthLogCountAggregateInputType = {
    id?: true
    userID?: true
    eventType?: true
    deviceID?: true
    deviceName?: true
    deviceType?: true
    performedBy?: true
    timestamp?: true
    _all?: true
  }

  export type AuthLogAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AuthLog to aggregate.
     */
    where?: AuthLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuthLogs to fetch.
     */
    orderBy?: AuthLogOrderByWithRelationInput | AuthLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AuthLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuthLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuthLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AuthLogs
    **/
    _count?: true | AuthLogCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AuthLogAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AuthLogSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AuthLogMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AuthLogMaxAggregateInputType
  }

  export type GetAuthLogAggregateType<T extends AuthLogAggregateArgs> = {
        [P in keyof T & keyof AggregateAuthLog]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAuthLog[P]>
      : GetScalarType<T[P], AggregateAuthLog[P]>
  }




  export type AuthLogGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AuthLogWhereInput
    orderBy?: AuthLogOrderByWithAggregationInput | AuthLogOrderByWithAggregationInput[]
    by: AuthLogScalarFieldEnum[] | AuthLogScalarFieldEnum
    having?: AuthLogScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AuthLogCountAggregateInputType | true
    _avg?: AuthLogAvgAggregateInputType
    _sum?: AuthLogSumAggregateInputType
    _min?: AuthLogMinAggregateInputType
    _max?: AuthLogMaxAggregateInputType
  }

  export type AuthLogGroupByOutputType = {
    id: number
    userID: string
    eventType: $Enums.AuthLogEvent
    deviceID: string
    deviceName: string | null
    deviceType: $Enums.DeviceType | null
    performedBy: $Enums.PerformedBy
    timestamp: Date
    _count: AuthLogCountAggregateOutputType | null
    _avg: AuthLogAvgAggregateOutputType | null
    _sum: AuthLogSumAggregateOutputType | null
    _min: AuthLogMinAggregateOutputType | null
    _max: AuthLogMaxAggregateOutputType | null
  }

  type GetAuthLogGroupByPayload<T extends AuthLogGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AuthLogGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AuthLogGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AuthLogGroupByOutputType[P]>
            : GetScalarType<T[P], AuthLogGroupByOutputType[P]>
        }
      >
    >


  export type AuthLogSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userID?: boolean
    eventType?: boolean
    deviceID?: boolean
    deviceName?: boolean
    deviceType?: boolean
    performedBy?: boolean
    timestamp?: boolean
    adminAction?: boolean | AuthLog$adminActionArgs<ExtArgs>
  }, ExtArgs["result"]["authLog"]>

  export type AuthLogSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userID?: boolean
    eventType?: boolean
    deviceID?: boolean
    deviceName?: boolean
    deviceType?: boolean
    performedBy?: boolean
    timestamp?: boolean
  }, ExtArgs["result"]["authLog"]>

  export type AuthLogSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userID?: boolean
    eventType?: boolean
    deviceID?: boolean
    deviceName?: boolean
    deviceType?: boolean
    performedBy?: boolean
    timestamp?: boolean
  }, ExtArgs["result"]["authLog"]>

  export type AuthLogSelectScalar = {
    id?: boolean
    userID?: boolean
    eventType?: boolean
    deviceID?: boolean
    deviceName?: boolean
    deviceType?: boolean
    performedBy?: boolean
    timestamp?: boolean
  }

  export type AuthLogOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userID" | "eventType" | "deviceID" | "deviceName" | "deviceType" | "performedBy" | "timestamp", ExtArgs["result"]["authLog"]>
  export type AuthLogInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    adminAction?: boolean | AuthLog$adminActionArgs<ExtArgs>
  }
  export type AuthLogIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type AuthLogIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $AuthLogPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AuthLog"
    objects: {
      adminAction: Prisma.$AdminActionPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userID: string
      eventType: $Enums.AuthLogEvent
      deviceID: string
      deviceName: string | null
      deviceType: $Enums.DeviceType | null
      performedBy: $Enums.PerformedBy
      timestamp: Date
    }, ExtArgs["result"]["authLog"]>
    composites: {}
  }

  type AuthLogGetPayload<S extends boolean | null | undefined | AuthLogDefaultArgs> = $Result.GetResult<Prisma.$AuthLogPayload, S>

  type AuthLogCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AuthLogFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AuthLogCountAggregateInputType | true
    }

  export interface AuthLogDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AuthLog'], meta: { name: 'AuthLog' } }
    /**
     * Find zero or one AuthLog that matches the filter.
     * @param {AuthLogFindUniqueArgs} args - Arguments to find a AuthLog
     * @example
     * // Get one AuthLog
     * const authLog = await prisma.authLog.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AuthLogFindUniqueArgs>(args: SelectSubset<T, AuthLogFindUniqueArgs<ExtArgs>>): Prisma__AuthLogClient<$Result.GetResult<Prisma.$AuthLogPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one AuthLog that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AuthLogFindUniqueOrThrowArgs} args - Arguments to find a AuthLog
     * @example
     * // Get one AuthLog
     * const authLog = await prisma.authLog.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AuthLogFindUniqueOrThrowArgs>(args: SelectSubset<T, AuthLogFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AuthLogClient<$Result.GetResult<Prisma.$AuthLogPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AuthLog that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuthLogFindFirstArgs} args - Arguments to find a AuthLog
     * @example
     * // Get one AuthLog
     * const authLog = await prisma.authLog.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AuthLogFindFirstArgs>(args?: SelectSubset<T, AuthLogFindFirstArgs<ExtArgs>>): Prisma__AuthLogClient<$Result.GetResult<Prisma.$AuthLogPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AuthLog that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuthLogFindFirstOrThrowArgs} args - Arguments to find a AuthLog
     * @example
     * // Get one AuthLog
     * const authLog = await prisma.authLog.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AuthLogFindFirstOrThrowArgs>(args?: SelectSubset<T, AuthLogFindFirstOrThrowArgs<ExtArgs>>): Prisma__AuthLogClient<$Result.GetResult<Prisma.$AuthLogPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more AuthLogs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuthLogFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AuthLogs
     * const authLogs = await prisma.authLog.findMany()
     * 
     * // Get first 10 AuthLogs
     * const authLogs = await prisma.authLog.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const authLogWithIdOnly = await prisma.authLog.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AuthLogFindManyArgs>(args?: SelectSubset<T, AuthLogFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuthLogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a AuthLog.
     * @param {AuthLogCreateArgs} args - Arguments to create a AuthLog.
     * @example
     * // Create one AuthLog
     * const AuthLog = await prisma.authLog.create({
     *   data: {
     *     // ... data to create a AuthLog
     *   }
     * })
     * 
     */
    create<T extends AuthLogCreateArgs>(args: SelectSubset<T, AuthLogCreateArgs<ExtArgs>>): Prisma__AuthLogClient<$Result.GetResult<Prisma.$AuthLogPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many AuthLogs.
     * @param {AuthLogCreateManyArgs} args - Arguments to create many AuthLogs.
     * @example
     * // Create many AuthLogs
     * const authLog = await prisma.authLog.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AuthLogCreateManyArgs>(args?: SelectSubset<T, AuthLogCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many AuthLogs and returns the data saved in the database.
     * @param {AuthLogCreateManyAndReturnArgs} args - Arguments to create many AuthLogs.
     * @example
     * // Create many AuthLogs
     * const authLog = await prisma.authLog.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many AuthLogs and only return the `id`
     * const authLogWithIdOnly = await prisma.authLog.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AuthLogCreateManyAndReturnArgs>(args?: SelectSubset<T, AuthLogCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuthLogPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a AuthLog.
     * @param {AuthLogDeleteArgs} args - Arguments to delete one AuthLog.
     * @example
     * // Delete one AuthLog
     * const AuthLog = await prisma.authLog.delete({
     *   where: {
     *     // ... filter to delete one AuthLog
     *   }
     * })
     * 
     */
    delete<T extends AuthLogDeleteArgs>(args: SelectSubset<T, AuthLogDeleteArgs<ExtArgs>>): Prisma__AuthLogClient<$Result.GetResult<Prisma.$AuthLogPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one AuthLog.
     * @param {AuthLogUpdateArgs} args - Arguments to update one AuthLog.
     * @example
     * // Update one AuthLog
     * const authLog = await prisma.authLog.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AuthLogUpdateArgs>(args: SelectSubset<T, AuthLogUpdateArgs<ExtArgs>>): Prisma__AuthLogClient<$Result.GetResult<Prisma.$AuthLogPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more AuthLogs.
     * @param {AuthLogDeleteManyArgs} args - Arguments to filter AuthLogs to delete.
     * @example
     * // Delete a few AuthLogs
     * const { count } = await prisma.authLog.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AuthLogDeleteManyArgs>(args?: SelectSubset<T, AuthLogDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AuthLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuthLogUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AuthLogs
     * const authLog = await prisma.authLog.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AuthLogUpdateManyArgs>(args: SelectSubset<T, AuthLogUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AuthLogs and returns the data updated in the database.
     * @param {AuthLogUpdateManyAndReturnArgs} args - Arguments to update many AuthLogs.
     * @example
     * // Update many AuthLogs
     * const authLog = await prisma.authLog.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more AuthLogs and only return the `id`
     * const authLogWithIdOnly = await prisma.authLog.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AuthLogUpdateManyAndReturnArgs>(args: SelectSubset<T, AuthLogUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuthLogPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one AuthLog.
     * @param {AuthLogUpsertArgs} args - Arguments to update or create a AuthLog.
     * @example
     * // Update or create a AuthLog
     * const authLog = await prisma.authLog.upsert({
     *   create: {
     *     // ... data to create a AuthLog
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AuthLog we want to update
     *   }
     * })
     */
    upsert<T extends AuthLogUpsertArgs>(args: SelectSubset<T, AuthLogUpsertArgs<ExtArgs>>): Prisma__AuthLogClient<$Result.GetResult<Prisma.$AuthLogPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of AuthLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuthLogCountArgs} args - Arguments to filter AuthLogs to count.
     * @example
     * // Count the number of AuthLogs
     * const count = await prisma.authLog.count({
     *   where: {
     *     // ... the filter for the AuthLogs we want to count
     *   }
     * })
    **/
    count<T extends AuthLogCountArgs>(
      args?: Subset<T, AuthLogCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AuthLogCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AuthLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuthLogAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AuthLogAggregateArgs>(args: Subset<T, AuthLogAggregateArgs>): Prisma.PrismaPromise<GetAuthLogAggregateType<T>>

    /**
     * Group by AuthLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuthLogGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AuthLogGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AuthLogGroupByArgs['orderBy'] }
        : { orderBy?: AuthLogGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AuthLogGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAuthLogGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AuthLog model
   */
  readonly fields: AuthLogFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AuthLog.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AuthLogClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    adminAction<T extends AuthLog$adminActionArgs<ExtArgs> = {}>(args?: Subset<T, AuthLog$adminActionArgs<ExtArgs>>): Prisma__AdminActionClient<$Result.GetResult<Prisma.$AdminActionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the AuthLog model
   */
  interface AuthLogFieldRefs {
    readonly id: FieldRef<"AuthLog", 'Int'>
    readonly userID: FieldRef<"AuthLog", 'String'>
    readonly eventType: FieldRef<"AuthLog", 'AuthLogEvent'>
    readonly deviceID: FieldRef<"AuthLog", 'String'>
    readonly deviceName: FieldRef<"AuthLog", 'String'>
    readonly deviceType: FieldRef<"AuthLog", 'DeviceType'>
    readonly performedBy: FieldRef<"AuthLog", 'PerformedBy'>
    readonly timestamp: FieldRef<"AuthLog", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * AuthLog findUnique
   */
  export type AuthLogFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuthLog
     */
    select?: AuthLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuthLog
     */
    omit?: AuthLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuthLogInclude<ExtArgs> | null
    /**
     * Filter, which AuthLog to fetch.
     */
    where: AuthLogWhereUniqueInput
  }

  /**
   * AuthLog findUniqueOrThrow
   */
  export type AuthLogFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuthLog
     */
    select?: AuthLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuthLog
     */
    omit?: AuthLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuthLogInclude<ExtArgs> | null
    /**
     * Filter, which AuthLog to fetch.
     */
    where: AuthLogWhereUniqueInput
  }

  /**
   * AuthLog findFirst
   */
  export type AuthLogFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuthLog
     */
    select?: AuthLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuthLog
     */
    omit?: AuthLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuthLogInclude<ExtArgs> | null
    /**
     * Filter, which AuthLog to fetch.
     */
    where?: AuthLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuthLogs to fetch.
     */
    orderBy?: AuthLogOrderByWithRelationInput | AuthLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AuthLogs.
     */
    cursor?: AuthLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuthLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuthLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AuthLogs.
     */
    distinct?: AuthLogScalarFieldEnum | AuthLogScalarFieldEnum[]
  }

  /**
   * AuthLog findFirstOrThrow
   */
  export type AuthLogFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuthLog
     */
    select?: AuthLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuthLog
     */
    omit?: AuthLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuthLogInclude<ExtArgs> | null
    /**
     * Filter, which AuthLog to fetch.
     */
    where?: AuthLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuthLogs to fetch.
     */
    orderBy?: AuthLogOrderByWithRelationInput | AuthLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AuthLogs.
     */
    cursor?: AuthLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuthLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuthLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AuthLogs.
     */
    distinct?: AuthLogScalarFieldEnum | AuthLogScalarFieldEnum[]
  }

  /**
   * AuthLog findMany
   */
  export type AuthLogFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuthLog
     */
    select?: AuthLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuthLog
     */
    omit?: AuthLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuthLogInclude<ExtArgs> | null
    /**
     * Filter, which AuthLogs to fetch.
     */
    where?: AuthLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuthLogs to fetch.
     */
    orderBy?: AuthLogOrderByWithRelationInput | AuthLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AuthLogs.
     */
    cursor?: AuthLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuthLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuthLogs.
     */
    skip?: number
    distinct?: AuthLogScalarFieldEnum | AuthLogScalarFieldEnum[]
  }

  /**
   * AuthLog create
   */
  export type AuthLogCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuthLog
     */
    select?: AuthLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuthLog
     */
    omit?: AuthLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuthLogInclude<ExtArgs> | null
    /**
     * The data needed to create a AuthLog.
     */
    data: XOR<AuthLogCreateInput, AuthLogUncheckedCreateInput>
  }

  /**
   * AuthLog createMany
   */
  export type AuthLogCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AuthLogs.
     */
    data: AuthLogCreateManyInput | AuthLogCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * AuthLog createManyAndReturn
   */
  export type AuthLogCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuthLog
     */
    select?: AuthLogSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AuthLog
     */
    omit?: AuthLogOmit<ExtArgs> | null
    /**
     * The data used to create many AuthLogs.
     */
    data: AuthLogCreateManyInput | AuthLogCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * AuthLog update
   */
  export type AuthLogUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuthLog
     */
    select?: AuthLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuthLog
     */
    omit?: AuthLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuthLogInclude<ExtArgs> | null
    /**
     * The data needed to update a AuthLog.
     */
    data: XOR<AuthLogUpdateInput, AuthLogUncheckedUpdateInput>
    /**
     * Choose, which AuthLog to update.
     */
    where: AuthLogWhereUniqueInput
  }

  /**
   * AuthLog updateMany
   */
  export type AuthLogUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AuthLogs.
     */
    data: XOR<AuthLogUpdateManyMutationInput, AuthLogUncheckedUpdateManyInput>
    /**
     * Filter which AuthLogs to update
     */
    where?: AuthLogWhereInput
    /**
     * Limit how many AuthLogs to update.
     */
    limit?: number
  }

  /**
   * AuthLog updateManyAndReturn
   */
  export type AuthLogUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuthLog
     */
    select?: AuthLogSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AuthLog
     */
    omit?: AuthLogOmit<ExtArgs> | null
    /**
     * The data used to update AuthLogs.
     */
    data: XOR<AuthLogUpdateManyMutationInput, AuthLogUncheckedUpdateManyInput>
    /**
     * Filter which AuthLogs to update
     */
    where?: AuthLogWhereInput
    /**
     * Limit how many AuthLogs to update.
     */
    limit?: number
  }

  /**
   * AuthLog upsert
   */
  export type AuthLogUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuthLog
     */
    select?: AuthLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuthLog
     */
    omit?: AuthLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuthLogInclude<ExtArgs> | null
    /**
     * The filter to search for the AuthLog to update in case it exists.
     */
    where: AuthLogWhereUniqueInput
    /**
     * In case the AuthLog found by the `where` argument doesn't exist, create a new AuthLog with this data.
     */
    create: XOR<AuthLogCreateInput, AuthLogUncheckedCreateInput>
    /**
     * In case the AuthLog was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AuthLogUpdateInput, AuthLogUncheckedUpdateInput>
  }

  /**
   * AuthLog delete
   */
  export type AuthLogDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuthLog
     */
    select?: AuthLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuthLog
     */
    omit?: AuthLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuthLogInclude<ExtArgs> | null
    /**
     * Filter which AuthLog to delete.
     */
    where: AuthLogWhereUniqueInput
  }

  /**
   * AuthLog deleteMany
   */
  export type AuthLogDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AuthLogs to delete
     */
    where?: AuthLogWhereInput
    /**
     * Limit how many AuthLogs to delete.
     */
    limit?: number
  }

  /**
   * AuthLog.adminAction
   */
  export type AuthLog$adminActionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminAction
     */
    select?: AdminActionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AdminAction
     */
    omit?: AdminActionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminActionInclude<ExtArgs> | null
    where?: AdminActionWhereInput
  }

  /**
   * AuthLog without action
   */
  export type AuthLogDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuthLog
     */
    select?: AuthLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuthLog
     */
    omit?: AuthLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuthLogInclude<ExtArgs> | null
  }


  /**
   * Model AdminAction
   */

  export type AggregateAdminAction = {
    _count: AdminActionCountAggregateOutputType | null
    _avg: AdminActionAvgAggregateOutputType | null
    _sum: AdminActionSumAggregateOutputType | null
    _min: AdminActionMinAggregateOutputType | null
    _max: AdminActionMaxAggregateOutputType | null
  }

  export type AdminActionAvgAggregateOutputType = {
    id: number | null
  }

  export type AdminActionSumAggregateOutputType = {
    id: number | null
  }

  export type AdminActionMinAggregateOutputType = {
    id: number | null
    targetUserID: string | null
    reason: string | null
  }

  export type AdminActionMaxAggregateOutputType = {
    id: number | null
    targetUserID: string | null
    reason: string | null
  }

  export type AdminActionCountAggregateOutputType = {
    id: number
    targetUserID: number
    reason: number
    filter: number
    _all: number
  }


  export type AdminActionAvgAggregateInputType = {
    id?: true
  }

  export type AdminActionSumAggregateInputType = {
    id?: true
  }

  export type AdminActionMinAggregateInputType = {
    id?: true
    targetUserID?: true
    reason?: true
  }

  export type AdminActionMaxAggregateInputType = {
    id?: true
    targetUserID?: true
    reason?: true
  }

  export type AdminActionCountAggregateInputType = {
    id?: true
    targetUserID?: true
    reason?: true
    filter?: true
    _all?: true
  }

  export type AdminActionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AdminAction to aggregate.
     */
    where?: AdminActionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AdminActions to fetch.
     */
    orderBy?: AdminActionOrderByWithRelationInput | AdminActionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AdminActionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AdminActions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AdminActions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AdminActions
    **/
    _count?: true | AdminActionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AdminActionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AdminActionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AdminActionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AdminActionMaxAggregateInputType
  }

  export type GetAdminActionAggregateType<T extends AdminActionAggregateArgs> = {
        [P in keyof T & keyof AggregateAdminAction]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAdminAction[P]>
      : GetScalarType<T[P], AggregateAdminAction[P]>
  }




  export type AdminActionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AdminActionWhereInput
    orderBy?: AdminActionOrderByWithAggregationInput | AdminActionOrderByWithAggregationInput[]
    by: AdminActionScalarFieldEnum[] | AdminActionScalarFieldEnum
    having?: AdminActionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AdminActionCountAggregateInputType | true
    _avg?: AdminActionAvgAggregateInputType
    _sum?: AdminActionSumAggregateInputType
    _min?: AdminActionMinAggregateInputType
    _max?: AdminActionMaxAggregateInputType
  }

  export type AdminActionGroupByOutputType = {
    id: number
    targetUserID: string | null
    reason: string | null
    filter: JsonValue
    _count: AdminActionCountAggregateOutputType | null
    _avg: AdminActionAvgAggregateOutputType | null
    _sum: AdminActionSumAggregateOutputType | null
    _min: AdminActionMinAggregateOutputType | null
    _max: AdminActionMaxAggregateOutputType | null
  }

  type GetAdminActionGroupByPayload<T extends AdminActionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AdminActionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AdminActionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AdminActionGroupByOutputType[P]>
            : GetScalarType<T[P], AdminActionGroupByOutputType[P]>
        }
      >
    >


  export type AdminActionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    targetUserID?: boolean
    reason?: boolean
    filter?: boolean
    authLog?: boolean | AuthLogDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["adminAction"]>

  export type AdminActionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    targetUserID?: boolean
    reason?: boolean
    filter?: boolean
    authLog?: boolean | AuthLogDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["adminAction"]>

  export type AdminActionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    targetUserID?: boolean
    reason?: boolean
    filter?: boolean
    authLog?: boolean | AuthLogDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["adminAction"]>

  export type AdminActionSelectScalar = {
    id?: boolean
    targetUserID?: boolean
    reason?: boolean
    filter?: boolean
  }

  export type AdminActionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "targetUserID" | "reason" | "filter", ExtArgs["result"]["adminAction"]>
  export type AdminActionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    authLog?: boolean | AuthLogDefaultArgs<ExtArgs>
  }
  export type AdminActionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    authLog?: boolean | AuthLogDefaultArgs<ExtArgs>
  }
  export type AdminActionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    authLog?: boolean | AuthLogDefaultArgs<ExtArgs>
  }

  export type $AdminActionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AdminAction"
    objects: {
      authLog: Prisma.$AuthLogPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      targetUserID: string | null
      reason: string | null
      filter: Prisma.JsonValue
    }, ExtArgs["result"]["adminAction"]>
    composites: {}
  }

  type AdminActionGetPayload<S extends boolean | null | undefined | AdminActionDefaultArgs> = $Result.GetResult<Prisma.$AdminActionPayload, S>

  type AdminActionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AdminActionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AdminActionCountAggregateInputType | true
    }

  export interface AdminActionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AdminAction'], meta: { name: 'AdminAction' } }
    /**
     * Find zero or one AdminAction that matches the filter.
     * @param {AdminActionFindUniqueArgs} args - Arguments to find a AdminAction
     * @example
     * // Get one AdminAction
     * const adminAction = await prisma.adminAction.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AdminActionFindUniqueArgs>(args: SelectSubset<T, AdminActionFindUniqueArgs<ExtArgs>>): Prisma__AdminActionClient<$Result.GetResult<Prisma.$AdminActionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one AdminAction that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AdminActionFindUniqueOrThrowArgs} args - Arguments to find a AdminAction
     * @example
     * // Get one AdminAction
     * const adminAction = await prisma.adminAction.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AdminActionFindUniqueOrThrowArgs>(args: SelectSubset<T, AdminActionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AdminActionClient<$Result.GetResult<Prisma.$AdminActionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AdminAction that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminActionFindFirstArgs} args - Arguments to find a AdminAction
     * @example
     * // Get one AdminAction
     * const adminAction = await prisma.adminAction.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AdminActionFindFirstArgs>(args?: SelectSubset<T, AdminActionFindFirstArgs<ExtArgs>>): Prisma__AdminActionClient<$Result.GetResult<Prisma.$AdminActionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AdminAction that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminActionFindFirstOrThrowArgs} args - Arguments to find a AdminAction
     * @example
     * // Get one AdminAction
     * const adminAction = await prisma.adminAction.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AdminActionFindFirstOrThrowArgs>(args?: SelectSubset<T, AdminActionFindFirstOrThrowArgs<ExtArgs>>): Prisma__AdminActionClient<$Result.GetResult<Prisma.$AdminActionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more AdminActions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminActionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AdminActions
     * const adminActions = await prisma.adminAction.findMany()
     * 
     * // Get first 10 AdminActions
     * const adminActions = await prisma.adminAction.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const adminActionWithIdOnly = await prisma.adminAction.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AdminActionFindManyArgs>(args?: SelectSubset<T, AdminActionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AdminActionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a AdminAction.
     * @param {AdminActionCreateArgs} args - Arguments to create a AdminAction.
     * @example
     * // Create one AdminAction
     * const AdminAction = await prisma.adminAction.create({
     *   data: {
     *     // ... data to create a AdminAction
     *   }
     * })
     * 
     */
    create<T extends AdminActionCreateArgs>(args: SelectSubset<T, AdminActionCreateArgs<ExtArgs>>): Prisma__AdminActionClient<$Result.GetResult<Prisma.$AdminActionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many AdminActions.
     * @param {AdminActionCreateManyArgs} args - Arguments to create many AdminActions.
     * @example
     * // Create many AdminActions
     * const adminAction = await prisma.adminAction.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AdminActionCreateManyArgs>(args?: SelectSubset<T, AdminActionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many AdminActions and returns the data saved in the database.
     * @param {AdminActionCreateManyAndReturnArgs} args - Arguments to create many AdminActions.
     * @example
     * // Create many AdminActions
     * const adminAction = await prisma.adminAction.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many AdminActions and only return the `id`
     * const adminActionWithIdOnly = await prisma.adminAction.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AdminActionCreateManyAndReturnArgs>(args?: SelectSubset<T, AdminActionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AdminActionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a AdminAction.
     * @param {AdminActionDeleteArgs} args - Arguments to delete one AdminAction.
     * @example
     * // Delete one AdminAction
     * const AdminAction = await prisma.adminAction.delete({
     *   where: {
     *     // ... filter to delete one AdminAction
     *   }
     * })
     * 
     */
    delete<T extends AdminActionDeleteArgs>(args: SelectSubset<T, AdminActionDeleteArgs<ExtArgs>>): Prisma__AdminActionClient<$Result.GetResult<Prisma.$AdminActionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one AdminAction.
     * @param {AdminActionUpdateArgs} args - Arguments to update one AdminAction.
     * @example
     * // Update one AdminAction
     * const adminAction = await prisma.adminAction.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AdminActionUpdateArgs>(args: SelectSubset<T, AdminActionUpdateArgs<ExtArgs>>): Prisma__AdminActionClient<$Result.GetResult<Prisma.$AdminActionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more AdminActions.
     * @param {AdminActionDeleteManyArgs} args - Arguments to filter AdminActions to delete.
     * @example
     * // Delete a few AdminActions
     * const { count } = await prisma.adminAction.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AdminActionDeleteManyArgs>(args?: SelectSubset<T, AdminActionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AdminActions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminActionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AdminActions
     * const adminAction = await prisma.adminAction.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AdminActionUpdateManyArgs>(args: SelectSubset<T, AdminActionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AdminActions and returns the data updated in the database.
     * @param {AdminActionUpdateManyAndReturnArgs} args - Arguments to update many AdminActions.
     * @example
     * // Update many AdminActions
     * const adminAction = await prisma.adminAction.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more AdminActions and only return the `id`
     * const adminActionWithIdOnly = await prisma.adminAction.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AdminActionUpdateManyAndReturnArgs>(args: SelectSubset<T, AdminActionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AdminActionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one AdminAction.
     * @param {AdminActionUpsertArgs} args - Arguments to update or create a AdminAction.
     * @example
     * // Update or create a AdminAction
     * const adminAction = await prisma.adminAction.upsert({
     *   create: {
     *     // ... data to create a AdminAction
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AdminAction we want to update
     *   }
     * })
     */
    upsert<T extends AdminActionUpsertArgs>(args: SelectSubset<T, AdminActionUpsertArgs<ExtArgs>>): Prisma__AdminActionClient<$Result.GetResult<Prisma.$AdminActionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of AdminActions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminActionCountArgs} args - Arguments to filter AdminActions to count.
     * @example
     * // Count the number of AdminActions
     * const count = await prisma.adminAction.count({
     *   where: {
     *     // ... the filter for the AdminActions we want to count
     *   }
     * })
    **/
    count<T extends AdminActionCountArgs>(
      args?: Subset<T, AdminActionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AdminActionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AdminAction.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminActionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AdminActionAggregateArgs>(args: Subset<T, AdminActionAggregateArgs>): Prisma.PrismaPromise<GetAdminActionAggregateType<T>>

    /**
     * Group by AdminAction.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminActionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AdminActionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AdminActionGroupByArgs['orderBy'] }
        : { orderBy?: AdminActionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AdminActionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAdminActionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AdminAction model
   */
  readonly fields: AdminActionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AdminAction.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AdminActionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    authLog<T extends AuthLogDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AuthLogDefaultArgs<ExtArgs>>): Prisma__AuthLogClient<$Result.GetResult<Prisma.$AuthLogPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the AdminAction model
   */
  interface AdminActionFieldRefs {
    readonly id: FieldRef<"AdminAction", 'Int'>
    readonly targetUserID: FieldRef<"AdminAction", 'String'>
    readonly reason: FieldRef<"AdminAction", 'String'>
    readonly filter: FieldRef<"AdminAction", 'Json'>
  }
    

  // Custom InputTypes
  /**
   * AdminAction findUnique
   */
  export type AdminActionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminAction
     */
    select?: AdminActionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AdminAction
     */
    omit?: AdminActionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminActionInclude<ExtArgs> | null
    /**
     * Filter, which AdminAction to fetch.
     */
    where: AdminActionWhereUniqueInput
  }

  /**
   * AdminAction findUniqueOrThrow
   */
  export type AdminActionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminAction
     */
    select?: AdminActionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AdminAction
     */
    omit?: AdminActionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminActionInclude<ExtArgs> | null
    /**
     * Filter, which AdminAction to fetch.
     */
    where: AdminActionWhereUniqueInput
  }

  /**
   * AdminAction findFirst
   */
  export type AdminActionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminAction
     */
    select?: AdminActionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AdminAction
     */
    omit?: AdminActionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminActionInclude<ExtArgs> | null
    /**
     * Filter, which AdminAction to fetch.
     */
    where?: AdminActionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AdminActions to fetch.
     */
    orderBy?: AdminActionOrderByWithRelationInput | AdminActionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AdminActions.
     */
    cursor?: AdminActionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AdminActions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AdminActions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AdminActions.
     */
    distinct?: AdminActionScalarFieldEnum | AdminActionScalarFieldEnum[]
  }

  /**
   * AdminAction findFirstOrThrow
   */
  export type AdminActionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminAction
     */
    select?: AdminActionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AdminAction
     */
    omit?: AdminActionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminActionInclude<ExtArgs> | null
    /**
     * Filter, which AdminAction to fetch.
     */
    where?: AdminActionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AdminActions to fetch.
     */
    orderBy?: AdminActionOrderByWithRelationInput | AdminActionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AdminActions.
     */
    cursor?: AdminActionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AdminActions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AdminActions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AdminActions.
     */
    distinct?: AdminActionScalarFieldEnum | AdminActionScalarFieldEnum[]
  }

  /**
   * AdminAction findMany
   */
  export type AdminActionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminAction
     */
    select?: AdminActionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AdminAction
     */
    omit?: AdminActionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminActionInclude<ExtArgs> | null
    /**
     * Filter, which AdminActions to fetch.
     */
    where?: AdminActionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AdminActions to fetch.
     */
    orderBy?: AdminActionOrderByWithRelationInput | AdminActionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AdminActions.
     */
    cursor?: AdminActionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AdminActions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AdminActions.
     */
    skip?: number
    distinct?: AdminActionScalarFieldEnum | AdminActionScalarFieldEnum[]
  }

  /**
   * AdminAction create
   */
  export type AdminActionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminAction
     */
    select?: AdminActionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AdminAction
     */
    omit?: AdminActionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminActionInclude<ExtArgs> | null
    /**
     * The data needed to create a AdminAction.
     */
    data: XOR<AdminActionCreateInput, AdminActionUncheckedCreateInput>
  }

  /**
   * AdminAction createMany
   */
  export type AdminActionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AdminActions.
     */
    data: AdminActionCreateManyInput | AdminActionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * AdminAction createManyAndReturn
   */
  export type AdminActionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminAction
     */
    select?: AdminActionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AdminAction
     */
    omit?: AdminActionOmit<ExtArgs> | null
    /**
     * The data used to create many AdminActions.
     */
    data: AdminActionCreateManyInput | AdminActionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminActionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * AdminAction update
   */
  export type AdminActionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminAction
     */
    select?: AdminActionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AdminAction
     */
    omit?: AdminActionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminActionInclude<ExtArgs> | null
    /**
     * The data needed to update a AdminAction.
     */
    data: XOR<AdminActionUpdateInput, AdminActionUncheckedUpdateInput>
    /**
     * Choose, which AdminAction to update.
     */
    where: AdminActionWhereUniqueInput
  }

  /**
   * AdminAction updateMany
   */
  export type AdminActionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AdminActions.
     */
    data: XOR<AdminActionUpdateManyMutationInput, AdminActionUncheckedUpdateManyInput>
    /**
     * Filter which AdminActions to update
     */
    where?: AdminActionWhereInput
    /**
     * Limit how many AdminActions to update.
     */
    limit?: number
  }

  /**
   * AdminAction updateManyAndReturn
   */
  export type AdminActionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminAction
     */
    select?: AdminActionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AdminAction
     */
    omit?: AdminActionOmit<ExtArgs> | null
    /**
     * The data used to update AdminActions.
     */
    data: XOR<AdminActionUpdateManyMutationInput, AdminActionUncheckedUpdateManyInput>
    /**
     * Filter which AdminActions to update
     */
    where?: AdminActionWhereInput
    /**
     * Limit how many AdminActions to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminActionIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * AdminAction upsert
   */
  export type AdminActionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminAction
     */
    select?: AdminActionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AdminAction
     */
    omit?: AdminActionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminActionInclude<ExtArgs> | null
    /**
     * The filter to search for the AdminAction to update in case it exists.
     */
    where: AdminActionWhereUniqueInput
    /**
     * In case the AdminAction found by the `where` argument doesn't exist, create a new AdminAction with this data.
     */
    create: XOR<AdminActionCreateInput, AdminActionUncheckedCreateInput>
    /**
     * In case the AdminAction was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AdminActionUpdateInput, AdminActionUncheckedUpdateInput>
  }

  /**
   * AdminAction delete
   */
  export type AdminActionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminAction
     */
    select?: AdminActionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AdminAction
     */
    omit?: AdminActionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminActionInclude<ExtArgs> | null
    /**
     * Filter which AdminAction to delete.
     */
    where: AdminActionWhereUniqueInput
  }

  /**
   * AdminAction deleteMany
   */
  export type AdminActionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AdminActions to delete
     */
    where?: AdminActionWhereInput
    /**
     * Limit how many AdminActions to delete.
     */
    limit?: number
  }

  /**
   * AdminAction without action
   */
  export type AdminActionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminAction
     */
    select?: AdminActionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AdminAction
     */
    omit?: AdminActionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminActionInclude<ExtArgs> | null
  }


  /**
   * Model Counter
   */

  export type AggregateCounter = {
    _count: CounterCountAggregateOutputType | null
    _avg: CounterAvgAggregateOutputType | null
    _sum: CounterSumAggregateOutputType | null
    _min: CounterMinAggregateOutputType | null
    _max: CounterMaxAggregateOutputType | null
  }

  export type CounterAvgAggregateOutputType = {
    seq: number | null
  }

  export type CounterSumAggregateOutputType = {
    seq: number | null
  }

  export type CounterMinAggregateOutputType = {
    id: string | null
    seq: number | null
  }

  export type CounterMaxAggregateOutputType = {
    id: string | null
    seq: number | null
  }

  export type CounterCountAggregateOutputType = {
    id: number
    seq: number
    _all: number
  }


  export type CounterAvgAggregateInputType = {
    seq?: true
  }

  export type CounterSumAggregateInputType = {
    seq?: true
  }

  export type CounterMinAggregateInputType = {
    id?: true
    seq?: true
  }

  export type CounterMaxAggregateInputType = {
    id?: true
    seq?: true
  }

  export type CounterCountAggregateInputType = {
    id?: true
    seq?: true
    _all?: true
  }

  export type CounterAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Counter to aggregate.
     */
    where?: CounterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Counters to fetch.
     */
    orderBy?: CounterOrderByWithRelationInput | CounterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CounterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Counters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Counters.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Counters
    **/
    _count?: true | CounterCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CounterAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CounterSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CounterMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CounterMaxAggregateInputType
  }

  export type GetCounterAggregateType<T extends CounterAggregateArgs> = {
        [P in keyof T & keyof AggregateCounter]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCounter[P]>
      : GetScalarType<T[P], AggregateCounter[P]>
  }




  export type CounterGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CounterWhereInput
    orderBy?: CounterOrderByWithAggregationInput | CounterOrderByWithAggregationInput[]
    by: CounterScalarFieldEnum[] | CounterScalarFieldEnum
    having?: CounterScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CounterCountAggregateInputType | true
    _avg?: CounterAvgAggregateInputType
    _sum?: CounterSumAggregateInputType
    _min?: CounterMinAggregateInputType
    _max?: CounterMaxAggregateInputType
  }

  export type CounterGroupByOutputType = {
    id: string
    seq: number
    _count: CounterCountAggregateOutputType | null
    _avg: CounterAvgAggregateOutputType | null
    _sum: CounterSumAggregateOutputType | null
    _min: CounterMinAggregateOutputType | null
    _max: CounterMaxAggregateOutputType | null
  }

  type GetCounterGroupByPayload<T extends CounterGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CounterGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CounterGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CounterGroupByOutputType[P]>
            : GetScalarType<T[P], CounterGroupByOutputType[P]>
        }
      >
    >


  export type CounterSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    seq?: boolean
  }, ExtArgs["result"]["counter"]>

  export type CounterSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    seq?: boolean
  }, ExtArgs["result"]["counter"]>

  export type CounterSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    seq?: boolean
  }, ExtArgs["result"]["counter"]>

  export type CounterSelectScalar = {
    id?: boolean
    seq?: boolean
  }

  export type CounterOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "seq", ExtArgs["result"]["counter"]>

  export type $CounterPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Counter"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      seq: number
    }, ExtArgs["result"]["counter"]>
    composites: {}
  }

  type CounterGetPayload<S extends boolean | null | undefined | CounterDefaultArgs> = $Result.GetResult<Prisma.$CounterPayload, S>

  type CounterCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CounterFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CounterCountAggregateInputType | true
    }

  export interface CounterDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Counter'], meta: { name: 'Counter' } }
    /**
     * Find zero or one Counter that matches the filter.
     * @param {CounterFindUniqueArgs} args - Arguments to find a Counter
     * @example
     * // Get one Counter
     * const counter = await prisma.counter.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CounterFindUniqueArgs>(args: SelectSubset<T, CounterFindUniqueArgs<ExtArgs>>): Prisma__CounterClient<$Result.GetResult<Prisma.$CounterPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Counter that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CounterFindUniqueOrThrowArgs} args - Arguments to find a Counter
     * @example
     * // Get one Counter
     * const counter = await prisma.counter.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CounterFindUniqueOrThrowArgs>(args: SelectSubset<T, CounterFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CounterClient<$Result.GetResult<Prisma.$CounterPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Counter that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CounterFindFirstArgs} args - Arguments to find a Counter
     * @example
     * // Get one Counter
     * const counter = await prisma.counter.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CounterFindFirstArgs>(args?: SelectSubset<T, CounterFindFirstArgs<ExtArgs>>): Prisma__CounterClient<$Result.GetResult<Prisma.$CounterPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Counter that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CounterFindFirstOrThrowArgs} args - Arguments to find a Counter
     * @example
     * // Get one Counter
     * const counter = await prisma.counter.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CounterFindFirstOrThrowArgs>(args?: SelectSubset<T, CounterFindFirstOrThrowArgs<ExtArgs>>): Prisma__CounterClient<$Result.GetResult<Prisma.$CounterPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Counters that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CounterFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Counters
     * const counters = await prisma.counter.findMany()
     * 
     * // Get first 10 Counters
     * const counters = await prisma.counter.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const counterWithIdOnly = await prisma.counter.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CounterFindManyArgs>(args?: SelectSubset<T, CounterFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CounterPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Counter.
     * @param {CounterCreateArgs} args - Arguments to create a Counter.
     * @example
     * // Create one Counter
     * const Counter = await prisma.counter.create({
     *   data: {
     *     // ... data to create a Counter
     *   }
     * })
     * 
     */
    create<T extends CounterCreateArgs>(args: SelectSubset<T, CounterCreateArgs<ExtArgs>>): Prisma__CounterClient<$Result.GetResult<Prisma.$CounterPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Counters.
     * @param {CounterCreateManyArgs} args - Arguments to create many Counters.
     * @example
     * // Create many Counters
     * const counter = await prisma.counter.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CounterCreateManyArgs>(args?: SelectSubset<T, CounterCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Counters and returns the data saved in the database.
     * @param {CounterCreateManyAndReturnArgs} args - Arguments to create many Counters.
     * @example
     * // Create many Counters
     * const counter = await prisma.counter.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Counters and only return the `id`
     * const counterWithIdOnly = await prisma.counter.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CounterCreateManyAndReturnArgs>(args?: SelectSubset<T, CounterCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CounterPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Counter.
     * @param {CounterDeleteArgs} args - Arguments to delete one Counter.
     * @example
     * // Delete one Counter
     * const Counter = await prisma.counter.delete({
     *   where: {
     *     // ... filter to delete one Counter
     *   }
     * })
     * 
     */
    delete<T extends CounterDeleteArgs>(args: SelectSubset<T, CounterDeleteArgs<ExtArgs>>): Prisma__CounterClient<$Result.GetResult<Prisma.$CounterPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Counter.
     * @param {CounterUpdateArgs} args - Arguments to update one Counter.
     * @example
     * // Update one Counter
     * const counter = await prisma.counter.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CounterUpdateArgs>(args: SelectSubset<T, CounterUpdateArgs<ExtArgs>>): Prisma__CounterClient<$Result.GetResult<Prisma.$CounterPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Counters.
     * @param {CounterDeleteManyArgs} args - Arguments to filter Counters to delete.
     * @example
     * // Delete a few Counters
     * const { count } = await prisma.counter.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CounterDeleteManyArgs>(args?: SelectSubset<T, CounterDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Counters.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CounterUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Counters
     * const counter = await prisma.counter.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CounterUpdateManyArgs>(args: SelectSubset<T, CounterUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Counters and returns the data updated in the database.
     * @param {CounterUpdateManyAndReturnArgs} args - Arguments to update many Counters.
     * @example
     * // Update many Counters
     * const counter = await prisma.counter.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Counters and only return the `id`
     * const counterWithIdOnly = await prisma.counter.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CounterUpdateManyAndReturnArgs>(args: SelectSubset<T, CounterUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CounterPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Counter.
     * @param {CounterUpsertArgs} args - Arguments to update or create a Counter.
     * @example
     * // Update or create a Counter
     * const counter = await prisma.counter.upsert({
     *   create: {
     *     // ... data to create a Counter
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Counter we want to update
     *   }
     * })
     */
    upsert<T extends CounterUpsertArgs>(args: SelectSubset<T, CounterUpsertArgs<ExtArgs>>): Prisma__CounterClient<$Result.GetResult<Prisma.$CounterPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Counters.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CounterCountArgs} args - Arguments to filter Counters to count.
     * @example
     * // Count the number of Counters
     * const count = await prisma.counter.count({
     *   where: {
     *     // ... the filter for the Counters we want to count
     *   }
     * })
    **/
    count<T extends CounterCountArgs>(
      args?: Subset<T, CounterCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CounterCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Counter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CounterAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CounterAggregateArgs>(args: Subset<T, CounterAggregateArgs>): Prisma.PrismaPromise<GetCounterAggregateType<T>>

    /**
     * Group by Counter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CounterGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CounterGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CounterGroupByArgs['orderBy'] }
        : { orderBy?: CounterGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CounterGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCounterGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Counter model
   */
  readonly fields: CounterFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Counter.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CounterClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Counter model
   */
  interface CounterFieldRefs {
    readonly id: FieldRef<"Counter", 'String'>
    readonly seq: FieldRef<"Counter", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Counter findUnique
   */
  export type CounterFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Counter
     */
    select?: CounterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Counter
     */
    omit?: CounterOmit<ExtArgs> | null
    /**
     * Filter, which Counter to fetch.
     */
    where: CounterWhereUniqueInput
  }

  /**
   * Counter findUniqueOrThrow
   */
  export type CounterFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Counter
     */
    select?: CounterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Counter
     */
    omit?: CounterOmit<ExtArgs> | null
    /**
     * Filter, which Counter to fetch.
     */
    where: CounterWhereUniqueInput
  }

  /**
   * Counter findFirst
   */
  export type CounterFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Counter
     */
    select?: CounterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Counter
     */
    omit?: CounterOmit<ExtArgs> | null
    /**
     * Filter, which Counter to fetch.
     */
    where?: CounterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Counters to fetch.
     */
    orderBy?: CounterOrderByWithRelationInput | CounterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Counters.
     */
    cursor?: CounterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Counters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Counters.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Counters.
     */
    distinct?: CounterScalarFieldEnum | CounterScalarFieldEnum[]
  }

  /**
   * Counter findFirstOrThrow
   */
  export type CounterFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Counter
     */
    select?: CounterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Counter
     */
    omit?: CounterOmit<ExtArgs> | null
    /**
     * Filter, which Counter to fetch.
     */
    where?: CounterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Counters to fetch.
     */
    orderBy?: CounterOrderByWithRelationInput | CounterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Counters.
     */
    cursor?: CounterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Counters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Counters.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Counters.
     */
    distinct?: CounterScalarFieldEnum | CounterScalarFieldEnum[]
  }

  /**
   * Counter findMany
   */
  export type CounterFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Counter
     */
    select?: CounterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Counter
     */
    omit?: CounterOmit<ExtArgs> | null
    /**
     * Filter, which Counters to fetch.
     */
    where?: CounterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Counters to fetch.
     */
    orderBy?: CounterOrderByWithRelationInput | CounterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Counters.
     */
    cursor?: CounterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Counters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Counters.
     */
    skip?: number
    distinct?: CounterScalarFieldEnum | CounterScalarFieldEnum[]
  }

  /**
   * Counter create
   */
  export type CounterCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Counter
     */
    select?: CounterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Counter
     */
    omit?: CounterOmit<ExtArgs> | null
    /**
     * The data needed to create a Counter.
     */
    data: XOR<CounterCreateInput, CounterUncheckedCreateInput>
  }

  /**
   * Counter createMany
   */
  export type CounterCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Counters.
     */
    data: CounterCreateManyInput | CounterCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Counter createManyAndReturn
   */
  export type CounterCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Counter
     */
    select?: CounterSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Counter
     */
    omit?: CounterOmit<ExtArgs> | null
    /**
     * The data used to create many Counters.
     */
    data: CounterCreateManyInput | CounterCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Counter update
   */
  export type CounterUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Counter
     */
    select?: CounterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Counter
     */
    omit?: CounterOmit<ExtArgs> | null
    /**
     * The data needed to update a Counter.
     */
    data: XOR<CounterUpdateInput, CounterUncheckedUpdateInput>
    /**
     * Choose, which Counter to update.
     */
    where: CounterWhereUniqueInput
  }

  /**
   * Counter updateMany
   */
  export type CounterUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Counters.
     */
    data: XOR<CounterUpdateManyMutationInput, CounterUncheckedUpdateManyInput>
    /**
     * Filter which Counters to update
     */
    where?: CounterWhereInput
    /**
     * Limit how many Counters to update.
     */
    limit?: number
  }

  /**
   * Counter updateManyAndReturn
   */
  export type CounterUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Counter
     */
    select?: CounterSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Counter
     */
    omit?: CounterOmit<ExtArgs> | null
    /**
     * The data used to update Counters.
     */
    data: XOR<CounterUpdateManyMutationInput, CounterUncheckedUpdateManyInput>
    /**
     * Filter which Counters to update
     */
    where?: CounterWhereInput
    /**
     * Limit how many Counters to update.
     */
    limit?: number
  }

  /**
   * Counter upsert
   */
  export type CounterUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Counter
     */
    select?: CounterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Counter
     */
    omit?: CounterOmit<ExtArgs> | null
    /**
     * The filter to search for the Counter to update in case it exists.
     */
    where: CounterWhereUniqueInput
    /**
     * In case the Counter found by the `where` argument doesn't exist, create a new Counter with this data.
     */
    create: XOR<CounterCreateInput, CounterUncheckedCreateInput>
    /**
     * In case the Counter was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CounterUpdateInput, CounterUncheckedUpdateInput>
  }

  /**
   * Counter delete
   */
  export type CounterDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Counter
     */
    select?: CounterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Counter
     */
    omit?: CounterOmit<ExtArgs> | null
    /**
     * Filter which Counter to delete.
     */
    where: CounterWhereUniqueInput
  }

  /**
   * Counter deleteMany
   */
  export type CounterDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Counters to delete
     */
    where?: CounterWhereInput
    /**
     * Limit how many Counters to delete.
     */
    limit?: number
  }

  /**
   * Counter without action
   */
  export type CounterDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Counter
     */
    select?: CounterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Counter
     */
    omit?: CounterOmit<ExtArgs> | null
  }


  /**
   * Model RateLimit
   */

  export type AggregateRateLimit = {
    _count: RateLimitCountAggregateOutputType | null
    _avg: RateLimitAvgAggregateOutputType | null
    _sum: RateLimitSumAggregateOutputType | null
    _min: RateLimitMinAggregateOutputType | null
    _max: RateLimitMaxAggregateOutputType | null
  }

  export type RateLimitAvgAggregateOutputType = {
    requestCount: number | null
  }

  export type RateLimitSumAggregateOutputType = {
    requestCount: number | null
  }

  export type RateLimitMinAggregateOutputType = {
    deviceID: string | null
    routeKey: string | null
    requestCount: number | null
    lastRequestAt: Date | null
  }

  export type RateLimitMaxAggregateOutputType = {
    deviceID: string | null
    routeKey: string | null
    requestCount: number | null
    lastRequestAt: Date | null
  }

  export type RateLimitCountAggregateOutputType = {
    deviceID: number
    routeKey: number
    requestCount: number
    lastRequestAt: number
    _all: number
  }


  export type RateLimitAvgAggregateInputType = {
    requestCount?: true
  }

  export type RateLimitSumAggregateInputType = {
    requestCount?: true
  }

  export type RateLimitMinAggregateInputType = {
    deviceID?: true
    routeKey?: true
    requestCount?: true
    lastRequestAt?: true
  }

  export type RateLimitMaxAggregateInputType = {
    deviceID?: true
    routeKey?: true
    requestCount?: true
    lastRequestAt?: true
  }

  export type RateLimitCountAggregateInputType = {
    deviceID?: true
    routeKey?: true
    requestCount?: true
    lastRequestAt?: true
    _all?: true
  }

  export type RateLimitAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RateLimit to aggregate.
     */
    where?: RateLimitWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RateLimits to fetch.
     */
    orderBy?: RateLimitOrderByWithRelationInput | RateLimitOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RateLimitWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RateLimits from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RateLimits.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned RateLimits
    **/
    _count?: true | RateLimitCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RateLimitAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RateLimitSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RateLimitMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RateLimitMaxAggregateInputType
  }

  export type GetRateLimitAggregateType<T extends RateLimitAggregateArgs> = {
        [P in keyof T & keyof AggregateRateLimit]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRateLimit[P]>
      : GetScalarType<T[P], AggregateRateLimit[P]>
  }




  export type RateLimitGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RateLimitWhereInput
    orderBy?: RateLimitOrderByWithAggregationInput | RateLimitOrderByWithAggregationInput[]
    by: RateLimitScalarFieldEnum[] | RateLimitScalarFieldEnum
    having?: RateLimitScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RateLimitCountAggregateInputType | true
    _avg?: RateLimitAvgAggregateInputType
    _sum?: RateLimitSumAggregateInputType
    _min?: RateLimitMinAggregateInputType
    _max?: RateLimitMaxAggregateInputType
  }

  export type RateLimitGroupByOutputType = {
    deviceID: string
    routeKey: string
    requestCount: number
    lastRequestAt: Date
    _count: RateLimitCountAggregateOutputType | null
    _avg: RateLimitAvgAggregateOutputType | null
    _sum: RateLimitSumAggregateOutputType | null
    _min: RateLimitMinAggregateOutputType | null
    _max: RateLimitMaxAggregateOutputType | null
  }

  type GetRateLimitGroupByPayload<T extends RateLimitGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RateLimitGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RateLimitGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RateLimitGroupByOutputType[P]>
            : GetScalarType<T[P], RateLimitGroupByOutputType[P]>
        }
      >
    >


  export type RateLimitSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    deviceID?: boolean
    routeKey?: boolean
    requestCount?: boolean
    lastRequestAt?: boolean
  }, ExtArgs["result"]["rateLimit"]>

  export type RateLimitSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    deviceID?: boolean
    routeKey?: boolean
    requestCount?: boolean
    lastRequestAt?: boolean
  }, ExtArgs["result"]["rateLimit"]>

  export type RateLimitSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    deviceID?: boolean
    routeKey?: boolean
    requestCount?: boolean
    lastRequestAt?: boolean
  }, ExtArgs["result"]["rateLimit"]>

  export type RateLimitSelectScalar = {
    deviceID?: boolean
    routeKey?: boolean
    requestCount?: boolean
    lastRequestAt?: boolean
  }

  export type RateLimitOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"deviceID" | "routeKey" | "requestCount" | "lastRequestAt", ExtArgs["result"]["rateLimit"]>

  export type $RateLimitPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "RateLimit"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      deviceID: string
      routeKey: string
      requestCount: number
      lastRequestAt: Date
    }, ExtArgs["result"]["rateLimit"]>
    composites: {}
  }

  type RateLimitGetPayload<S extends boolean | null | undefined | RateLimitDefaultArgs> = $Result.GetResult<Prisma.$RateLimitPayload, S>

  type RateLimitCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<RateLimitFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: RateLimitCountAggregateInputType | true
    }

  export interface RateLimitDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['RateLimit'], meta: { name: 'RateLimit' } }
    /**
     * Find zero or one RateLimit that matches the filter.
     * @param {RateLimitFindUniqueArgs} args - Arguments to find a RateLimit
     * @example
     * // Get one RateLimit
     * const rateLimit = await prisma.rateLimit.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RateLimitFindUniqueArgs>(args: SelectSubset<T, RateLimitFindUniqueArgs<ExtArgs>>): Prisma__RateLimitClient<$Result.GetResult<Prisma.$RateLimitPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one RateLimit that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {RateLimitFindUniqueOrThrowArgs} args - Arguments to find a RateLimit
     * @example
     * // Get one RateLimit
     * const rateLimit = await prisma.rateLimit.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RateLimitFindUniqueOrThrowArgs>(args: SelectSubset<T, RateLimitFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RateLimitClient<$Result.GetResult<Prisma.$RateLimitPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first RateLimit that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RateLimitFindFirstArgs} args - Arguments to find a RateLimit
     * @example
     * // Get one RateLimit
     * const rateLimit = await prisma.rateLimit.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RateLimitFindFirstArgs>(args?: SelectSubset<T, RateLimitFindFirstArgs<ExtArgs>>): Prisma__RateLimitClient<$Result.GetResult<Prisma.$RateLimitPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first RateLimit that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RateLimitFindFirstOrThrowArgs} args - Arguments to find a RateLimit
     * @example
     * // Get one RateLimit
     * const rateLimit = await prisma.rateLimit.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RateLimitFindFirstOrThrowArgs>(args?: SelectSubset<T, RateLimitFindFirstOrThrowArgs<ExtArgs>>): Prisma__RateLimitClient<$Result.GetResult<Prisma.$RateLimitPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more RateLimits that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RateLimitFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all RateLimits
     * const rateLimits = await prisma.rateLimit.findMany()
     * 
     * // Get first 10 RateLimits
     * const rateLimits = await prisma.rateLimit.findMany({ take: 10 })
     * 
     * // Only select the `deviceID`
     * const rateLimitWithDeviceIDOnly = await prisma.rateLimit.findMany({ select: { deviceID: true } })
     * 
     */
    findMany<T extends RateLimitFindManyArgs>(args?: SelectSubset<T, RateLimitFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RateLimitPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a RateLimit.
     * @param {RateLimitCreateArgs} args - Arguments to create a RateLimit.
     * @example
     * // Create one RateLimit
     * const RateLimit = await prisma.rateLimit.create({
     *   data: {
     *     // ... data to create a RateLimit
     *   }
     * })
     * 
     */
    create<T extends RateLimitCreateArgs>(args: SelectSubset<T, RateLimitCreateArgs<ExtArgs>>): Prisma__RateLimitClient<$Result.GetResult<Prisma.$RateLimitPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many RateLimits.
     * @param {RateLimitCreateManyArgs} args - Arguments to create many RateLimits.
     * @example
     * // Create many RateLimits
     * const rateLimit = await prisma.rateLimit.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RateLimitCreateManyArgs>(args?: SelectSubset<T, RateLimitCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many RateLimits and returns the data saved in the database.
     * @param {RateLimitCreateManyAndReturnArgs} args - Arguments to create many RateLimits.
     * @example
     * // Create many RateLimits
     * const rateLimit = await prisma.rateLimit.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many RateLimits and only return the `deviceID`
     * const rateLimitWithDeviceIDOnly = await prisma.rateLimit.createManyAndReturn({
     *   select: { deviceID: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends RateLimitCreateManyAndReturnArgs>(args?: SelectSubset<T, RateLimitCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RateLimitPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a RateLimit.
     * @param {RateLimitDeleteArgs} args - Arguments to delete one RateLimit.
     * @example
     * // Delete one RateLimit
     * const RateLimit = await prisma.rateLimit.delete({
     *   where: {
     *     // ... filter to delete one RateLimit
     *   }
     * })
     * 
     */
    delete<T extends RateLimitDeleteArgs>(args: SelectSubset<T, RateLimitDeleteArgs<ExtArgs>>): Prisma__RateLimitClient<$Result.GetResult<Prisma.$RateLimitPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one RateLimit.
     * @param {RateLimitUpdateArgs} args - Arguments to update one RateLimit.
     * @example
     * // Update one RateLimit
     * const rateLimit = await prisma.rateLimit.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RateLimitUpdateArgs>(args: SelectSubset<T, RateLimitUpdateArgs<ExtArgs>>): Prisma__RateLimitClient<$Result.GetResult<Prisma.$RateLimitPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more RateLimits.
     * @param {RateLimitDeleteManyArgs} args - Arguments to filter RateLimits to delete.
     * @example
     * // Delete a few RateLimits
     * const { count } = await prisma.rateLimit.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RateLimitDeleteManyArgs>(args?: SelectSubset<T, RateLimitDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more RateLimits.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RateLimitUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many RateLimits
     * const rateLimit = await prisma.rateLimit.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RateLimitUpdateManyArgs>(args: SelectSubset<T, RateLimitUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more RateLimits and returns the data updated in the database.
     * @param {RateLimitUpdateManyAndReturnArgs} args - Arguments to update many RateLimits.
     * @example
     * // Update many RateLimits
     * const rateLimit = await prisma.rateLimit.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more RateLimits and only return the `deviceID`
     * const rateLimitWithDeviceIDOnly = await prisma.rateLimit.updateManyAndReturn({
     *   select: { deviceID: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends RateLimitUpdateManyAndReturnArgs>(args: SelectSubset<T, RateLimitUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RateLimitPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one RateLimit.
     * @param {RateLimitUpsertArgs} args - Arguments to update or create a RateLimit.
     * @example
     * // Update or create a RateLimit
     * const rateLimit = await prisma.rateLimit.upsert({
     *   create: {
     *     // ... data to create a RateLimit
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the RateLimit we want to update
     *   }
     * })
     */
    upsert<T extends RateLimitUpsertArgs>(args: SelectSubset<T, RateLimitUpsertArgs<ExtArgs>>): Prisma__RateLimitClient<$Result.GetResult<Prisma.$RateLimitPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of RateLimits.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RateLimitCountArgs} args - Arguments to filter RateLimits to count.
     * @example
     * // Count the number of RateLimits
     * const count = await prisma.rateLimit.count({
     *   where: {
     *     // ... the filter for the RateLimits we want to count
     *   }
     * })
    **/
    count<T extends RateLimitCountArgs>(
      args?: Subset<T, RateLimitCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RateLimitCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a RateLimit.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RateLimitAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RateLimitAggregateArgs>(args: Subset<T, RateLimitAggregateArgs>): Prisma.PrismaPromise<GetRateLimitAggregateType<T>>

    /**
     * Group by RateLimit.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RateLimitGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RateLimitGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RateLimitGroupByArgs['orderBy'] }
        : { orderBy?: RateLimitGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RateLimitGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRateLimitGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the RateLimit model
   */
  readonly fields: RateLimitFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for RateLimit.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RateLimitClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the RateLimit model
   */
  interface RateLimitFieldRefs {
    readonly deviceID: FieldRef<"RateLimit", 'String'>
    readonly routeKey: FieldRef<"RateLimit", 'String'>
    readonly requestCount: FieldRef<"RateLimit", 'Int'>
    readonly lastRequestAt: FieldRef<"RateLimit", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * RateLimit findUnique
   */
  export type RateLimitFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RateLimit
     */
    select?: RateLimitSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RateLimit
     */
    omit?: RateLimitOmit<ExtArgs> | null
    /**
     * Filter, which RateLimit to fetch.
     */
    where: RateLimitWhereUniqueInput
  }

  /**
   * RateLimit findUniqueOrThrow
   */
  export type RateLimitFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RateLimit
     */
    select?: RateLimitSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RateLimit
     */
    omit?: RateLimitOmit<ExtArgs> | null
    /**
     * Filter, which RateLimit to fetch.
     */
    where: RateLimitWhereUniqueInput
  }

  /**
   * RateLimit findFirst
   */
  export type RateLimitFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RateLimit
     */
    select?: RateLimitSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RateLimit
     */
    omit?: RateLimitOmit<ExtArgs> | null
    /**
     * Filter, which RateLimit to fetch.
     */
    where?: RateLimitWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RateLimits to fetch.
     */
    orderBy?: RateLimitOrderByWithRelationInput | RateLimitOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RateLimits.
     */
    cursor?: RateLimitWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RateLimits from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RateLimits.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RateLimits.
     */
    distinct?: RateLimitScalarFieldEnum | RateLimitScalarFieldEnum[]
  }

  /**
   * RateLimit findFirstOrThrow
   */
  export type RateLimitFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RateLimit
     */
    select?: RateLimitSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RateLimit
     */
    omit?: RateLimitOmit<ExtArgs> | null
    /**
     * Filter, which RateLimit to fetch.
     */
    where?: RateLimitWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RateLimits to fetch.
     */
    orderBy?: RateLimitOrderByWithRelationInput | RateLimitOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RateLimits.
     */
    cursor?: RateLimitWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RateLimits from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RateLimits.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RateLimits.
     */
    distinct?: RateLimitScalarFieldEnum | RateLimitScalarFieldEnum[]
  }

  /**
   * RateLimit findMany
   */
  export type RateLimitFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RateLimit
     */
    select?: RateLimitSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RateLimit
     */
    omit?: RateLimitOmit<ExtArgs> | null
    /**
     * Filter, which RateLimits to fetch.
     */
    where?: RateLimitWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RateLimits to fetch.
     */
    orderBy?: RateLimitOrderByWithRelationInput | RateLimitOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing RateLimits.
     */
    cursor?: RateLimitWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RateLimits from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RateLimits.
     */
    skip?: number
    distinct?: RateLimitScalarFieldEnum | RateLimitScalarFieldEnum[]
  }

  /**
   * RateLimit create
   */
  export type RateLimitCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RateLimit
     */
    select?: RateLimitSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RateLimit
     */
    omit?: RateLimitOmit<ExtArgs> | null
    /**
     * The data needed to create a RateLimit.
     */
    data: XOR<RateLimitCreateInput, RateLimitUncheckedCreateInput>
  }

  /**
   * RateLimit createMany
   */
  export type RateLimitCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many RateLimits.
     */
    data: RateLimitCreateManyInput | RateLimitCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * RateLimit createManyAndReturn
   */
  export type RateLimitCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RateLimit
     */
    select?: RateLimitSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the RateLimit
     */
    omit?: RateLimitOmit<ExtArgs> | null
    /**
     * The data used to create many RateLimits.
     */
    data: RateLimitCreateManyInput | RateLimitCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * RateLimit update
   */
  export type RateLimitUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RateLimit
     */
    select?: RateLimitSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RateLimit
     */
    omit?: RateLimitOmit<ExtArgs> | null
    /**
     * The data needed to update a RateLimit.
     */
    data: XOR<RateLimitUpdateInput, RateLimitUncheckedUpdateInput>
    /**
     * Choose, which RateLimit to update.
     */
    where: RateLimitWhereUniqueInput
  }

  /**
   * RateLimit updateMany
   */
  export type RateLimitUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update RateLimits.
     */
    data: XOR<RateLimitUpdateManyMutationInput, RateLimitUncheckedUpdateManyInput>
    /**
     * Filter which RateLimits to update
     */
    where?: RateLimitWhereInput
    /**
     * Limit how many RateLimits to update.
     */
    limit?: number
  }

  /**
   * RateLimit updateManyAndReturn
   */
  export type RateLimitUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RateLimit
     */
    select?: RateLimitSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the RateLimit
     */
    omit?: RateLimitOmit<ExtArgs> | null
    /**
     * The data used to update RateLimits.
     */
    data: XOR<RateLimitUpdateManyMutationInput, RateLimitUncheckedUpdateManyInput>
    /**
     * Filter which RateLimits to update
     */
    where?: RateLimitWhereInput
    /**
     * Limit how many RateLimits to update.
     */
    limit?: number
  }

  /**
   * RateLimit upsert
   */
  export type RateLimitUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RateLimit
     */
    select?: RateLimitSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RateLimit
     */
    omit?: RateLimitOmit<ExtArgs> | null
    /**
     * The filter to search for the RateLimit to update in case it exists.
     */
    where: RateLimitWhereUniqueInput
    /**
     * In case the RateLimit found by the `where` argument doesn't exist, create a new RateLimit with this data.
     */
    create: XOR<RateLimitCreateInput, RateLimitUncheckedCreateInput>
    /**
     * In case the RateLimit was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RateLimitUpdateInput, RateLimitUncheckedUpdateInput>
  }

  /**
   * RateLimit delete
   */
  export type RateLimitDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RateLimit
     */
    select?: RateLimitSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RateLimit
     */
    omit?: RateLimitOmit<ExtArgs> | null
    /**
     * Filter which RateLimit to delete.
     */
    where: RateLimitWhereUniqueInput
  }

  /**
   * RateLimit deleteMany
   */
  export type RateLimitDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RateLimits to delete
     */
    where?: RateLimitWhereInput
    /**
     * Limit how many RateLimits to delete.
     */
    limit?: number
  }

  /**
   * RateLimit without action
   */
  export type RateLimitDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RateLimit
     */
    select?: RateLimitSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RateLimit
     */
    omit?: RateLimitOmit<ExtArgs> | null
  }


  /**
   * Model DeviceBlock
   */

  export type AggregateDeviceBlock = {
    _count: DeviceBlockCountAggregateOutputType | null
    _min: DeviceBlockMinAggregateOutputType | null
    _max: DeviceBlockMaxAggregateOutputType | null
  }

  export type DeviceBlockMinAggregateOutputType = {
    deviceID: string | null
    isBlocked: boolean | null
    blockedAt: Date | null
    unblockedAt: Date | null
    blockedBy: string | null
    unblockedBy: string | null
    blockReason: $Enums.DeviceBlockReason | null
    unblockReason: $Enums.DeviceUnblockReason | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type DeviceBlockMaxAggregateOutputType = {
    deviceID: string | null
    isBlocked: boolean | null
    blockedAt: Date | null
    unblockedAt: Date | null
    blockedBy: string | null
    unblockedBy: string | null
    blockReason: $Enums.DeviceBlockReason | null
    unblockReason: $Enums.DeviceUnblockReason | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type DeviceBlockCountAggregateOutputType = {
    deviceID: number
    isBlocked: number
    blockedAt: number
    unblockedAt: number
    blockedBy: number
    unblockedBy: number
    blockReason: number
    unblockReason: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type DeviceBlockMinAggregateInputType = {
    deviceID?: true
    isBlocked?: true
    blockedAt?: true
    unblockedAt?: true
    blockedBy?: true
    unblockedBy?: true
    blockReason?: true
    unblockReason?: true
    createdAt?: true
    updatedAt?: true
  }

  export type DeviceBlockMaxAggregateInputType = {
    deviceID?: true
    isBlocked?: true
    blockedAt?: true
    unblockedAt?: true
    blockedBy?: true
    unblockedBy?: true
    blockReason?: true
    unblockReason?: true
    createdAt?: true
    updatedAt?: true
  }

  export type DeviceBlockCountAggregateInputType = {
    deviceID?: true
    isBlocked?: true
    blockedAt?: true
    unblockedAt?: true
    blockedBy?: true
    unblockedBy?: true
    blockReason?: true
    unblockReason?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type DeviceBlockAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DeviceBlock to aggregate.
     */
    where?: DeviceBlockWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DeviceBlocks to fetch.
     */
    orderBy?: DeviceBlockOrderByWithRelationInput | DeviceBlockOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DeviceBlockWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DeviceBlocks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DeviceBlocks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned DeviceBlocks
    **/
    _count?: true | DeviceBlockCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DeviceBlockMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DeviceBlockMaxAggregateInputType
  }

  export type GetDeviceBlockAggregateType<T extends DeviceBlockAggregateArgs> = {
        [P in keyof T & keyof AggregateDeviceBlock]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDeviceBlock[P]>
      : GetScalarType<T[P], AggregateDeviceBlock[P]>
  }




  export type DeviceBlockGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DeviceBlockWhereInput
    orderBy?: DeviceBlockOrderByWithAggregationInput | DeviceBlockOrderByWithAggregationInput[]
    by: DeviceBlockScalarFieldEnum[] | DeviceBlockScalarFieldEnum
    having?: DeviceBlockScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DeviceBlockCountAggregateInputType | true
    _min?: DeviceBlockMinAggregateInputType
    _max?: DeviceBlockMaxAggregateInputType
  }

  export type DeviceBlockGroupByOutputType = {
    deviceID: string
    isBlocked: boolean
    blockedAt: Date | null
    unblockedAt: Date | null
    blockedBy: string | null
    unblockedBy: string | null
    blockReason: $Enums.DeviceBlockReason | null
    unblockReason: $Enums.DeviceUnblockReason | null
    createdAt: Date
    updatedAt: Date
    _count: DeviceBlockCountAggregateOutputType | null
    _min: DeviceBlockMinAggregateOutputType | null
    _max: DeviceBlockMaxAggregateOutputType | null
  }

  type GetDeviceBlockGroupByPayload<T extends DeviceBlockGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DeviceBlockGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DeviceBlockGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DeviceBlockGroupByOutputType[P]>
            : GetScalarType<T[P], DeviceBlockGroupByOutputType[P]>
        }
      >
    >


  export type DeviceBlockSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    deviceID?: boolean
    isBlocked?: boolean
    blockedAt?: boolean
    unblockedAt?: boolean
    blockedBy?: boolean
    unblockedBy?: boolean
    blockReason?: boolean
    unblockReason?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["deviceBlock"]>

  export type DeviceBlockSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    deviceID?: boolean
    isBlocked?: boolean
    blockedAt?: boolean
    unblockedAt?: boolean
    blockedBy?: boolean
    unblockedBy?: boolean
    blockReason?: boolean
    unblockReason?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["deviceBlock"]>

  export type DeviceBlockSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    deviceID?: boolean
    isBlocked?: boolean
    blockedAt?: boolean
    unblockedAt?: boolean
    blockedBy?: boolean
    unblockedBy?: boolean
    blockReason?: boolean
    unblockReason?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["deviceBlock"]>

  export type DeviceBlockSelectScalar = {
    deviceID?: boolean
    isBlocked?: boolean
    blockedAt?: boolean
    unblockedAt?: boolean
    blockedBy?: boolean
    unblockedBy?: boolean
    blockReason?: boolean
    unblockReason?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type DeviceBlockOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"deviceID" | "isBlocked" | "blockedAt" | "unblockedAt" | "blockedBy" | "unblockedBy" | "blockReason" | "unblockReason" | "createdAt" | "updatedAt", ExtArgs["result"]["deviceBlock"]>

  export type $DeviceBlockPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "DeviceBlock"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      deviceID: string
      isBlocked: boolean
      blockedAt: Date | null
      unblockedAt: Date | null
      blockedBy: string | null
      unblockedBy: string | null
      blockReason: $Enums.DeviceBlockReason | null
      unblockReason: $Enums.DeviceUnblockReason | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["deviceBlock"]>
    composites: {}
  }

  type DeviceBlockGetPayload<S extends boolean | null | undefined | DeviceBlockDefaultArgs> = $Result.GetResult<Prisma.$DeviceBlockPayload, S>

  type DeviceBlockCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<DeviceBlockFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: DeviceBlockCountAggregateInputType | true
    }

  export interface DeviceBlockDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['DeviceBlock'], meta: { name: 'DeviceBlock' } }
    /**
     * Find zero or one DeviceBlock that matches the filter.
     * @param {DeviceBlockFindUniqueArgs} args - Arguments to find a DeviceBlock
     * @example
     * // Get one DeviceBlock
     * const deviceBlock = await prisma.deviceBlock.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DeviceBlockFindUniqueArgs>(args: SelectSubset<T, DeviceBlockFindUniqueArgs<ExtArgs>>): Prisma__DeviceBlockClient<$Result.GetResult<Prisma.$DeviceBlockPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one DeviceBlock that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {DeviceBlockFindUniqueOrThrowArgs} args - Arguments to find a DeviceBlock
     * @example
     * // Get one DeviceBlock
     * const deviceBlock = await prisma.deviceBlock.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DeviceBlockFindUniqueOrThrowArgs>(args: SelectSubset<T, DeviceBlockFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DeviceBlockClient<$Result.GetResult<Prisma.$DeviceBlockPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first DeviceBlock that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DeviceBlockFindFirstArgs} args - Arguments to find a DeviceBlock
     * @example
     * // Get one DeviceBlock
     * const deviceBlock = await prisma.deviceBlock.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DeviceBlockFindFirstArgs>(args?: SelectSubset<T, DeviceBlockFindFirstArgs<ExtArgs>>): Prisma__DeviceBlockClient<$Result.GetResult<Prisma.$DeviceBlockPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first DeviceBlock that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DeviceBlockFindFirstOrThrowArgs} args - Arguments to find a DeviceBlock
     * @example
     * // Get one DeviceBlock
     * const deviceBlock = await prisma.deviceBlock.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DeviceBlockFindFirstOrThrowArgs>(args?: SelectSubset<T, DeviceBlockFindFirstOrThrowArgs<ExtArgs>>): Prisma__DeviceBlockClient<$Result.GetResult<Prisma.$DeviceBlockPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more DeviceBlocks that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DeviceBlockFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all DeviceBlocks
     * const deviceBlocks = await prisma.deviceBlock.findMany()
     * 
     * // Get first 10 DeviceBlocks
     * const deviceBlocks = await prisma.deviceBlock.findMany({ take: 10 })
     * 
     * // Only select the `deviceID`
     * const deviceBlockWithDeviceIDOnly = await prisma.deviceBlock.findMany({ select: { deviceID: true } })
     * 
     */
    findMany<T extends DeviceBlockFindManyArgs>(args?: SelectSubset<T, DeviceBlockFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DeviceBlockPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a DeviceBlock.
     * @param {DeviceBlockCreateArgs} args - Arguments to create a DeviceBlock.
     * @example
     * // Create one DeviceBlock
     * const DeviceBlock = await prisma.deviceBlock.create({
     *   data: {
     *     // ... data to create a DeviceBlock
     *   }
     * })
     * 
     */
    create<T extends DeviceBlockCreateArgs>(args: SelectSubset<T, DeviceBlockCreateArgs<ExtArgs>>): Prisma__DeviceBlockClient<$Result.GetResult<Prisma.$DeviceBlockPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many DeviceBlocks.
     * @param {DeviceBlockCreateManyArgs} args - Arguments to create many DeviceBlocks.
     * @example
     * // Create many DeviceBlocks
     * const deviceBlock = await prisma.deviceBlock.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DeviceBlockCreateManyArgs>(args?: SelectSubset<T, DeviceBlockCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many DeviceBlocks and returns the data saved in the database.
     * @param {DeviceBlockCreateManyAndReturnArgs} args - Arguments to create many DeviceBlocks.
     * @example
     * // Create many DeviceBlocks
     * const deviceBlock = await prisma.deviceBlock.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many DeviceBlocks and only return the `deviceID`
     * const deviceBlockWithDeviceIDOnly = await prisma.deviceBlock.createManyAndReturn({
     *   select: { deviceID: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends DeviceBlockCreateManyAndReturnArgs>(args?: SelectSubset<T, DeviceBlockCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DeviceBlockPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a DeviceBlock.
     * @param {DeviceBlockDeleteArgs} args - Arguments to delete one DeviceBlock.
     * @example
     * // Delete one DeviceBlock
     * const DeviceBlock = await prisma.deviceBlock.delete({
     *   where: {
     *     // ... filter to delete one DeviceBlock
     *   }
     * })
     * 
     */
    delete<T extends DeviceBlockDeleteArgs>(args: SelectSubset<T, DeviceBlockDeleteArgs<ExtArgs>>): Prisma__DeviceBlockClient<$Result.GetResult<Prisma.$DeviceBlockPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one DeviceBlock.
     * @param {DeviceBlockUpdateArgs} args - Arguments to update one DeviceBlock.
     * @example
     * // Update one DeviceBlock
     * const deviceBlock = await prisma.deviceBlock.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DeviceBlockUpdateArgs>(args: SelectSubset<T, DeviceBlockUpdateArgs<ExtArgs>>): Prisma__DeviceBlockClient<$Result.GetResult<Prisma.$DeviceBlockPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more DeviceBlocks.
     * @param {DeviceBlockDeleteManyArgs} args - Arguments to filter DeviceBlocks to delete.
     * @example
     * // Delete a few DeviceBlocks
     * const { count } = await prisma.deviceBlock.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DeviceBlockDeleteManyArgs>(args?: SelectSubset<T, DeviceBlockDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DeviceBlocks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DeviceBlockUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many DeviceBlocks
     * const deviceBlock = await prisma.deviceBlock.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DeviceBlockUpdateManyArgs>(args: SelectSubset<T, DeviceBlockUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DeviceBlocks and returns the data updated in the database.
     * @param {DeviceBlockUpdateManyAndReturnArgs} args - Arguments to update many DeviceBlocks.
     * @example
     * // Update many DeviceBlocks
     * const deviceBlock = await prisma.deviceBlock.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more DeviceBlocks and only return the `deviceID`
     * const deviceBlockWithDeviceIDOnly = await prisma.deviceBlock.updateManyAndReturn({
     *   select: { deviceID: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends DeviceBlockUpdateManyAndReturnArgs>(args: SelectSubset<T, DeviceBlockUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DeviceBlockPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one DeviceBlock.
     * @param {DeviceBlockUpsertArgs} args - Arguments to update or create a DeviceBlock.
     * @example
     * // Update or create a DeviceBlock
     * const deviceBlock = await prisma.deviceBlock.upsert({
     *   create: {
     *     // ... data to create a DeviceBlock
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the DeviceBlock we want to update
     *   }
     * })
     */
    upsert<T extends DeviceBlockUpsertArgs>(args: SelectSubset<T, DeviceBlockUpsertArgs<ExtArgs>>): Prisma__DeviceBlockClient<$Result.GetResult<Prisma.$DeviceBlockPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of DeviceBlocks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DeviceBlockCountArgs} args - Arguments to filter DeviceBlocks to count.
     * @example
     * // Count the number of DeviceBlocks
     * const count = await prisma.deviceBlock.count({
     *   where: {
     *     // ... the filter for the DeviceBlocks we want to count
     *   }
     * })
    **/
    count<T extends DeviceBlockCountArgs>(
      args?: Subset<T, DeviceBlockCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DeviceBlockCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a DeviceBlock.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DeviceBlockAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DeviceBlockAggregateArgs>(args: Subset<T, DeviceBlockAggregateArgs>): Prisma.PrismaPromise<GetDeviceBlockAggregateType<T>>

    /**
     * Group by DeviceBlock.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DeviceBlockGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DeviceBlockGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DeviceBlockGroupByArgs['orderBy'] }
        : { orderBy?: DeviceBlockGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DeviceBlockGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDeviceBlockGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the DeviceBlock model
   */
  readonly fields: DeviceBlockFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for DeviceBlock.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DeviceBlockClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the DeviceBlock model
   */
  interface DeviceBlockFieldRefs {
    readonly deviceID: FieldRef<"DeviceBlock", 'String'>
    readonly isBlocked: FieldRef<"DeviceBlock", 'Boolean'>
    readonly blockedAt: FieldRef<"DeviceBlock", 'DateTime'>
    readonly unblockedAt: FieldRef<"DeviceBlock", 'DateTime'>
    readonly blockedBy: FieldRef<"DeviceBlock", 'String'>
    readonly unblockedBy: FieldRef<"DeviceBlock", 'String'>
    readonly blockReason: FieldRef<"DeviceBlock", 'DeviceBlockReason'>
    readonly unblockReason: FieldRef<"DeviceBlock", 'DeviceUnblockReason'>
    readonly createdAt: FieldRef<"DeviceBlock", 'DateTime'>
    readonly updatedAt: FieldRef<"DeviceBlock", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * DeviceBlock findUnique
   */
  export type DeviceBlockFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DeviceBlock
     */
    select?: DeviceBlockSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DeviceBlock
     */
    omit?: DeviceBlockOmit<ExtArgs> | null
    /**
     * Filter, which DeviceBlock to fetch.
     */
    where: DeviceBlockWhereUniqueInput
  }

  /**
   * DeviceBlock findUniqueOrThrow
   */
  export type DeviceBlockFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DeviceBlock
     */
    select?: DeviceBlockSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DeviceBlock
     */
    omit?: DeviceBlockOmit<ExtArgs> | null
    /**
     * Filter, which DeviceBlock to fetch.
     */
    where: DeviceBlockWhereUniqueInput
  }

  /**
   * DeviceBlock findFirst
   */
  export type DeviceBlockFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DeviceBlock
     */
    select?: DeviceBlockSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DeviceBlock
     */
    omit?: DeviceBlockOmit<ExtArgs> | null
    /**
     * Filter, which DeviceBlock to fetch.
     */
    where?: DeviceBlockWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DeviceBlocks to fetch.
     */
    orderBy?: DeviceBlockOrderByWithRelationInput | DeviceBlockOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DeviceBlocks.
     */
    cursor?: DeviceBlockWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DeviceBlocks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DeviceBlocks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DeviceBlocks.
     */
    distinct?: DeviceBlockScalarFieldEnum | DeviceBlockScalarFieldEnum[]
  }

  /**
   * DeviceBlock findFirstOrThrow
   */
  export type DeviceBlockFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DeviceBlock
     */
    select?: DeviceBlockSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DeviceBlock
     */
    omit?: DeviceBlockOmit<ExtArgs> | null
    /**
     * Filter, which DeviceBlock to fetch.
     */
    where?: DeviceBlockWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DeviceBlocks to fetch.
     */
    orderBy?: DeviceBlockOrderByWithRelationInput | DeviceBlockOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DeviceBlocks.
     */
    cursor?: DeviceBlockWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DeviceBlocks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DeviceBlocks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DeviceBlocks.
     */
    distinct?: DeviceBlockScalarFieldEnum | DeviceBlockScalarFieldEnum[]
  }

  /**
   * DeviceBlock findMany
   */
  export type DeviceBlockFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DeviceBlock
     */
    select?: DeviceBlockSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DeviceBlock
     */
    omit?: DeviceBlockOmit<ExtArgs> | null
    /**
     * Filter, which DeviceBlocks to fetch.
     */
    where?: DeviceBlockWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DeviceBlocks to fetch.
     */
    orderBy?: DeviceBlockOrderByWithRelationInput | DeviceBlockOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing DeviceBlocks.
     */
    cursor?: DeviceBlockWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DeviceBlocks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DeviceBlocks.
     */
    skip?: number
    distinct?: DeviceBlockScalarFieldEnum | DeviceBlockScalarFieldEnum[]
  }

  /**
   * DeviceBlock create
   */
  export type DeviceBlockCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DeviceBlock
     */
    select?: DeviceBlockSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DeviceBlock
     */
    omit?: DeviceBlockOmit<ExtArgs> | null
    /**
     * The data needed to create a DeviceBlock.
     */
    data: XOR<DeviceBlockCreateInput, DeviceBlockUncheckedCreateInput>
  }

  /**
   * DeviceBlock createMany
   */
  export type DeviceBlockCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many DeviceBlocks.
     */
    data: DeviceBlockCreateManyInput | DeviceBlockCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * DeviceBlock createManyAndReturn
   */
  export type DeviceBlockCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DeviceBlock
     */
    select?: DeviceBlockSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the DeviceBlock
     */
    omit?: DeviceBlockOmit<ExtArgs> | null
    /**
     * The data used to create many DeviceBlocks.
     */
    data: DeviceBlockCreateManyInput | DeviceBlockCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * DeviceBlock update
   */
  export type DeviceBlockUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DeviceBlock
     */
    select?: DeviceBlockSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DeviceBlock
     */
    omit?: DeviceBlockOmit<ExtArgs> | null
    /**
     * The data needed to update a DeviceBlock.
     */
    data: XOR<DeviceBlockUpdateInput, DeviceBlockUncheckedUpdateInput>
    /**
     * Choose, which DeviceBlock to update.
     */
    where: DeviceBlockWhereUniqueInput
  }

  /**
   * DeviceBlock updateMany
   */
  export type DeviceBlockUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update DeviceBlocks.
     */
    data: XOR<DeviceBlockUpdateManyMutationInput, DeviceBlockUncheckedUpdateManyInput>
    /**
     * Filter which DeviceBlocks to update
     */
    where?: DeviceBlockWhereInput
    /**
     * Limit how many DeviceBlocks to update.
     */
    limit?: number
  }

  /**
   * DeviceBlock updateManyAndReturn
   */
  export type DeviceBlockUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DeviceBlock
     */
    select?: DeviceBlockSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the DeviceBlock
     */
    omit?: DeviceBlockOmit<ExtArgs> | null
    /**
     * The data used to update DeviceBlocks.
     */
    data: XOR<DeviceBlockUpdateManyMutationInput, DeviceBlockUncheckedUpdateManyInput>
    /**
     * Filter which DeviceBlocks to update
     */
    where?: DeviceBlockWhereInput
    /**
     * Limit how many DeviceBlocks to update.
     */
    limit?: number
  }

  /**
   * DeviceBlock upsert
   */
  export type DeviceBlockUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DeviceBlock
     */
    select?: DeviceBlockSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DeviceBlock
     */
    omit?: DeviceBlockOmit<ExtArgs> | null
    /**
     * The filter to search for the DeviceBlock to update in case it exists.
     */
    where: DeviceBlockWhereUniqueInput
    /**
     * In case the DeviceBlock found by the `where` argument doesn't exist, create a new DeviceBlock with this data.
     */
    create: XOR<DeviceBlockCreateInput, DeviceBlockUncheckedCreateInput>
    /**
     * In case the DeviceBlock was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DeviceBlockUpdateInput, DeviceBlockUncheckedUpdateInput>
  }

  /**
   * DeviceBlock delete
   */
  export type DeviceBlockDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DeviceBlock
     */
    select?: DeviceBlockSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DeviceBlock
     */
    omit?: DeviceBlockOmit<ExtArgs> | null
    /**
     * Filter which DeviceBlock to delete.
     */
    where: DeviceBlockWhereUniqueInput
  }

  /**
   * DeviceBlock deleteMany
   */
  export type DeviceBlockDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DeviceBlocks to delete
     */
    where?: DeviceBlockWhereInput
    /**
     * Limit how many DeviceBlocks to delete.
     */
    limit?: number
  }

  /**
   * DeviceBlock without action
   */
  export type DeviceBlockDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DeviceBlock
     */
    select?: DeviceBlockSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DeviceBlock
     */
    omit?: DeviceBlockOmit<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const DeviceRateLimitScalarFieldEnum: {
    deviceID: 'deviceID',
    attempts: 'attempts',
    lastAttemptAt: 'lastAttemptAt',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type DeviceRateLimitScalarFieldEnum = (typeof DeviceRateLimitScalarFieldEnum)[keyof typeof DeviceRateLimitScalarFieldEnum]


  export const AuthLogScalarFieldEnum: {
    id: 'id',
    userID: 'userID',
    eventType: 'eventType',
    deviceID: 'deviceID',
    deviceName: 'deviceName',
    deviceType: 'deviceType',
    performedBy: 'performedBy',
    timestamp: 'timestamp'
  };

  export type AuthLogScalarFieldEnum = (typeof AuthLogScalarFieldEnum)[keyof typeof AuthLogScalarFieldEnum]


  export const AdminActionScalarFieldEnum: {
    id: 'id',
    targetUserID: 'targetUserID',
    reason: 'reason',
    filter: 'filter'
  };

  export type AdminActionScalarFieldEnum = (typeof AdminActionScalarFieldEnum)[keyof typeof AdminActionScalarFieldEnum]


  export const CounterScalarFieldEnum: {
    id: 'id',
    seq: 'seq'
  };

  export type CounterScalarFieldEnum = (typeof CounterScalarFieldEnum)[keyof typeof CounterScalarFieldEnum]


  export const RateLimitScalarFieldEnum: {
    deviceID: 'deviceID',
    routeKey: 'routeKey',
    requestCount: 'requestCount',
    lastRequestAt: 'lastRequestAt'
  };

  export type RateLimitScalarFieldEnum = (typeof RateLimitScalarFieldEnum)[keyof typeof RateLimitScalarFieldEnum]


  export const DeviceBlockScalarFieldEnum: {
    deviceID: 'deviceID',
    isBlocked: 'isBlocked',
    blockedAt: 'blockedAt',
    unblockedAt: 'unblockedAt',
    blockedBy: 'blockedBy',
    unblockedBy: 'unblockedBy',
    blockReason: 'blockReason',
    unblockReason: 'unblockReason',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type DeviceBlockScalarFieldEnum = (typeof DeviceBlockScalarFieldEnum)[keyof typeof DeviceBlockScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const JsonNullValueInput: {
    JsonNull: typeof JsonNull
  };

  export type JsonNullValueInput = (typeof JsonNullValueInput)[keyof typeof JsonNullValueInput]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'AuthLogEvent'
   */
  export type EnumAuthLogEventFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AuthLogEvent'>
    


  /**
   * Reference to a field of type 'AuthLogEvent[]'
   */
  export type ListEnumAuthLogEventFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AuthLogEvent[]'>
    


  /**
   * Reference to a field of type 'DeviceType'
   */
  export type EnumDeviceTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DeviceType'>
    


  /**
   * Reference to a field of type 'DeviceType[]'
   */
  export type ListEnumDeviceTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DeviceType[]'>
    


  /**
   * Reference to a field of type 'PerformedBy'
   */
  export type EnumPerformedByFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PerformedBy'>
    


  /**
   * Reference to a field of type 'PerformedBy[]'
   */
  export type ListEnumPerformedByFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PerformedBy[]'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


  /**
   * Reference to a field of type 'QueryMode'
   */
  export type EnumQueryModeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'QueryMode'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'DeviceBlockReason'
   */
  export type EnumDeviceBlockReasonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DeviceBlockReason'>
    


  /**
   * Reference to a field of type 'DeviceBlockReason[]'
   */
  export type ListEnumDeviceBlockReasonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DeviceBlockReason[]'>
    


  /**
   * Reference to a field of type 'DeviceUnblockReason'
   */
  export type EnumDeviceUnblockReasonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DeviceUnblockReason'>
    


  /**
   * Reference to a field of type 'DeviceUnblockReason[]'
   */
  export type ListEnumDeviceUnblockReasonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DeviceUnblockReason[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type DeviceRateLimitWhereInput = {
    AND?: DeviceRateLimitWhereInput | DeviceRateLimitWhereInput[]
    OR?: DeviceRateLimitWhereInput[]
    NOT?: DeviceRateLimitWhereInput | DeviceRateLimitWhereInput[]
    deviceID?: StringFilter<"DeviceRateLimit"> | string
    attempts?: IntFilter<"DeviceRateLimit"> | number
    lastAttemptAt?: DateTimeFilter<"DeviceRateLimit"> | Date | string
    createdAt?: DateTimeFilter<"DeviceRateLimit"> | Date | string
    updatedAt?: DateTimeFilter<"DeviceRateLimit"> | Date | string
  }

  export type DeviceRateLimitOrderByWithRelationInput = {
    deviceID?: SortOrder
    attempts?: SortOrder
    lastAttemptAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DeviceRateLimitWhereUniqueInput = Prisma.AtLeast<{
    deviceID?: string
    AND?: DeviceRateLimitWhereInput | DeviceRateLimitWhereInput[]
    OR?: DeviceRateLimitWhereInput[]
    NOT?: DeviceRateLimitWhereInput | DeviceRateLimitWhereInput[]
    attempts?: IntFilter<"DeviceRateLimit"> | number
    lastAttemptAt?: DateTimeFilter<"DeviceRateLimit"> | Date | string
    createdAt?: DateTimeFilter<"DeviceRateLimit"> | Date | string
    updatedAt?: DateTimeFilter<"DeviceRateLimit"> | Date | string
  }, "deviceID">

  export type DeviceRateLimitOrderByWithAggregationInput = {
    deviceID?: SortOrder
    attempts?: SortOrder
    lastAttemptAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: DeviceRateLimitCountOrderByAggregateInput
    _avg?: DeviceRateLimitAvgOrderByAggregateInput
    _max?: DeviceRateLimitMaxOrderByAggregateInput
    _min?: DeviceRateLimitMinOrderByAggregateInput
    _sum?: DeviceRateLimitSumOrderByAggregateInput
  }

  export type DeviceRateLimitScalarWhereWithAggregatesInput = {
    AND?: DeviceRateLimitScalarWhereWithAggregatesInput | DeviceRateLimitScalarWhereWithAggregatesInput[]
    OR?: DeviceRateLimitScalarWhereWithAggregatesInput[]
    NOT?: DeviceRateLimitScalarWhereWithAggregatesInput | DeviceRateLimitScalarWhereWithAggregatesInput[]
    deviceID?: StringWithAggregatesFilter<"DeviceRateLimit"> | string
    attempts?: IntWithAggregatesFilter<"DeviceRateLimit"> | number
    lastAttemptAt?: DateTimeWithAggregatesFilter<"DeviceRateLimit"> | Date | string
    createdAt?: DateTimeWithAggregatesFilter<"DeviceRateLimit"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"DeviceRateLimit"> | Date | string
  }

  export type AuthLogWhereInput = {
    AND?: AuthLogWhereInput | AuthLogWhereInput[]
    OR?: AuthLogWhereInput[]
    NOT?: AuthLogWhereInput | AuthLogWhereInput[]
    id?: IntFilter<"AuthLog"> | number
    userID?: StringFilter<"AuthLog"> | string
    eventType?: EnumAuthLogEventFilter<"AuthLog"> | $Enums.AuthLogEvent
    deviceID?: StringFilter<"AuthLog"> | string
    deviceName?: StringNullableFilter<"AuthLog"> | string | null
    deviceType?: EnumDeviceTypeNullableFilter<"AuthLog"> | $Enums.DeviceType | null
    performedBy?: EnumPerformedByFilter<"AuthLog"> | $Enums.PerformedBy
    timestamp?: DateTimeFilter<"AuthLog"> | Date | string
    adminAction?: XOR<AdminActionNullableScalarRelationFilter, AdminActionWhereInput> | null
  }

  export type AuthLogOrderByWithRelationInput = {
    id?: SortOrder
    userID?: SortOrder
    eventType?: SortOrder
    deviceID?: SortOrder
    deviceName?: SortOrderInput | SortOrder
    deviceType?: SortOrderInput | SortOrder
    performedBy?: SortOrder
    timestamp?: SortOrder
    adminAction?: AdminActionOrderByWithRelationInput
  }

  export type AuthLogWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: AuthLogWhereInput | AuthLogWhereInput[]
    OR?: AuthLogWhereInput[]
    NOT?: AuthLogWhereInput | AuthLogWhereInput[]
    userID?: StringFilter<"AuthLog"> | string
    eventType?: EnumAuthLogEventFilter<"AuthLog"> | $Enums.AuthLogEvent
    deviceID?: StringFilter<"AuthLog"> | string
    deviceName?: StringNullableFilter<"AuthLog"> | string | null
    deviceType?: EnumDeviceTypeNullableFilter<"AuthLog"> | $Enums.DeviceType | null
    performedBy?: EnumPerformedByFilter<"AuthLog"> | $Enums.PerformedBy
    timestamp?: DateTimeFilter<"AuthLog"> | Date | string
    adminAction?: XOR<AdminActionNullableScalarRelationFilter, AdminActionWhereInput> | null
  }, "id">

  export type AuthLogOrderByWithAggregationInput = {
    id?: SortOrder
    userID?: SortOrder
    eventType?: SortOrder
    deviceID?: SortOrder
    deviceName?: SortOrderInput | SortOrder
    deviceType?: SortOrderInput | SortOrder
    performedBy?: SortOrder
    timestamp?: SortOrder
    _count?: AuthLogCountOrderByAggregateInput
    _avg?: AuthLogAvgOrderByAggregateInput
    _max?: AuthLogMaxOrderByAggregateInput
    _min?: AuthLogMinOrderByAggregateInput
    _sum?: AuthLogSumOrderByAggregateInput
  }

  export type AuthLogScalarWhereWithAggregatesInput = {
    AND?: AuthLogScalarWhereWithAggregatesInput | AuthLogScalarWhereWithAggregatesInput[]
    OR?: AuthLogScalarWhereWithAggregatesInput[]
    NOT?: AuthLogScalarWhereWithAggregatesInput | AuthLogScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"AuthLog"> | number
    userID?: StringWithAggregatesFilter<"AuthLog"> | string
    eventType?: EnumAuthLogEventWithAggregatesFilter<"AuthLog"> | $Enums.AuthLogEvent
    deviceID?: StringWithAggregatesFilter<"AuthLog"> | string
    deviceName?: StringNullableWithAggregatesFilter<"AuthLog"> | string | null
    deviceType?: EnumDeviceTypeNullableWithAggregatesFilter<"AuthLog"> | $Enums.DeviceType | null
    performedBy?: EnumPerformedByWithAggregatesFilter<"AuthLog"> | $Enums.PerformedBy
    timestamp?: DateTimeWithAggregatesFilter<"AuthLog"> | Date | string
  }

  export type AdminActionWhereInput = {
    AND?: AdminActionWhereInput | AdminActionWhereInput[]
    OR?: AdminActionWhereInput[]
    NOT?: AdminActionWhereInput | AdminActionWhereInput[]
    id?: IntFilter<"AdminAction"> | number
    targetUserID?: StringNullableFilter<"AdminAction"> | string | null
    reason?: StringNullableFilter<"AdminAction"> | string | null
    filter?: JsonFilter<"AdminAction">
    authLog?: XOR<AuthLogScalarRelationFilter, AuthLogWhereInput>
  }

  export type AdminActionOrderByWithRelationInput = {
    id?: SortOrder
    targetUserID?: SortOrderInput | SortOrder
    reason?: SortOrderInput | SortOrder
    filter?: SortOrder
    authLog?: AuthLogOrderByWithRelationInput
  }

  export type AdminActionWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: AdminActionWhereInput | AdminActionWhereInput[]
    OR?: AdminActionWhereInput[]
    NOT?: AdminActionWhereInput | AdminActionWhereInput[]
    targetUserID?: StringNullableFilter<"AdminAction"> | string | null
    reason?: StringNullableFilter<"AdminAction"> | string | null
    filter?: JsonFilter<"AdminAction">
    authLog?: XOR<AuthLogScalarRelationFilter, AuthLogWhereInput>
  }, "id">

  export type AdminActionOrderByWithAggregationInput = {
    id?: SortOrder
    targetUserID?: SortOrderInput | SortOrder
    reason?: SortOrderInput | SortOrder
    filter?: SortOrder
    _count?: AdminActionCountOrderByAggregateInput
    _avg?: AdminActionAvgOrderByAggregateInput
    _max?: AdminActionMaxOrderByAggregateInput
    _min?: AdminActionMinOrderByAggregateInput
    _sum?: AdminActionSumOrderByAggregateInput
  }

  export type AdminActionScalarWhereWithAggregatesInput = {
    AND?: AdminActionScalarWhereWithAggregatesInput | AdminActionScalarWhereWithAggregatesInput[]
    OR?: AdminActionScalarWhereWithAggregatesInput[]
    NOT?: AdminActionScalarWhereWithAggregatesInput | AdminActionScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"AdminAction"> | number
    targetUserID?: StringNullableWithAggregatesFilter<"AdminAction"> | string | null
    reason?: StringNullableWithAggregatesFilter<"AdminAction"> | string | null
    filter?: JsonWithAggregatesFilter<"AdminAction">
  }

  export type CounterWhereInput = {
    AND?: CounterWhereInput | CounterWhereInput[]
    OR?: CounterWhereInput[]
    NOT?: CounterWhereInput | CounterWhereInput[]
    id?: StringFilter<"Counter"> | string
    seq?: IntFilter<"Counter"> | number
  }

  export type CounterOrderByWithRelationInput = {
    id?: SortOrder
    seq?: SortOrder
  }

  export type CounterWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: CounterWhereInput | CounterWhereInput[]
    OR?: CounterWhereInput[]
    NOT?: CounterWhereInput | CounterWhereInput[]
    seq?: IntFilter<"Counter"> | number
  }, "id">

  export type CounterOrderByWithAggregationInput = {
    id?: SortOrder
    seq?: SortOrder
    _count?: CounterCountOrderByAggregateInput
    _avg?: CounterAvgOrderByAggregateInput
    _max?: CounterMaxOrderByAggregateInput
    _min?: CounterMinOrderByAggregateInput
    _sum?: CounterSumOrderByAggregateInput
  }

  export type CounterScalarWhereWithAggregatesInput = {
    AND?: CounterScalarWhereWithAggregatesInput | CounterScalarWhereWithAggregatesInput[]
    OR?: CounterScalarWhereWithAggregatesInput[]
    NOT?: CounterScalarWhereWithAggregatesInput | CounterScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Counter"> | string
    seq?: IntWithAggregatesFilter<"Counter"> | number
  }

  export type RateLimitWhereInput = {
    AND?: RateLimitWhereInput | RateLimitWhereInput[]
    OR?: RateLimitWhereInput[]
    NOT?: RateLimitWhereInput | RateLimitWhereInput[]
    deviceID?: StringFilter<"RateLimit"> | string
    routeKey?: StringFilter<"RateLimit"> | string
    requestCount?: IntFilter<"RateLimit"> | number
    lastRequestAt?: DateTimeFilter<"RateLimit"> | Date | string
  }

  export type RateLimitOrderByWithRelationInput = {
    deviceID?: SortOrder
    routeKey?: SortOrder
    requestCount?: SortOrder
    lastRequestAt?: SortOrder
  }

  export type RateLimitWhereUniqueInput = Prisma.AtLeast<{
    deviceID_routeKey?: RateLimitDeviceIDRouteKeyCompoundUniqueInput
    AND?: RateLimitWhereInput | RateLimitWhereInput[]
    OR?: RateLimitWhereInput[]
    NOT?: RateLimitWhereInput | RateLimitWhereInput[]
    deviceID?: StringFilter<"RateLimit"> | string
    routeKey?: StringFilter<"RateLimit"> | string
    requestCount?: IntFilter<"RateLimit"> | number
    lastRequestAt?: DateTimeFilter<"RateLimit"> | Date | string
  }, "deviceID_routeKey">

  export type RateLimitOrderByWithAggregationInput = {
    deviceID?: SortOrder
    routeKey?: SortOrder
    requestCount?: SortOrder
    lastRequestAt?: SortOrder
    _count?: RateLimitCountOrderByAggregateInput
    _avg?: RateLimitAvgOrderByAggregateInput
    _max?: RateLimitMaxOrderByAggregateInput
    _min?: RateLimitMinOrderByAggregateInput
    _sum?: RateLimitSumOrderByAggregateInput
  }

  export type RateLimitScalarWhereWithAggregatesInput = {
    AND?: RateLimitScalarWhereWithAggregatesInput | RateLimitScalarWhereWithAggregatesInput[]
    OR?: RateLimitScalarWhereWithAggregatesInput[]
    NOT?: RateLimitScalarWhereWithAggregatesInput | RateLimitScalarWhereWithAggregatesInput[]
    deviceID?: StringWithAggregatesFilter<"RateLimit"> | string
    routeKey?: StringWithAggregatesFilter<"RateLimit"> | string
    requestCount?: IntWithAggregatesFilter<"RateLimit"> | number
    lastRequestAt?: DateTimeWithAggregatesFilter<"RateLimit"> | Date | string
  }

  export type DeviceBlockWhereInput = {
    AND?: DeviceBlockWhereInput | DeviceBlockWhereInput[]
    OR?: DeviceBlockWhereInput[]
    NOT?: DeviceBlockWhereInput | DeviceBlockWhereInput[]
    deviceID?: StringFilter<"DeviceBlock"> | string
    isBlocked?: BoolFilter<"DeviceBlock"> | boolean
    blockedAt?: DateTimeNullableFilter<"DeviceBlock"> | Date | string | null
    unblockedAt?: DateTimeNullableFilter<"DeviceBlock"> | Date | string | null
    blockedBy?: StringNullableFilter<"DeviceBlock"> | string | null
    unblockedBy?: StringNullableFilter<"DeviceBlock"> | string | null
    blockReason?: EnumDeviceBlockReasonNullableFilter<"DeviceBlock"> | $Enums.DeviceBlockReason | null
    unblockReason?: EnumDeviceUnblockReasonNullableFilter<"DeviceBlock"> | $Enums.DeviceUnblockReason | null
    createdAt?: DateTimeFilter<"DeviceBlock"> | Date | string
    updatedAt?: DateTimeFilter<"DeviceBlock"> | Date | string
  }

  export type DeviceBlockOrderByWithRelationInput = {
    deviceID?: SortOrder
    isBlocked?: SortOrder
    blockedAt?: SortOrderInput | SortOrder
    unblockedAt?: SortOrderInput | SortOrder
    blockedBy?: SortOrderInput | SortOrder
    unblockedBy?: SortOrderInput | SortOrder
    blockReason?: SortOrderInput | SortOrder
    unblockReason?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DeviceBlockWhereUniqueInput = Prisma.AtLeast<{
    deviceID?: string
    AND?: DeviceBlockWhereInput | DeviceBlockWhereInput[]
    OR?: DeviceBlockWhereInput[]
    NOT?: DeviceBlockWhereInput | DeviceBlockWhereInput[]
    isBlocked?: BoolFilter<"DeviceBlock"> | boolean
    blockedAt?: DateTimeNullableFilter<"DeviceBlock"> | Date | string | null
    unblockedAt?: DateTimeNullableFilter<"DeviceBlock"> | Date | string | null
    blockedBy?: StringNullableFilter<"DeviceBlock"> | string | null
    unblockedBy?: StringNullableFilter<"DeviceBlock"> | string | null
    blockReason?: EnumDeviceBlockReasonNullableFilter<"DeviceBlock"> | $Enums.DeviceBlockReason | null
    unblockReason?: EnumDeviceUnblockReasonNullableFilter<"DeviceBlock"> | $Enums.DeviceUnblockReason | null
    createdAt?: DateTimeFilter<"DeviceBlock"> | Date | string
    updatedAt?: DateTimeFilter<"DeviceBlock"> | Date | string
  }, "deviceID">

  export type DeviceBlockOrderByWithAggregationInput = {
    deviceID?: SortOrder
    isBlocked?: SortOrder
    blockedAt?: SortOrderInput | SortOrder
    unblockedAt?: SortOrderInput | SortOrder
    blockedBy?: SortOrderInput | SortOrder
    unblockedBy?: SortOrderInput | SortOrder
    blockReason?: SortOrderInput | SortOrder
    unblockReason?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: DeviceBlockCountOrderByAggregateInput
    _max?: DeviceBlockMaxOrderByAggregateInput
    _min?: DeviceBlockMinOrderByAggregateInput
  }

  export type DeviceBlockScalarWhereWithAggregatesInput = {
    AND?: DeviceBlockScalarWhereWithAggregatesInput | DeviceBlockScalarWhereWithAggregatesInput[]
    OR?: DeviceBlockScalarWhereWithAggregatesInput[]
    NOT?: DeviceBlockScalarWhereWithAggregatesInput | DeviceBlockScalarWhereWithAggregatesInput[]
    deviceID?: StringWithAggregatesFilter<"DeviceBlock"> | string
    isBlocked?: BoolWithAggregatesFilter<"DeviceBlock"> | boolean
    blockedAt?: DateTimeNullableWithAggregatesFilter<"DeviceBlock"> | Date | string | null
    unblockedAt?: DateTimeNullableWithAggregatesFilter<"DeviceBlock"> | Date | string | null
    blockedBy?: StringNullableWithAggregatesFilter<"DeviceBlock"> | string | null
    unblockedBy?: StringNullableWithAggregatesFilter<"DeviceBlock"> | string | null
    blockReason?: EnumDeviceBlockReasonNullableWithAggregatesFilter<"DeviceBlock"> | $Enums.DeviceBlockReason | null
    unblockReason?: EnumDeviceUnblockReasonNullableWithAggregatesFilter<"DeviceBlock"> | $Enums.DeviceUnblockReason | null
    createdAt?: DateTimeWithAggregatesFilter<"DeviceBlock"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"DeviceBlock"> | Date | string
  }

  export type DeviceRateLimitCreateInput = {
    deviceID: string
    attempts?: number
    lastAttemptAt?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DeviceRateLimitUncheckedCreateInput = {
    deviceID: string
    attempts?: number
    lastAttemptAt?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DeviceRateLimitUpdateInput = {
    deviceID?: StringFieldUpdateOperationsInput | string
    attempts?: IntFieldUpdateOperationsInput | number
    lastAttemptAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DeviceRateLimitUncheckedUpdateInput = {
    deviceID?: StringFieldUpdateOperationsInput | string
    attempts?: IntFieldUpdateOperationsInput | number
    lastAttemptAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DeviceRateLimitCreateManyInput = {
    deviceID: string
    attempts?: number
    lastAttemptAt?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DeviceRateLimitUpdateManyMutationInput = {
    deviceID?: StringFieldUpdateOperationsInput | string
    attempts?: IntFieldUpdateOperationsInput | number
    lastAttemptAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DeviceRateLimitUncheckedUpdateManyInput = {
    deviceID?: StringFieldUpdateOperationsInput | string
    attempts?: IntFieldUpdateOperationsInput | number
    lastAttemptAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuthLogCreateInput = {
    userID: string
    eventType: $Enums.AuthLogEvent
    deviceID: string
    deviceName?: string | null
    deviceType?: $Enums.DeviceType | null
    performedBy?: $Enums.PerformedBy
    timestamp?: Date | string
    adminAction?: AdminActionCreateNestedOneWithoutAuthLogInput
  }

  export type AuthLogUncheckedCreateInput = {
    id?: number
    userID: string
    eventType: $Enums.AuthLogEvent
    deviceID: string
    deviceName?: string | null
    deviceType?: $Enums.DeviceType | null
    performedBy?: $Enums.PerformedBy
    timestamp?: Date | string
    adminAction?: AdminActionUncheckedCreateNestedOneWithoutAuthLogInput
  }

  export type AuthLogUpdateInput = {
    userID?: StringFieldUpdateOperationsInput | string
    eventType?: EnumAuthLogEventFieldUpdateOperationsInput | $Enums.AuthLogEvent
    deviceID?: StringFieldUpdateOperationsInput | string
    deviceName?: NullableStringFieldUpdateOperationsInput | string | null
    deviceType?: NullableEnumDeviceTypeFieldUpdateOperationsInput | $Enums.DeviceType | null
    performedBy?: EnumPerformedByFieldUpdateOperationsInput | $Enums.PerformedBy
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    adminAction?: AdminActionUpdateOneWithoutAuthLogNestedInput
  }

  export type AuthLogUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userID?: StringFieldUpdateOperationsInput | string
    eventType?: EnumAuthLogEventFieldUpdateOperationsInput | $Enums.AuthLogEvent
    deviceID?: StringFieldUpdateOperationsInput | string
    deviceName?: NullableStringFieldUpdateOperationsInput | string | null
    deviceType?: NullableEnumDeviceTypeFieldUpdateOperationsInput | $Enums.DeviceType | null
    performedBy?: EnumPerformedByFieldUpdateOperationsInput | $Enums.PerformedBy
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    adminAction?: AdminActionUncheckedUpdateOneWithoutAuthLogNestedInput
  }

  export type AuthLogCreateManyInput = {
    id?: number
    userID: string
    eventType: $Enums.AuthLogEvent
    deviceID: string
    deviceName?: string | null
    deviceType?: $Enums.DeviceType | null
    performedBy?: $Enums.PerformedBy
    timestamp?: Date | string
  }

  export type AuthLogUpdateManyMutationInput = {
    userID?: StringFieldUpdateOperationsInput | string
    eventType?: EnumAuthLogEventFieldUpdateOperationsInput | $Enums.AuthLogEvent
    deviceID?: StringFieldUpdateOperationsInput | string
    deviceName?: NullableStringFieldUpdateOperationsInput | string | null
    deviceType?: NullableEnumDeviceTypeFieldUpdateOperationsInput | $Enums.DeviceType | null
    performedBy?: EnumPerformedByFieldUpdateOperationsInput | $Enums.PerformedBy
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuthLogUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userID?: StringFieldUpdateOperationsInput | string
    eventType?: EnumAuthLogEventFieldUpdateOperationsInput | $Enums.AuthLogEvent
    deviceID?: StringFieldUpdateOperationsInput | string
    deviceName?: NullableStringFieldUpdateOperationsInput | string | null
    deviceType?: NullableEnumDeviceTypeFieldUpdateOperationsInput | $Enums.DeviceType | null
    performedBy?: EnumPerformedByFieldUpdateOperationsInput | $Enums.PerformedBy
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AdminActionCreateInput = {
    targetUserID?: string | null
    reason?: string | null
    filter: JsonNullValueInput | InputJsonValue
    authLog: AuthLogCreateNestedOneWithoutAdminActionInput
  }

  export type AdminActionUncheckedCreateInput = {
    id: number
    targetUserID?: string | null
    reason?: string | null
    filter: JsonNullValueInput | InputJsonValue
  }

  export type AdminActionUpdateInput = {
    targetUserID?: NullableStringFieldUpdateOperationsInput | string | null
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    filter?: JsonNullValueInput | InputJsonValue
    authLog?: AuthLogUpdateOneRequiredWithoutAdminActionNestedInput
  }

  export type AdminActionUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    targetUserID?: NullableStringFieldUpdateOperationsInput | string | null
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    filter?: JsonNullValueInput | InputJsonValue
  }

  export type AdminActionCreateManyInput = {
    id: number
    targetUserID?: string | null
    reason?: string | null
    filter: JsonNullValueInput | InputJsonValue
  }

  export type AdminActionUpdateManyMutationInput = {
    targetUserID?: NullableStringFieldUpdateOperationsInput | string | null
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    filter?: JsonNullValueInput | InputJsonValue
  }

  export type AdminActionUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    targetUserID?: NullableStringFieldUpdateOperationsInput | string | null
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    filter?: JsonNullValueInput | InputJsonValue
  }

  export type CounterCreateInput = {
    id: string
    seq?: number
  }

  export type CounterUncheckedCreateInput = {
    id: string
    seq?: number
  }

  export type CounterUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    seq?: IntFieldUpdateOperationsInput | number
  }

  export type CounterUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    seq?: IntFieldUpdateOperationsInput | number
  }

  export type CounterCreateManyInput = {
    id: string
    seq?: number
  }

  export type CounterUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    seq?: IntFieldUpdateOperationsInput | number
  }

  export type CounterUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    seq?: IntFieldUpdateOperationsInput | number
  }

  export type RateLimitCreateInput = {
    deviceID: string
    routeKey: string
    requestCount?: number
    lastRequestAt?: Date | string
  }

  export type RateLimitUncheckedCreateInput = {
    deviceID: string
    routeKey: string
    requestCount?: number
    lastRequestAt?: Date | string
  }

  export type RateLimitUpdateInput = {
    deviceID?: StringFieldUpdateOperationsInput | string
    routeKey?: StringFieldUpdateOperationsInput | string
    requestCount?: IntFieldUpdateOperationsInput | number
    lastRequestAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RateLimitUncheckedUpdateInput = {
    deviceID?: StringFieldUpdateOperationsInput | string
    routeKey?: StringFieldUpdateOperationsInput | string
    requestCount?: IntFieldUpdateOperationsInput | number
    lastRequestAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RateLimitCreateManyInput = {
    deviceID: string
    routeKey: string
    requestCount?: number
    lastRequestAt?: Date | string
  }

  export type RateLimitUpdateManyMutationInput = {
    deviceID?: StringFieldUpdateOperationsInput | string
    routeKey?: StringFieldUpdateOperationsInput | string
    requestCount?: IntFieldUpdateOperationsInput | number
    lastRequestAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RateLimitUncheckedUpdateManyInput = {
    deviceID?: StringFieldUpdateOperationsInput | string
    routeKey?: StringFieldUpdateOperationsInput | string
    requestCount?: IntFieldUpdateOperationsInput | number
    lastRequestAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DeviceBlockCreateInput = {
    deviceID: string
    isBlocked?: boolean
    blockedAt?: Date | string | null
    unblockedAt?: Date | string | null
    blockedBy?: string | null
    unblockedBy?: string | null
    blockReason?: $Enums.DeviceBlockReason | null
    unblockReason?: $Enums.DeviceUnblockReason | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DeviceBlockUncheckedCreateInput = {
    deviceID: string
    isBlocked?: boolean
    blockedAt?: Date | string | null
    unblockedAt?: Date | string | null
    blockedBy?: string | null
    unblockedBy?: string | null
    blockReason?: $Enums.DeviceBlockReason | null
    unblockReason?: $Enums.DeviceUnblockReason | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DeviceBlockUpdateInput = {
    deviceID?: StringFieldUpdateOperationsInput | string
    isBlocked?: BoolFieldUpdateOperationsInput | boolean
    blockedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    unblockedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    blockedBy?: NullableStringFieldUpdateOperationsInput | string | null
    unblockedBy?: NullableStringFieldUpdateOperationsInput | string | null
    blockReason?: NullableEnumDeviceBlockReasonFieldUpdateOperationsInput | $Enums.DeviceBlockReason | null
    unblockReason?: NullableEnumDeviceUnblockReasonFieldUpdateOperationsInput | $Enums.DeviceUnblockReason | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DeviceBlockUncheckedUpdateInput = {
    deviceID?: StringFieldUpdateOperationsInput | string
    isBlocked?: BoolFieldUpdateOperationsInput | boolean
    blockedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    unblockedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    blockedBy?: NullableStringFieldUpdateOperationsInput | string | null
    unblockedBy?: NullableStringFieldUpdateOperationsInput | string | null
    blockReason?: NullableEnumDeviceBlockReasonFieldUpdateOperationsInput | $Enums.DeviceBlockReason | null
    unblockReason?: NullableEnumDeviceUnblockReasonFieldUpdateOperationsInput | $Enums.DeviceUnblockReason | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DeviceBlockCreateManyInput = {
    deviceID: string
    isBlocked?: boolean
    blockedAt?: Date | string | null
    unblockedAt?: Date | string | null
    blockedBy?: string | null
    unblockedBy?: string | null
    blockReason?: $Enums.DeviceBlockReason | null
    unblockReason?: $Enums.DeviceUnblockReason | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DeviceBlockUpdateManyMutationInput = {
    deviceID?: StringFieldUpdateOperationsInput | string
    isBlocked?: BoolFieldUpdateOperationsInput | boolean
    blockedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    unblockedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    blockedBy?: NullableStringFieldUpdateOperationsInput | string | null
    unblockedBy?: NullableStringFieldUpdateOperationsInput | string | null
    blockReason?: NullableEnumDeviceBlockReasonFieldUpdateOperationsInput | $Enums.DeviceBlockReason | null
    unblockReason?: NullableEnumDeviceUnblockReasonFieldUpdateOperationsInput | $Enums.DeviceUnblockReason | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DeviceBlockUncheckedUpdateManyInput = {
    deviceID?: StringFieldUpdateOperationsInput | string
    isBlocked?: BoolFieldUpdateOperationsInput | boolean
    blockedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    unblockedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    blockedBy?: NullableStringFieldUpdateOperationsInput | string | null
    unblockedBy?: NullableStringFieldUpdateOperationsInput | string | null
    blockReason?: NullableEnumDeviceBlockReasonFieldUpdateOperationsInput | $Enums.DeviceBlockReason | null
    unblockReason?: NullableEnumDeviceUnblockReasonFieldUpdateOperationsInput | $Enums.DeviceUnblockReason | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type DeviceRateLimitCountOrderByAggregateInput = {
    deviceID?: SortOrder
    attempts?: SortOrder
    lastAttemptAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DeviceRateLimitAvgOrderByAggregateInput = {
    attempts?: SortOrder
  }

  export type DeviceRateLimitMaxOrderByAggregateInput = {
    deviceID?: SortOrder
    attempts?: SortOrder
    lastAttemptAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DeviceRateLimitMinOrderByAggregateInput = {
    deviceID?: SortOrder
    attempts?: SortOrder
    lastAttemptAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DeviceRateLimitSumOrderByAggregateInput = {
    attempts?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type EnumAuthLogEventFilter<$PrismaModel = never> = {
    equals?: $Enums.AuthLogEvent | EnumAuthLogEventFieldRefInput<$PrismaModel>
    in?: $Enums.AuthLogEvent[] | ListEnumAuthLogEventFieldRefInput<$PrismaModel>
    notIn?: $Enums.AuthLogEvent[] | ListEnumAuthLogEventFieldRefInput<$PrismaModel>
    not?: NestedEnumAuthLogEventFilter<$PrismaModel> | $Enums.AuthLogEvent
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type EnumDeviceTypeNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.DeviceType | EnumDeviceTypeFieldRefInput<$PrismaModel> | null
    in?: $Enums.DeviceType[] | ListEnumDeviceTypeFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.DeviceType[] | ListEnumDeviceTypeFieldRefInput<$PrismaModel> | null
    not?: NestedEnumDeviceTypeNullableFilter<$PrismaModel> | $Enums.DeviceType | null
  }

  export type EnumPerformedByFilter<$PrismaModel = never> = {
    equals?: $Enums.PerformedBy | EnumPerformedByFieldRefInput<$PrismaModel>
    in?: $Enums.PerformedBy[] | ListEnumPerformedByFieldRefInput<$PrismaModel>
    notIn?: $Enums.PerformedBy[] | ListEnumPerformedByFieldRefInput<$PrismaModel>
    not?: NestedEnumPerformedByFilter<$PrismaModel> | $Enums.PerformedBy
  }

  export type AdminActionNullableScalarRelationFilter = {
    is?: AdminActionWhereInput | null
    isNot?: AdminActionWhereInput | null
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type AuthLogCountOrderByAggregateInput = {
    id?: SortOrder
    userID?: SortOrder
    eventType?: SortOrder
    deviceID?: SortOrder
    deviceName?: SortOrder
    deviceType?: SortOrder
    performedBy?: SortOrder
    timestamp?: SortOrder
  }

  export type AuthLogAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type AuthLogMaxOrderByAggregateInput = {
    id?: SortOrder
    userID?: SortOrder
    eventType?: SortOrder
    deviceID?: SortOrder
    deviceName?: SortOrder
    deviceType?: SortOrder
    performedBy?: SortOrder
    timestamp?: SortOrder
  }

  export type AuthLogMinOrderByAggregateInput = {
    id?: SortOrder
    userID?: SortOrder
    eventType?: SortOrder
    deviceID?: SortOrder
    deviceName?: SortOrder
    deviceType?: SortOrder
    performedBy?: SortOrder
    timestamp?: SortOrder
  }

  export type AuthLogSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type EnumAuthLogEventWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AuthLogEvent | EnumAuthLogEventFieldRefInput<$PrismaModel>
    in?: $Enums.AuthLogEvent[] | ListEnumAuthLogEventFieldRefInput<$PrismaModel>
    notIn?: $Enums.AuthLogEvent[] | ListEnumAuthLogEventFieldRefInput<$PrismaModel>
    not?: NestedEnumAuthLogEventWithAggregatesFilter<$PrismaModel> | $Enums.AuthLogEvent
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAuthLogEventFilter<$PrismaModel>
    _max?: NestedEnumAuthLogEventFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type EnumDeviceTypeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.DeviceType | EnumDeviceTypeFieldRefInput<$PrismaModel> | null
    in?: $Enums.DeviceType[] | ListEnumDeviceTypeFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.DeviceType[] | ListEnumDeviceTypeFieldRefInput<$PrismaModel> | null
    not?: NestedEnumDeviceTypeNullableWithAggregatesFilter<$PrismaModel> | $Enums.DeviceType | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumDeviceTypeNullableFilter<$PrismaModel>
    _max?: NestedEnumDeviceTypeNullableFilter<$PrismaModel>
  }

  export type EnumPerformedByWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PerformedBy | EnumPerformedByFieldRefInput<$PrismaModel>
    in?: $Enums.PerformedBy[] | ListEnumPerformedByFieldRefInput<$PrismaModel>
    notIn?: $Enums.PerformedBy[] | ListEnumPerformedByFieldRefInput<$PrismaModel>
    not?: NestedEnumPerformedByWithAggregatesFilter<$PrismaModel> | $Enums.PerformedBy
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPerformedByFilter<$PrismaModel>
    _max?: NestedEnumPerformedByFilter<$PrismaModel>
  }
  export type JsonFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonFilterBase<$PrismaModel>>, 'path'>>

  export type JsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type AuthLogScalarRelationFilter = {
    is?: AuthLogWhereInput
    isNot?: AuthLogWhereInput
  }

  export type AdminActionCountOrderByAggregateInput = {
    id?: SortOrder
    targetUserID?: SortOrder
    reason?: SortOrder
    filter?: SortOrder
  }

  export type AdminActionAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type AdminActionMaxOrderByAggregateInput = {
    id?: SortOrder
    targetUserID?: SortOrder
    reason?: SortOrder
  }

  export type AdminActionMinOrderByAggregateInput = {
    id?: SortOrder
    targetUserID?: SortOrder
    reason?: SortOrder
  }

  export type AdminActionSumOrderByAggregateInput = {
    id?: SortOrder
  }
  export type JsonWithAggregatesFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedJsonFilter<$PrismaModel>
    _max?: NestedJsonFilter<$PrismaModel>
  }

  export type CounterCountOrderByAggregateInput = {
    id?: SortOrder
    seq?: SortOrder
  }

  export type CounterAvgOrderByAggregateInput = {
    seq?: SortOrder
  }

  export type CounterMaxOrderByAggregateInput = {
    id?: SortOrder
    seq?: SortOrder
  }

  export type CounterMinOrderByAggregateInput = {
    id?: SortOrder
    seq?: SortOrder
  }

  export type CounterSumOrderByAggregateInput = {
    seq?: SortOrder
  }

  export type RateLimitDeviceIDRouteKeyCompoundUniqueInput = {
    deviceID: string
    routeKey: string
  }

  export type RateLimitCountOrderByAggregateInput = {
    deviceID?: SortOrder
    routeKey?: SortOrder
    requestCount?: SortOrder
    lastRequestAt?: SortOrder
  }

  export type RateLimitAvgOrderByAggregateInput = {
    requestCount?: SortOrder
  }

  export type RateLimitMaxOrderByAggregateInput = {
    deviceID?: SortOrder
    routeKey?: SortOrder
    requestCount?: SortOrder
    lastRequestAt?: SortOrder
  }

  export type RateLimitMinOrderByAggregateInput = {
    deviceID?: SortOrder
    routeKey?: SortOrder
    requestCount?: SortOrder
    lastRequestAt?: SortOrder
  }

  export type RateLimitSumOrderByAggregateInput = {
    requestCount?: SortOrder
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type EnumDeviceBlockReasonNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.DeviceBlockReason | EnumDeviceBlockReasonFieldRefInput<$PrismaModel> | null
    in?: $Enums.DeviceBlockReason[] | ListEnumDeviceBlockReasonFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.DeviceBlockReason[] | ListEnumDeviceBlockReasonFieldRefInput<$PrismaModel> | null
    not?: NestedEnumDeviceBlockReasonNullableFilter<$PrismaModel> | $Enums.DeviceBlockReason | null
  }

  export type EnumDeviceUnblockReasonNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.DeviceUnblockReason | EnumDeviceUnblockReasonFieldRefInput<$PrismaModel> | null
    in?: $Enums.DeviceUnblockReason[] | ListEnumDeviceUnblockReasonFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.DeviceUnblockReason[] | ListEnumDeviceUnblockReasonFieldRefInput<$PrismaModel> | null
    not?: NestedEnumDeviceUnblockReasonNullableFilter<$PrismaModel> | $Enums.DeviceUnblockReason | null
  }

  export type DeviceBlockCountOrderByAggregateInput = {
    deviceID?: SortOrder
    isBlocked?: SortOrder
    blockedAt?: SortOrder
    unblockedAt?: SortOrder
    blockedBy?: SortOrder
    unblockedBy?: SortOrder
    blockReason?: SortOrder
    unblockReason?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DeviceBlockMaxOrderByAggregateInput = {
    deviceID?: SortOrder
    isBlocked?: SortOrder
    blockedAt?: SortOrder
    unblockedAt?: SortOrder
    blockedBy?: SortOrder
    unblockedBy?: SortOrder
    blockReason?: SortOrder
    unblockReason?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DeviceBlockMinOrderByAggregateInput = {
    deviceID?: SortOrder
    isBlocked?: SortOrder
    blockedAt?: SortOrder
    unblockedAt?: SortOrder
    blockedBy?: SortOrder
    unblockedBy?: SortOrder
    blockReason?: SortOrder
    unblockReason?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type EnumDeviceBlockReasonNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.DeviceBlockReason | EnumDeviceBlockReasonFieldRefInput<$PrismaModel> | null
    in?: $Enums.DeviceBlockReason[] | ListEnumDeviceBlockReasonFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.DeviceBlockReason[] | ListEnumDeviceBlockReasonFieldRefInput<$PrismaModel> | null
    not?: NestedEnumDeviceBlockReasonNullableWithAggregatesFilter<$PrismaModel> | $Enums.DeviceBlockReason | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumDeviceBlockReasonNullableFilter<$PrismaModel>
    _max?: NestedEnumDeviceBlockReasonNullableFilter<$PrismaModel>
  }

  export type EnumDeviceUnblockReasonNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.DeviceUnblockReason | EnumDeviceUnblockReasonFieldRefInput<$PrismaModel> | null
    in?: $Enums.DeviceUnblockReason[] | ListEnumDeviceUnblockReasonFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.DeviceUnblockReason[] | ListEnumDeviceUnblockReasonFieldRefInput<$PrismaModel> | null
    not?: NestedEnumDeviceUnblockReasonNullableWithAggregatesFilter<$PrismaModel> | $Enums.DeviceUnblockReason | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumDeviceUnblockReasonNullableFilter<$PrismaModel>
    _max?: NestedEnumDeviceUnblockReasonNullableFilter<$PrismaModel>
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type AdminActionCreateNestedOneWithoutAuthLogInput = {
    create?: XOR<AdminActionCreateWithoutAuthLogInput, AdminActionUncheckedCreateWithoutAuthLogInput>
    connectOrCreate?: AdminActionCreateOrConnectWithoutAuthLogInput
    connect?: AdminActionWhereUniqueInput
  }

  export type AdminActionUncheckedCreateNestedOneWithoutAuthLogInput = {
    create?: XOR<AdminActionCreateWithoutAuthLogInput, AdminActionUncheckedCreateWithoutAuthLogInput>
    connectOrCreate?: AdminActionCreateOrConnectWithoutAuthLogInput
    connect?: AdminActionWhereUniqueInput
  }

  export type EnumAuthLogEventFieldUpdateOperationsInput = {
    set?: $Enums.AuthLogEvent
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type NullableEnumDeviceTypeFieldUpdateOperationsInput = {
    set?: $Enums.DeviceType | null
  }

  export type EnumPerformedByFieldUpdateOperationsInput = {
    set?: $Enums.PerformedBy
  }

  export type AdminActionUpdateOneWithoutAuthLogNestedInput = {
    create?: XOR<AdminActionCreateWithoutAuthLogInput, AdminActionUncheckedCreateWithoutAuthLogInput>
    connectOrCreate?: AdminActionCreateOrConnectWithoutAuthLogInput
    upsert?: AdminActionUpsertWithoutAuthLogInput
    disconnect?: AdminActionWhereInput | boolean
    delete?: AdminActionWhereInput | boolean
    connect?: AdminActionWhereUniqueInput
    update?: XOR<XOR<AdminActionUpdateToOneWithWhereWithoutAuthLogInput, AdminActionUpdateWithoutAuthLogInput>, AdminActionUncheckedUpdateWithoutAuthLogInput>
  }

  export type AdminActionUncheckedUpdateOneWithoutAuthLogNestedInput = {
    create?: XOR<AdminActionCreateWithoutAuthLogInput, AdminActionUncheckedCreateWithoutAuthLogInput>
    connectOrCreate?: AdminActionCreateOrConnectWithoutAuthLogInput
    upsert?: AdminActionUpsertWithoutAuthLogInput
    disconnect?: AdminActionWhereInput | boolean
    delete?: AdminActionWhereInput | boolean
    connect?: AdminActionWhereUniqueInput
    update?: XOR<XOR<AdminActionUpdateToOneWithWhereWithoutAuthLogInput, AdminActionUpdateWithoutAuthLogInput>, AdminActionUncheckedUpdateWithoutAuthLogInput>
  }

  export type AuthLogCreateNestedOneWithoutAdminActionInput = {
    create?: XOR<AuthLogCreateWithoutAdminActionInput, AuthLogUncheckedCreateWithoutAdminActionInput>
    connectOrCreate?: AuthLogCreateOrConnectWithoutAdminActionInput
    connect?: AuthLogWhereUniqueInput
  }

  export type AuthLogUpdateOneRequiredWithoutAdminActionNestedInput = {
    create?: XOR<AuthLogCreateWithoutAdminActionInput, AuthLogUncheckedCreateWithoutAdminActionInput>
    connectOrCreate?: AuthLogCreateOrConnectWithoutAdminActionInput
    upsert?: AuthLogUpsertWithoutAdminActionInput
    connect?: AuthLogWhereUniqueInput
    update?: XOR<XOR<AuthLogUpdateToOneWithWhereWithoutAdminActionInput, AuthLogUpdateWithoutAdminActionInput>, AuthLogUncheckedUpdateWithoutAdminActionInput>
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type NullableEnumDeviceBlockReasonFieldUpdateOperationsInput = {
    set?: $Enums.DeviceBlockReason | null
  }

  export type NullableEnumDeviceUnblockReasonFieldUpdateOperationsInput = {
    set?: $Enums.DeviceUnblockReason | null
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedEnumAuthLogEventFilter<$PrismaModel = never> = {
    equals?: $Enums.AuthLogEvent | EnumAuthLogEventFieldRefInput<$PrismaModel>
    in?: $Enums.AuthLogEvent[] | ListEnumAuthLogEventFieldRefInput<$PrismaModel>
    notIn?: $Enums.AuthLogEvent[] | ListEnumAuthLogEventFieldRefInput<$PrismaModel>
    not?: NestedEnumAuthLogEventFilter<$PrismaModel> | $Enums.AuthLogEvent
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedEnumDeviceTypeNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.DeviceType | EnumDeviceTypeFieldRefInput<$PrismaModel> | null
    in?: $Enums.DeviceType[] | ListEnumDeviceTypeFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.DeviceType[] | ListEnumDeviceTypeFieldRefInput<$PrismaModel> | null
    not?: NestedEnumDeviceTypeNullableFilter<$PrismaModel> | $Enums.DeviceType | null
  }

  export type NestedEnumPerformedByFilter<$PrismaModel = never> = {
    equals?: $Enums.PerformedBy | EnumPerformedByFieldRefInput<$PrismaModel>
    in?: $Enums.PerformedBy[] | ListEnumPerformedByFieldRefInput<$PrismaModel>
    notIn?: $Enums.PerformedBy[] | ListEnumPerformedByFieldRefInput<$PrismaModel>
    not?: NestedEnumPerformedByFilter<$PrismaModel> | $Enums.PerformedBy
  }

  export type NestedEnumAuthLogEventWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AuthLogEvent | EnumAuthLogEventFieldRefInput<$PrismaModel>
    in?: $Enums.AuthLogEvent[] | ListEnumAuthLogEventFieldRefInput<$PrismaModel>
    notIn?: $Enums.AuthLogEvent[] | ListEnumAuthLogEventFieldRefInput<$PrismaModel>
    not?: NestedEnumAuthLogEventWithAggregatesFilter<$PrismaModel> | $Enums.AuthLogEvent
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAuthLogEventFilter<$PrismaModel>
    _max?: NestedEnumAuthLogEventFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedEnumDeviceTypeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.DeviceType | EnumDeviceTypeFieldRefInput<$PrismaModel> | null
    in?: $Enums.DeviceType[] | ListEnumDeviceTypeFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.DeviceType[] | ListEnumDeviceTypeFieldRefInput<$PrismaModel> | null
    not?: NestedEnumDeviceTypeNullableWithAggregatesFilter<$PrismaModel> | $Enums.DeviceType | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumDeviceTypeNullableFilter<$PrismaModel>
    _max?: NestedEnumDeviceTypeNullableFilter<$PrismaModel>
  }

  export type NestedEnumPerformedByWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PerformedBy | EnumPerformedByFieldRefInput<$PrismaModel>
    in?: $Enums.PerformedBy[] | ListEnumPerformedByFieldRefInput<$PrismaModel>
    notIn?: $Enums.PerformedBy[] | ListEnumPerformedByFieldRefInput<$PrismaModel>
    not?: NestedEnumPerformedByWithAggregatesFilter<$PrismaModel> | $Enums.PerformedBy
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPerformedByFilter<$PrismaModel>
    _max?: NestedEnumPerformedByFilter<$PrismaModel>
  }
  export type NestedJsonFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<NestedJsonFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedEnumDeviceBlockReasonNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.DeviceBlockReason | EnumDeviceBlockReasonFieldRefInput<$PrismaModel> | null
    in?: $Enums.DeviceBlockReason[] | ListEnumDeviceBlockReasonFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.DeviceBlockReason[] | ListEnumDeviceBlockReasonFieldRefInput<$PrismaModel> | null
    not?: NestedEnumDeviceBlockReasonNullableFilter<$PrismaModel> | $Enums.DeviceBlockReason | null
  }

  export type NestedEnumDeviceUnblockReasonNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.DeviceUnblockReason | EnumDeviceUnblockReasonFieldRefInput<$PrismaModel> | null
    in?: $Enums.DeviceUnblockReason[] | ListEnumDeviceUnblockReasonFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.DeviceUnblockReason[] | ListEnumDeviceUnblockReasonFieldRefInput<$PrismaModel> | null
    not?: NestedEnumDeviceUnblockReasonNullableFilter<$PrismaModel> | $Enums.DeviceUnblockReason | null
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedEnumDeviceBlockReasonNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.DeviceBlockReason | EnumDeviceBlockReasonFieldRefInput<$PrismaModel> | null
    in?: $Enums.DeviceBlockReason[] | ListEnumDeviceBlockReasonFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.DeviceBlockReason[] | ListEnumDeviceBlockReasonFieldRefInput<$PrismaModel> | null
    not?: NestedEnumDeviceBlockReasonNullableWithAggregatesFilter<$PrismaModel> | $Enums.DeviceBlockReason | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumDeviceBlockReasonNullableFilter<$PrismaModel>
    _max?: NestedEnumDeviceBlockReasonNullableFilter<$PrismaModel>
  }

  export type NestedEnumDeviceUnblockReasonNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.DeviceUnblockReason | EnumDeviceUnblockReasonFieldRefInput<$PrismaModel> | null
    in?: $Enums.DeviceUnblockReason[] | ListEnumDeviceUnblockReasonFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.DeviceUnblockReason[] | ListEnumDeviceUnblockReasonFieldRefInput<$PrismaModel> | null
    not?: NestedEnumDeviceUnblockReasonNullableWithAggregatesFilter<$PrismaModel> | $Enums.DeviceUnblockReason | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumDeviceUnblockReasonNullableFilter<$PrismaModel>
    _max?: NestedEnumDeviceUnblockReasonNullableFilter<$PrismaModel>
  }

  export type AdminActionCreateWithoutAuthLogInput = {
    targetUserID?: string | null
    reason?: string | null
    filter: JsonNullValueInput | InputJsonValue
  }

  export type AdminActionUncheckedCreateWithoutAuthLogInput = {
    targetUserID?: string | null
    reason?: string | null
    filter: JsonNullValueInput | InputJsonValue
  }

  export type AdminActionCreateOrConnectWithoutAuthLogInput = {
    where: AdminActionWhereUniqueInput
    create: XOR<AdminActionCreateWithoutAuthLogInput, AdminActionUncheckedCreateWithoutAuthLogInput>
  }

  export type AdminActionUpsertWithoutAuthLogInput = {
    update: XOR<AdminActionUpdateWithoutAuthLogInput, AdminActionUncheckedUpdateWithoutAuthLogInput>
    create: XOR<AdminActionCreateWithoutAuthLogInput, AdminActionUncheckedCreateWithoutAuthLogInput>
    where?: AdminActionWhereInput
  }

  export type AdminActionUpdateToOneWithWhereWithoutAuthLogInput = {
    where?: AdminActionWhereInput
    data: XOR<AdminActionUpdateWithoutAuthLogInput, AdminActionUncheckedUpdateWithoutAuthLogInput>
  }

  export type AdminActionUpdateWithoutAuthLogInput = {
    targetUserID?: NullableStringFieldUpdateOperationsInput | string | null
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    filter?: JsonNullValueInput | InputJsonValue
  }

  export type AdminActionUncheckedUpdateWithoutAuthLogInput = {
    targetUserID?: NullableStringFieldUpdateOperationsInput | string | null
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    filter?: JsonNullValueInput | InputJsonValue
  }

  export type AuthLogCreateWithoutAdminActionInput = {
    userID: string
    eventType: $Enums.AuthLogEvent
    deviceID: string
    deviceName?: string | null
    deviceType?: $Enums.DeviceType | null
    performedBy?: $Enums.PerformedBy
    timestamp?: Date | string
  }

  export type AuthLogUncheckedCreateWithoutAdminActionInput = {
    id?: number
    userID: string
    eventType: $Enums.AuthLogEvent
    deviceID: string
    deviceName?: string | null
    deviceType?: $Enums.DeviceType | null
    performedBy?: $Enums.PerformedBy
    timestamp?: Date | string
  }

  export type AuthLogCreateOrConnectWithoutAdminActionInput = {
    where: AuthLogWhereUniqueInput
    create: XOR<AuthLogCreateWithoutAdminActionInput, AuthLogUncheckedCreateWithoutAdminActionInput>
  }

  export type AuthLogUpsertWithoutAdminActionInput = {
    update: XOR<AuthLogUpdateWithoutAdminActionInput, AuthLogUncheckedUpdateWithoutAdminActionInput>
    create: XOR<AuthLogCreateWithoutAdminActionInput, AuthLogUncheckedCreateWithoutAdminActionInput>
    where?: AuthLogWhereInput
  }

  export type AuthLogUpdateToOneWithWhereWithoutAdminActionInput = {
    where?: AuthLogWhereInput
    data: XOR<AuthLogUpdateWithoutAdminActionInput, AuthLogUncheckedUpdateWithoutAdminActionInput>
  }

  export type AuthLogUpdateWithoutAdminActionInput = {
    userID?: StringFieldUpdateOperationsInput | string
    eventType?: EnumAuthLogEventFieldUpdateOperationsInput | $Enums.AuthLogEvent
    deviceID?: StringFieldUpdateOperationsInput | string
    deviceName?: NullableStringFieldUpdateOperationsInput | string | null
    deviceType?: NullableEnumDeviceTypeFieldUpdateOperationsInput | $Enums.DeviceType | null
    performedBy?: EnumPerformedByFieldUpdateOperationsInput | $Enums.PerformedBy
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuthLogUncheckedUpdateWithoutAdminActionInput = {
    id?: IntFieldUpdateOperationsInput | number
    userID?: StringFieldUpdateOperationsInput | string
    eventType?: EnumAuthLogEventFieldUpdateOperationsInput | $Enums.AuthLogEvent
    deviceID?: StringFieldUpdateOperationsInput | string
    deviceName?: NullableStringFieldUpdateOperationsInput | string | null
    deviceType?: NullableEnumDeviceTypeFieldUpdateOperationsInput | $Enums.DeviceType | null
    performedBy?: EnumPerformedByFieldUpdateOperationsInput | $Enums.PerformedBy
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}