
/**
 * Client
**/

import * as runtime from './runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model DeviceRateLimit
 * 
 */
export type DeviceRateLimit = $Result.DefaultSelection<Prisma.$DeviceRateLimitPayload>
/**
 * Model AuthLogSchema
 * 
 */
export type AuthLogSchema = $Result.DefaultSelection<Prisma.$AuthLogSchemaPayload>
/**
 * Model AdminAction
 * 
 */
export type AdminAction = $Result.DefaultSelection<Prisma.$AdminActionPayload>
/**
 * Model counterSchema
 * 
 */
export type counterSchema = $Result.DefaultSelection<Prisma.$counterSchemaPayload>
/**
 * Model rateLimitSchema
 * 
 */
export type rateLimitSchema = $Result.DefaultSelection<Prisma.$rateLimitSchemaPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const AuthLogEvent: {
  LOGIN: 'LOGIN',
  LOGOUT_ALL_DEVICE: 'LOGOUT_ALL_DEVICE',
  ACTIVATE: 'ACTIVATE',
  DEACTIVATE: 'DEACTIVATE',
  BLOCKED: 'BLOCKED',
  UNBLOCKED: 'UNBLOCKED',
  CHANGE_PASSWORD: 'CHANGE_PASSWORD',
  REGISTER: 'REGISTER',
  LOGOUT_SPECIFIC_DEVICE: 'LOGOUT_SPECIFIC_DEVICE',
  CHECK_AUTH_LOGS: 'CHECK_AUTH_LOGS',
  GET_USER_ACTIVE_DEVICES: 'GET_USER_ACTIVE_DEVICES',
  GET_MY_ACTIVE_DEVICES: 'GET_MY_ACTIVE_DEVICES',
  ACCESS_TOKEN: 'ACCESS_TOKEN',
  REFRESH_TOKEN: 'REFRESH_TOKEN',
  UPDATE_ACCOUNT_DETAILS: 'UPDATE_ACCOUNT_DETAILS',
  PROVIDE_USER_ACCOUNT_DETAILS: 'PROVIDE_USER_ACCOUNT_DETAILS',
  PROVIDE_MY_ACCOUNT_DETAILS: 'PROVIDE_MY_ACCOUNT_DETAILS',
  GET_TOTAL_REGISTERED_USERS: 'GET_TOTAL_REGISTERED_USERS',
  SET_REFRESH_TOKEN_FOR_ADMIN: 'SET_REFRESH_TOKEN_FOR_ADMIN',
  CLEAN_UP_DEACTIVATED_USER: 'CLEAN_UP_DEACTIVATED_USER',
  CLEAN_UP_AUTH_LOGS: 'CLEAN_UP_AUTH_LOGS'
};

export type AuthLogEvent = (typeof AuthLogEvent)[keyof typeof AuthLogEvent]


export const DeviceType: {
  LAPTOP: 'LAPTOP',
  MOBILE: 'MOBILE',
  TABLET: 'TABLET'
};

export type DeviceType = (typeof DeviceType)[keyof typeof DeviceType]


export const PerformedBy: {
  CUSTOMER: 'CUSTOMER',
  ADMIN: 'ADMIN',
  SYSTEM: 'SYSTEM'
};

export type PerformedBy = (typeof PerformedBy)[keyof typeof PerformedBy]

}

export type AuthLogEvent = $Enums.AuthLogEvent

export const AuthLogEvent: typeof $Enums.AuthLogEvent

export type DeviceType = $Enums.DeviceType

export const DeviceType: typeof $Enums.DeviceType

export type PerformedBy = $Enums.PerformedBy

export const PerformedBy: typeof $Enums.PerformedBy

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more DeviceRateLimits
 * const deviceRateLimits = await prisma.deviceRateLimit.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more DeviceRateLimits
   * const deviceRateLimits = await prisma.deviceRateLimit.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.deviceRateLimit`: Exposes CRUD operations for the **DeviceRateLimit** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more DeviceRateLimits
    * const deviceRateLimits = await prisma.deviceRateLimit.findMany()
    * ```
    */
  get deviceRateLimit(): Prisma.DeviceRateLimitDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.authLogSchema`: Exposes CRUD operations for the **AuthLogSchema** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AuthLogSchemas
    * const authLogSchemas = await prisma.authLogSchema.findMany()
    * ```
    */
  get authLogSchema(): Prisma.AuthLogSchemaDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.adminAction`: Exposes CRUD operations for the **AdminAction** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AdminActions
    * const adminActions = await prisma.adminAction.findMany()
    * ```
    */
  get adminAction(): Prisma.AdminActionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.counterSchema`: Exposes CRUD operations for the **counterSchema** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CounterSchemas
    * const counterSchemas = await prisma.counterSchema.findMany()
    * ```
    */
  get counterSchema(): Prisma.counterSchemaDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.rateLimitSchema`: Exposes CRUD operations for the **rateLimitSchema** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more RateLimitSchemas
    * const rateLimitSchemas = await prisma.rateLimitSchema.findMany()
    * ```
    */
  get rateLimitSchema(): Prisma.rateLimitSchemaDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.11.1
   * Query Engine version: f40f79ec31188888a2e33acda0ecc8fd10a853a9
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    DeviceRateLimit: 'DeviceRateLimit',
    AuthLogSchema: 'AuthLogSchema',
    AdminAction: 'AdminAction',
    counterSchema: 'counterSchema',
    rateLimitSchema: 'rateLimitSchema'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "deviceRateLimit" | "authLogSchema" | "adminAction" | "counterSchema" | "rateLimitSchema"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      DeviceRateLimit: {
        payload: Prisma.$DeviceRateLimitPayload<ExtArgs>
        fields: Prisma.DeviceRateLimitFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DeviceRateLimitFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DeviceRateLimitPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DeviceRateLimitFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DeviceRateLimitPayload>
          }
          findFirst: {
            args: Prisma.DeviceRateLimitFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DeviceRateLimitPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DeviceRateLimitFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DeviceRateLimitPayload>
          }
          findMany: {
            args: Prisma.DeviceRateLimitFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DeviceRateLimitPayload>[]
          }
          create: {
            args: Prisma.DeviceRateLimitCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DeviceRateLimitPayload>
          }
          createMany: {
            args: Prisma.DeviceRateLimitCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.DeviceRateLimitCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DeviceRateLimitPayload>[]
          }
          delete: {
            args: Prisma.DeviceRateLimitDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DeviceRateLimitPayload>
          }
          update: {
            args: Prisma.DeviceRateLimitUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DeviceRateLimitPayload>
          }
          deleteMany: {
            args: Prisma.DeviceRateLimitDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DeviceRateLimitUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.DeviceRateLimitUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DeviceRateLimitPayload>[]
          }
          upsert: {
            args: Prisma.DeviceRateLimitUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DeviceRateLimitPayload>
          }
          aggregate: {
            args: Prisma.DeviceRateLimitAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDeviceRateLimit>
          }
          groupBy: {
            args: Prisma.DeviceRateLimitGroupByArgs<ExtArgs>
            result: $Utils.Optional<DeviceRateLimitGroupByOutputType>[]
          }
          count: {
            args: Prisma.DeviceRateLimitCountArgs<ExtArgs>
            result: $Utils.Optional<DeviceRateLimitCountAggregateOutputType> | number
          }
        }
      }
      AuthLogSchema: {
        payload: Prisma.$AuthLogSchemaPayload<ExtArgs>
        fields: Prisma.AuthLogSchemaFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AuthLogSchemaFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuthLogSchemaPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AuthLogSchemaFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuthLogSchemaPayload>
          }
          findFirst: {
            args: Prisma.AuthLogSchemaFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuthLogSchemaPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AuthLogSchemaFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuthLogSchemaPayload>
          }
          findMany: {
            args: Prisma.AuthLogSchemaFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuthLogSchemaPayload>[]
          }
          create: {
            args: Prisma.AuthLogSchemaCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuthLogSchemaPayload>
          }
          createMany: {
            args: Prisma.AuthLogSchemaCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AuthLogSchemaCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuthLogSchemaPayload>[]
          }
          delete: {
            args: Prisma.AuthLogSchemaDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuthLogSchemaPayload>
          }
          update: {
            args: Prisma.AuthLogSchemaUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuthLogSchemaPayload>
          }
          deleteMany: {
            args: Prisma.AuthLogSchemaDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AuthLogSchemaUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AuthLogSchemaUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuthLogSchemaPayload>[]
          }
          upsert: {
            args: Prisma.AuthLogSchemaUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuthLogSchemaPayload>
          }
          aggregate: {
            args: Prisma.AuthLogSchemaAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAuthLogSchema>
          }
          groupBy: {
            args: Prisma.AuthLogSchemaGroupByArgs<ExtArgs>
            result: $Utils.Optional<AuthLogSchemaGroupByOutputType>[]
          }
          count: {
            args: Prisma.AuthLogSchemaCountArgs<ExtArgs>
            result: $Utils.Optional<AuthLogSchemaCountAggregateOutputType> | number
          }
        }
      }
      AdminAction: {
        payload: Prisma.$AdminActionPayload<ExtArgs>
        fields: Prisma.AdminActionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AdminActionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminActionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AdminActionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminActionPayload>
          }
          findFirst: {
            args: Prisma.AdminActionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminActionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AdminActionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminActionPayload>
          }
          findMany: {
            args: Prisma.AdminActionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminActionPayload>[]
          }
          create: {
            args: Prisma.AdminActionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminActionPayload>
          }
          createMany: {
            args: Prisma.AdminActionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AdminActionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminActionPayload>[]
          }
          delete: {
            args: Prisma.AdminActionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminActionPayload>
          }
          update: {
            args: Prisma.AdminActionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminActionPayload>
          }
          deleteMany: {
            args: Prisma.AdminActionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AdminActionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AdminActionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminActionPayload>[]
          }
          upsert: {
            args: Prisma.AdminActionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminActionPayload>
          }
          aggregate: {
            args: Prisma.AdminActionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAdminAction>
          }
          groupBy: {
            args: Prisma.AdminActionGroupByArgs<ExtArgs>
            result: $Utils.Optional<AdminActionGroupByOutputType>[]
          }
          count: {
            args: Prisma.AdminActionCountArgs<ExtArgs>
            result: $Utils.Optional<AdminActionCountAggregateOutputType> | number
          }
        }
      }
      counterSchema: {
        payload: Prisma.$counterSchemaPayload<ExtArgs>
        fields: Prisma.counterSchemaFieldRefs
        operations: {
          findUnique: {
            args: Prisma.counterSchemaFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$counterSchemaPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.counterSchemaFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$counterSchemaPayload>
          }
          findFirst: {
            args: Prisma.counterSchemaFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$counterSchemaPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.counterSchemaFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$counterSchemaPayload>
          }
          findMany: {
            args: Prisma.counterSchemaFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$counterSchemaPayload>[]
          }
          create: {
            args: Prisma.counterSchemaCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$counterSchemaPayload>
          }
          createMany: {
            args: Prisma.counterSchemaCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.counterSchemaCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$counterSchemaPayload>[]
          }
          delete: {
            args: Prisma.counterSchemaDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$counterSchemaPayload>
          }
          update: {
            args: Prisma.counterSchemaUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$counterSchemaPayload>
          }
          deleteMany: {
            args: Prisma.counterSchemaDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.counterSchemaUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.counterSchemaUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$counterSchemaPayload>[]
          }
          upsert: {
            args: Prisma.counterSchemaUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$counterSchemaPayload>
          }
          aggregate: {
            args: Prisma.CounterSchemaAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCounterSchema>
          }
          groupBy: {
            args: Prisma.counterSchemaGroupByArgs<ExtArgs>
            result: $Utils.Optional<CounterSchemaGroupByOutputType>[]
          }
          count: {
            args: Prisma.counterSchemaCountArgs<ExtArgs>
            result: $Utils.Optional<CounterSchemaCountAggregateOutputType> | number
          }
        }
      }
      rateLimitSchema: {
        payload: Prisma.$rateLimitSchemaPayload<ExtArgs>
        fields: Prisma.rateLimitSchemaFieldRefs
        operations: {
          findUnique: {
            args: Prisma.rateLimitSchemaFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$rateLimitSchemaPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.rateLimitSchemaFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$rateLimitSchemaPayload>
          }
          findFirst: {
            args: Prisma.rateLimitSchemaFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$rateLimitSchemaPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.rateLimitSchemaFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$rateLimitSchemaPayload>
          }
          findMany: {
            args: Prisma.rateLimitSchemaFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$rateLimitSchemaPayload>[]
          }
          create: {
            args: Prisma.rateLimitSchemaCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$rateLimitSchemaPayload>
          }
          createMany: {
            args: Prisma.rateLimitSchemaCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.rateLimitSchemaCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$rateLimitSchemaPayload>[]
          }
          delete: {
            args: Prisma.rateLimitSchemaDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$rateLimitSchemaPayload>
          }
          update: {
            args: Prisma.rateLimitSchemaUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$rateLimitSchemaPayload>
          }
          deleteMany: {
            args: Prisma.rateLimitSchemaDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.rateLimitSchemaUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.rateLimitSchemaUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$rateLimitSchemaPayload>[]
          }
          upsert: {
            args: Prisma.rateLimitSchemaUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$rateLimitSchemaPayload>
          }
          aggregate: {
            args: Prisma.RateLimitSchemaAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRateLimitSchema>
          }
          groupBy: {
            args: Prisma.rateLimitSchemaGroupByArgs<ExtArgs>
            result: $Utils.Optional<RateLimitSchemaGroupByOutputType>[]
          }
          count: {
            args: Prisma.rateLimitSchemaCountArgs<ExtArgs>
            result: $Utils.Optional<RateLimitSchemaCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    deviceRateLimit?: DeviceRateLimitOmit
    authLogSchema?: AuthLogSchemaOmit
    adminAction?: AdminActionOmit
    counterSchema?: counterSchemaOmit
    rateLimitSchema?: rateLimitSchemaOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */



  /**
   * Models
   */

  /**
   * Model DeviceRateLimit
   */

  export type AggregateDeviceRateLimit = {
    _count: DeviceRateLimitCountAggregateOutputType | null
    _avg: DeviceRateLimitAvgAggregateOutputType | null
    _sum: DeviceRateLimitSumAggregateOutputType | null
    _min: DeviceRateLimitMinAggregateOutputType | null
    _max: DeviceRateLimitMaxAggregateOutputType | null
  }

  export type DeviceRateLimitAvgAggregateOutputType = {
    attempts: number | null
  }

  export type DeviceRateLimitSumAggregateOutputType = {
    attempts: number | null
  }

  export type DeviceRateLimitMinAggregateOutputType = {
    deviceID: string | null
    attempts: number | null
    lastAttemptAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type DeviceRateLimitMaxAggregateOutputType = {
    deviceID: string | null
    attempts: number | null
    lastAttemptAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type DeviceRateLimitCountAggregateOutputType = {
    deviceID: number
    attempts: number
    lastAttemptAt: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type DeviceRateLimitAvgAggregateInputType = {
    attempts?: true
  }

  export type DeviceRateLimitSumAggregateInputType = {
    attempts?: true
  }

  export type DeviceRateLimitMinAggregateInputType = {
    deviceID?: true
    attempts?: true
    lastAttemptAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type DeviceRateLimitMaxAggregateInputType = {
    deviceID?: true
    attempts?: true
    lastAttemptAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type DeviceRateLimitCountAggregateInputType = {
    deviceID?: true
    attempts?: true
    lastAttemptAt?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type DeviceRateLimitAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DeviceRateLimit to aggregate.
     */
    where?: DeviceRateLimitWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DeviceRateLimits to fetch.
     */
    orderBy?: DeviceRateLimitOrderByWithRelationInput | DeviceRateLimitOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DeviceRateLimitWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DeviceRateLimits from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DeviceRateLimits.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned DeviceRateLimits
    **/
    _count?: true | DeviceRateLimitCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DeviceRateLimitAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DeviceRateLimitSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DeviceRateLimitMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DeviceRateLimitMaxAggregateInputType
  }

  export type GetDeviceRateLimitAggregateType<T extends DeviceRateLimitAggregateArgs> = {
        [P in keyof T & keyof AggregateDeviceRateLimit]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDeviceRateLimit[P]>
      : GetScalarType<T[P], AggregateDeviceRateLimit[P]>
  }




  export type DeviceRateLimitGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DeviceRateLimitWhereInput
    orderBy?: DeviceRateLimitOrderByWithAggregationInput | DeviceRateLimitOrderByWithAggregationInput[]
    by: DeviceRateLimitScalarFieldEnum[] | DeviceRateLimitScalarFieldEnum
    having?: DeviceRateLimitScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DeviceRateLimitCountAggregateInputType | true
    _avg?: DeviceRateLimitAvgAggregateInputType
    _sum?: DeviceRateLimitSumAggregateInputType
    _min?: DeviceRateLimitMinAggregateInputType
    _max?: DeviceRateLimitMaxAggregateInputType
  }

  export type DeviceRateLimitGroupByOutputType = {
    deviceID: string
    attempts: number
    lastAttemptAt: Date
    createdAt: Date
    updatedAt: Date
    _count: DeviceRateLimitCountAggregateOutputType | null
    _avg: DeviceRateLimitAvgAggregateOutputType | null
    _sum: DeviceRateLimitSumAggregateOutputType | null
    _min: DeviceRateLimitMinAggregateOutputType | null
    _max: DeviceRateLimitMaxAggregateOutputType | null
  }

  type GetDeviceRateLimitGroupByPayload<T extends DeviceRateLimitGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DeviceRateLimitGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DeviceRateLimitGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DeviceRateLimitGroupByOutputType[P]>
            : GetScalarType<T[P], DeviceRateLimitGroupByOutputType[P]>
        }
      >
    >


  export type DeviceRateLimitSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    deviceID?: boolean
    attempts?: boolean
    lastAttemptAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["deviceRateLimit"]>

  export type DeviceRateLimitSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    deviceID?: boolean
    attempts?: boolean
    lastAttemptAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["deviceRateLimit"]>

  export type DeviceRateLimitSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    deviceID?: boolean
    attempts?: boolean
    lastAttemptAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["deviceRateLimit"]>

  export type DeviceRateLimitSelectScalar = {
    deviceID?: boolean
    attempts?: boolean
    lastAttemptAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type DeviceRateLimitOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"deviceID" | "attempts" | "lastAttemptAt" | "createdAt" | "updatedAt", ExtArgs["result"]["deviceRateLimit"]>

  export type $DeviceRateLimitPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "DeviceRateLimit"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      deviceID: string
      attempts: number
      lastAttemptAt: Date
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["deviceRateLimit"]>
    composites: {}
  }

  type DeviceRateLimitGetPayload<S extends boolean | null | undefined | DeviceRateLimitDefaultArgs> = $Result.GetResult<Prisma.$DeviceRateLimitPayload, S>

  type DeviceRateLimitCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<DeviceRateLimitFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: DeviceRateLimitCountAggregateInputType | true
    }

  export interface DeviceRateLimitDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['DeviceRateLimit'], meta: { name: 'DeviceRateLimit' } }
    /**
     * Find zero or one DeviceRateLimit that matches the filter.
     * @param {DeviceRateLimitFindUniqueArgs} args - Arguments to find a DeviceRateLimit
     * @example
     * // Get one DeviceRateLimit
     * const deviceRateLimit = await prisma.deviceRateLimit.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DeviceRateLimitFindUniqueArgs>(args: SelectSubset<T, DeviceRateLimitFindUniqueArgs<ExtArgs>>): Prisma__DeviceRateLimitClient<$Result.GetResult<Prisma.$DeviceRateLimitPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one DeviceRateLimit that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {DeviceRateLimitFindUniqueOrThrowArgs} args - Arguments to find a DeviceRateLimit
     * @example
     * // Get one DeviceRateLimit
     * const deviceRateLimit = await prisma.deviceRateLimit.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DeviceRateLimitFindUniqueOrThrowArgs>(args: SelectSubset<T, DeviceRateLimitFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DeviceRateLimitClient<$Result.GetResult<Prisma.$DeviceRateLimitPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first DeviceRateLimit that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DeviceRateLimitFindFirstArgs} args - Arguments to find a DeviceRateLimit
     * @example
     * // Get one DeviceRateLimit
     * const deviceRateLimit = await prisma.deviceRateLimit.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DeviceRateLimitFindFirstArgs>(args?: SelectSubset<T, DeviceRateLimitFindFirstArgs<ExtArgs>>): Prisma__DeviceRateLimitClient<$Result.GetResult<Prisma.$DeviceRateLimitPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first DeviceRateLimit that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DeviceRateLimitFindFirstOrThrowArgs} args - Arguments to find a DeviceRateLimit
     * @example
     * // Get one DeviceRateLimit
     * const deviceRateLimit = await prisma.deviceRateLimit.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DeviceRateLimitFindFirstOrThrowArgs>(args?: SelectSubset<T, DeviceRateLimitFindFirstOrThrowArgs<ExtArgs>>): Prisma__DeviceRateLimitClient<$Result.GetResult<Prisma.$DeviceRateLimitPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more DeviceRateLimits that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DeviceRateLimitFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all DeviceRateLimits
     * const deviceRateLimits = await prisma.deviceRateLimit.findMany()
     * 
     * // Get first 10 DeviceRateLimits
     * const deviceRateLimits = await prisma.deviceRateLimit.findMany({ take: 10 })
     * 
     * // Only select the `deviceID`
     * const deviceRateLimitWithDeviceIDOnly = await prisma.deviceRateLimit.findMany({ select: { deviceID: true } })
     * 
     */
    findMany<T extends DeviceRateLimitFindManyArgs>(args?: SelectSubset<T, DeviceRateLimitFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DeviceRateLimitPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a DeviceRateLimit.
     * @param {DeviceRateLimitCreateArgs} args - Arguments to create a DeviceRateLimit.
     * @example
     * // Create one DeviceRateLimit
     * const DeviceRateLimit = await prisma.deviceRateLimit.create({
     *   data: {
     *     // ... data to create a DeviceRateLimit
     *   }
     * })
     * 
     */
    create<T extends DeviceRateLimitCreateArgs>(args: SelectSubset<T, DeviceRateLimitCreateArgs<ExtArgs>>): Prisma__DeviceRateLimitClient<$Result.GetResult<Prisma.$DeviceRateLimitPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many DeviceRateLimits.
     * @param {DeviceRateLimitCreateManyArgs} args - Arguments to create many DeviceRateLimits.
     * @example
     * // Create many DeviceRateLimits
     * const deviceRateLimit = await prisma.deviceRateLimit.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DeviceRateLimitCreateManyArgs>(args?: SelectSubset<T, DeviceRateLimitCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many DeviceRateLimits and returns the data saved in the database.
     * @param {DeviceRateLimitCreateManyAndReturnArgs} args - Arguments to create many DeviceRateLimits.
     * @example
     * // Create many DeviceRateLimits
     * const deviceRateLimit = await prisma.deviceRateLimit.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many DeviceRateLimits and only return the `deviceID`
     * const deviceRateLimitWithDeviceIDOnly = await prisma.deviceRateLimit.createManyAndReturn({
     *   select: { deviceID: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends DeviceRateLimitCreateManyAndReturnArgs>(args?: SelectSubset<T, DeviceRateLimitCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DeviceRateLimitPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a DeviceRateLimit.
     * @param {DeviceRateLimitDeleteArgs} args - Arguments to delete one DeviceRateLimit.
     * @example
     * // Delete one DeviceRateLimit
     * const DeviceRateLimit = await prisma.deviceRateLimit.delete({
     *   where: {
     *     // ... filter to delete one DeviceRateLimit
     *   }
     * })
     * 
     */
    delete<T extends DeviceRateLimitDeleteArgs>(args: SelectSubset<T, DeviceRateLimitDeleteArgs<ExtArgs>>): Prisma__DeviceRateLimitClient<$Result.GetResult<Prisma.$DeviceRateLimitPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one DeviceRateLimit.
     * @param {DeviceRateLimitUpdateArgs} args - Arguments to update one DeviceRateLimit.
     * @example
     * // Update one DeviceRateLimit
     * const deviceRateLimit = await prisma.deviceRateLimit.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DeviceRateLimitUpdateArgs>(args: SelectSubset<T, DeviceRateLimitUpdateArgs<ExtArgs>>): Prisma__DeviceRateLimitClient<$Result.GetResult<Prisma.$DeviceRateLimitPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more DeviceRateLimits.
     * @param {DeviceRateLimitDeleteManyArgs} args - Arguments to filter DeviceRateLimits to delete.
     * @example
     * // Delete a few DeviceRateLimits
     * const { count } = await prisma.deviceRateLimit.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DeviceRateLimitDeleteManyArgs>(args?: SelectSubset<T, DeviceRateLimitDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DeviceRateLimits.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DeviceRateLimitUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many DeviceRateLimits
     * const deviceRateLimit = await prisma.deviceRateLimit.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DeviceRateLimitUpdateManyArgs>(args: SelectSubset<T, DeviceRateLimitUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DeviceRateLimits and returns the data updated in the database.
     * @param {DeviceRateLimitUpdateManyAndReturnArgs} args - Arguments to update many DeviceRateLimits.
     * @example
     * // Update many DeviceRateLimits
     * const deviceRateLimit = await prisma.deviceRateLimit.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more DeviceRateLimits and only return the `deviceID`
     * const deviceRateLimitWithDeviceIDOnly = await prisma.deviceRateLimit.updateManyAndReturn({
     *   select: { deviceID: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends DeviceRateLimitUpdateManyAndReturnArgs>(args: SelectSubset<T, DeviceRateLimitUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DeviceRateLimitPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one DeviceRateLimit.
     * @param {DeviceRateLimitUpsertArgs} args - Arguments to update or create a DeviceRateLimit.
     * @example
     * // Update or create a DeviceRateLimit
     * const deviceRateLimit = await prisma.deviceRateLimit.upsert({
     *   create: {
     *     // ... data to create a DeviceRateLimit
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the DeviceRateLimit we want to update
     *   }
     * })
     */
    upsert<T extends DeviceRateLimitUpsertArgs>(args: SelectSubset<T, DeviceRateLimitUpsertArgs<ExtArgs>>): Prisma__DeviceRateLimitClient<$Result.GetResult<Prisma.$DeviceRateLimitPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of DeviceRateLimits.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DeviceRateLimitCountArgs} args - Arguments to filter DeviceRateLimits to count.
     * @example
     * // Count the number of DeviceRateLimits
     * const count = await prisma.deviceRateLimit.count({
     *   where: {
     *     // ... the filter for the DeviceRateLimits we want to count
     *   }
     * })
    **/
    count<T extends DeviceRateLimitCountArgs>(
      args?: Subset<T, DeviceRateLimitCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DeviceRateLimitCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a DeviceRateLimit.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DeviceRateLimitAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DeviceRateLimitAggregateArgs>(args: Subset<T, DeviceRateLimitAggregateArgs>): Prisma.PrismaPromise<GetDeviceRateLimitAggregateType<T>>

    /**
     * Group by DeviceRateLimit.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DeviceRateLimitGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DeviceRateLimitGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DeviceRateLimitGroupByArgs['orderBy'] }
        : { orderBy?: DeviceRateLimitGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DeviceRateLimitGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDeviceRateLimitGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the DeviceRateLimit model
   */
  readonly fields: DeviceRateLimitFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for DeviceRateLimit.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DeviceRateLimitClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the DeviceRateLimit model
   */
  interface DeviceRateLimitFieldRefs {
    readonly deviceID: FieldRef<"DeviceRateLimit", 'String'>
    readonly attempts: FieldRef<"DeviceRateLimit", 'Int'>
    readonly lastAttemptAt: FieldRef<"DeviceRateLimit", 'DateTime'>
    readonly createdAt: FieldRef<"DeviceRateLimit", 'DateTime'>
    readonly updatedAt: FieldRef<"DeviceRateLimit", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * DeviceRateLimit findUnique
   */
  export type DeviceRateLimitFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DeviceRateLimit
     */
    select?: DeviceRateLimitSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DeviceRateLimit
     */
    omit?: DeviceRateLimitOmit<ExtArgs> | null
    /**
     * Filter, which DeviceRateLimit to fetch.
     */
    where: DeviceRateLimitWhereUniqueInput
  }

  /**
   * DeviceRateLimit findUniqueOrThrow
   */
  export type DeviceRateLimitFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DeviceRateLimit
     */
    select?: DeviceRateLimitSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DeviceRateLimit
     */
    omit?: DeviceRateLimitOmit<ExtArgs> | null
    /**
     * Filter, which DeviceRateLimit to fetch.
     */
    where: DeviceRateLimitWhereUniqueInput
  }

  /**
   * DeviceRateLimit findFirst
   */
  export type DeviceRateLimitFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DeviceRateLimit
     */
    select?: DeviceRateLimitSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DeviceRateLimit
     */
    omit?: DeviceRateLimitOmit<ExtArgs> | null
    /**
     * Filter, which DeviceRateLimit to fetch.
     */
    where?: DeviceRateLimitWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DeviceRateLimits to fetch.
     */
    orderBy?: DeviceRateLimitOrderByWithRelationInput | DeviceRateLimitOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DeviceRateLimits.
     */
    cursor?: DeviceRateLimitWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DeviceRateLimits from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DeviceRateLimits.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DeviceRateLimits.
     */
    distinct?: DeviceRateLimitScalarFieldEnum | DeviceRateLimitScalarFieldEnum[]
  }

  /**
   * DeviceRateLimit findFirstOrThrow
   */
  export type DeviceRateLimitFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DeviceRateLimit
     */
    select?: DeviceRateLimitSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DeviceRateLimit
     */
    omit?: DeviceRateLimitOmit<ExtArgs> | null
    /**
     * Filter, which DeviceRateLimit to fetch.
     */
    where?: DeviceRateLimitWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DeviceRateLimits to fetch.
     */
    orderBy?: DeviceRateLimitOrderByWithRelationInput | DeviceRateLimitOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DeviceRateLimits.
     */
    cursor?: DeviceRateLimitWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DeviceRateLimits from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DeviceRateLimits.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DeviceRateLimits.
     */
    distinct?: DeviceRateLimitScalarFieldEnum | DeviceRateLimitScalarFieldEnum[]
  }

  /**
   * DeviceRateLimit findMany
   */
  export type DeviceRateLimitFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DeviceRateLimit
     */
    select?: DeviceRateLimitSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DeviceRateLimit
     */
    omit?: DeviceRateLimitOmit<ExtArgs> | null
    /**
     * Filter, which DeviceRateLimits to fetch.
     */
    where?: DeviceRateLimitWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DeviceRateLimits to fetch.
     */
    orderBy?: DeviceRateLimitOrderByWithRelationInput | DeviceRateLimitOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing DeviceRateLimits.
     */
    cursor?: DeviceRateLimitWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DeviceRateLimits from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DeviceRateLimits.
     */
    skip?: number
    distinct?: DeviceRateLimitScalarFieldEnum | DeviceRateLimitScalarFieldEnum[]
  }

  /**
   * DeviceRateLimit create
   */
  export type DeviceRateLimitCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DeviceRateLimit
     */
    select?: DeviceRateLimitSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DeviceRateLimit
     */
    omit?: DeviceRateLimitOmit<ExtArgs> | null
    /**
     * The data needed to create a DeviceRateLimit.
     */
    data: XOR<DeviceRateLimitCreateInput, DeviceRateLimitUncheckedCreateInput>
  }

  /**
   * DeviceRateLimit createMany
   */
  export type DeviceRateLimitCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many DeviceRateLimits.
     */
    data: DeviceRateLimitCreateManyInput | DeviceRateLimitCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * DeviceRateLimit createManyAndReturn
   */
  export type DeviceRateLimitCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DeviceRateLimit
     */
    select?: DeviceRateLimitSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the DeviceRateLimit
     */
    omit?: DeviceRateLimitOmit<ExtArgs> | null
    /**
     * The data used to create many DeviceRateLimits.
     */
    data: DeviceRateLimitCreateManyInput | DeviceRateLimitCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * DeviceRateLimit update
   */
  export type DeviceRateLimitUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DeviceRateLimit
     */
    select?: DeviceRateLimitSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DeviceRateLimit
     */
    omit?: DeviceRateLimitOmit<ExtArgs> | null
    /**
     * The data needed to update a DeviceRateLimit.
     */
    data: XOR<DeviceRateLimitUpdateInput, DeviceRateLimitUncheckedUpdateInput>
    /**
     * Choose, which DeviceRateLimit to update.
     */
    where: DeviceRateLimitWhereUniqueInput
  }

  /**
   * DeviceRateLimit updateMany
   */
  export type DeviceRateLimitUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update DeviceRateLimits.
     */
    data: XOR<DeviceRateLimitUpdateManyMutationInput, DeviceRateLimitUncheckedUpdateManyInput>
    /**
     * Filter which DeviceRateLimits to update
     */
    where?: DeviceRateLimitWhereInput
    /**
     * Limit how many DeviceRateLimits to update.
     */
    limit?: number
  }

  /**
   * DeviceRateLimit updateManyAndReturn
   */
  export type DeviceRateLimitUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DeviceRateLimit
     */
    select?: DeviceRateLimitSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the DeviceRateLimit
     */
    omit?: DeviceRateLimitOmit<ExtArgs> | null
    /**
     * The data used to update DeviceRateLimits.
     */
    data: XOR<DeviceRateLimitUpdateManyMutationInput, DeviceRateLimitUncheckedUpdateManyInput>
    /**
     * Filter which DeviceRateLimits to update
     */
    where?: DeviceRateLimitWhereInput
    /**
     * Limit how many DeviceRateLimits to update.
     */
    limit?: number
  }

  /**
   * DeviceRateLimit upsert
   */
  export type DeviceRateLimitUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DeviceRateLimit
     */
    select?: DeviceRateLimitSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DeviceRateLimit
     */
    omit?: DeviceRateLimitOmit<ExtArgs> | null
    /**
     * The filter to search for the DeviceRateLimit to update in case it exists.
     */
    where: DeviceRateLimitWhereUniqueInput
    /**
     * In case the DeviceRateLimit found by the `where` argument doesn't exist, create a new DeviceRateLimit with this data.
     */
    create: XOR<DeviceRateLimitCreateInput, DeviceRateLimitUncheckedCreateInput>
    /**
     * In case the DeviceRateLimit was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DeviceRateLimitUpdateInput, DeviceRateLimitUncheckedUpdateInput>
  }

  /**
   * DeviceRateLimit delete
   */
  export type DeviceRateLimitDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DeviceRateLimit
     */
    select?: DeviceRateLimitSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DeviceRateLimit
     */
    omit?: DeviceRateLimitOmit<ExtArgs> | null
    /**
     * Filter which DeviceRateLimit to delete.
     */
    where: DeviceRateLimitWhereUniqueInput
  }

  /**
   * DeviceRateLimit deleteMany
   */
  export type DeviceRateLimitDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DeviceRateLimits to delete
     */
    where?: DeviceRateLimitWhereInput
    /**
     * Limit how many DeviceRateLimits to delete.
     */
    limit?: number
  }

  /**
   * DeviceRateLimit without action
   */
  export type DeviceRateLimitDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DeviceRateLimit
     */
    select?: DeviceRateLimitSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DeviceRateLimit
     */
    omit?: DeviceRateLimitOmit<ExtArgs> | null
  }


  /**
   * Model AuthLogSchema
   */

  export type AggregateAuthLogSchema = {
    _count: AuthLogSchemaCountAggregateOutputType | null
    _avg: AuthLogSchemaAvgAggregateOutputType | null
    _sum: AuthLogSchemaSumAggregateOutputType | null
    _min: AuthLogSchemaMinAggregateOutputType | null
    _max: AuthLogSchemaMaxAggregateOutputType | null
  }

  export type AuthLogSchemaAvgAggregateOutputType = {
    id: number | null
  }

  export type AuthLogSchemaSumAggregateOutputType = {
    id: number | null
  }

  export type AuthLogSchemaMinAggregateOutputType = {
    id: number | null
    userID: string | null
    eventType: $Enums.AuthLogEvent | null
    deviceID: string | null
    deviceName: string | null
    deviceType: $Enums.DeviceType | null
    performedBy: $Enums.PerformedBy | null
    timestamp: Date | null
  }

  export type AuthLogSchemaMaxAggregateOutputType = {
    id: number | null
    userID: string | null
    eventType: $Enums.AuthLogEvent | null
    deviceID: string | null
    deviceName: string | null
    deviceType: $Enums.DeviceType | null
    performedBy: $Enums.PerformedBy | null
    timestamp: Date | null
  }

  export type AuthLogSchemaCountAggregateOutputType = {
    id: number
    userID: number
    eventType: number
    deviceID: number
    deviceName: number
    deviceType: number
    performedBy: number
    timestamp: number
    _all: number
  }


  export type AuthLogSchemaAvgAggregateInputType = {
    id?: true
  }

  export type AuthLogSchemaSumAggregateInputType = {
    id?: true
  }

  export type AuthLogSchemaMinAggregateInputType = {
    id?: true
    userID?: true
    eventType?: true
    deviceID?: true
    deviceName?: true
    deviceType?: true
    performedBy?: true
    timestamp?: true
  }

  export type AuthLogSchemaMaxAggregateInputType = {
    id?: true
    userID?: true
    eventType?: true
    deviceID?: true
    deviceName?: true
    deviceType?: true
    performedBy?: true
    timestamp?: true
  }

  export type AuthLogSchemaCountAggregateInputType = {
    id?: true
    userID?: true
    eventType?: true
    deviceID?: true
    deviceName?: true
    deviceType?: true
    performedBy?: true
    timestamp?: true
    _all?: true
  }

  export type AuthLogSchemaAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AuthLogSchema to aggregate.
     */
    where?: AuthLogSchemaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuthLogSchemas to fetch.
     */
    orderBy?: AuthLogSchemaOrderByWithRelationInput | AuthLogSchemaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AuthLogSchemaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuthLogSchemas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuthLogSchemas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AuthLogSchemas
    **/
    _count?: true | AuthLogSchemaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AuthLogSchemaAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AuthLogSchemaSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AuthLogSchemaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AuthLogSchemaMaxAggregateInputType
  }

  export type GetAuthLogSchemaAggregateType<T extends AuthLogSchemaAggregateArgs> = {
        [P in keyof T & keyof AggregateAuthLogSchema]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAuthLogSchema[P]>
      : GetScalarType<T[P], AggregateAuthLogSchema[P]>
  }




  export type AuthLogSchemaGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AuthLogSchemaWhereInput
    orderBy?: AuthLogSchemaOrderByWithAggregationInput | AuthLogSchemaOrderByWithAggregationInput[]
    by: AuthLogSchemaScalarFieldEnum[] | AuthLogSchemaScalarFieldEnum
    having?: AuthLogSchemaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AuthLogSchemaCountAggregateInputType | true
    _avg?: AuthLogSchemaAvgAggregateInputType
    _sum?: AuthLogSchemaSumAggregateInputType
    _min?: AuthLogSchemaMinAggregateInputType
    _max?: AuthLogSchemaMaxAggregateInputType
  }

  export type AuthLogSchemaGroupByOutputType = {
    id: number
    userID: string
    eventType: $Enums.AuthLogEvent
    deviceID: string
    deviceName: string | null
    deviceType: $Enums.DeviceType | null
    performedBy: $Enums.PerformedBy
    timestamp: Date
    _count: AuthLogSchemaCountAggregateOutputType | null
    _avg: AuthLogSchemaAvgAggregateOutputType | null
    _sum: AuthLogSchemaSumAggregateOutputType | null
    _min: AuthLogSchemaMinAggregateOutputType | null
    _max: AuthLogSchemaMaxAggregateOutputType | null
  }

  type GetAuthLogSchemaGroupByPayload<T extends AuthLogSchemaGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AuthLogSchemaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AuthLogSchemaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AuthLogSchemaGroupByOutputType[P]>
            : GetScalarType<T[P], AuthLogSchemaGroupByOutputType[P]>
        }
      >
    >


  export type AuthLogSchemaSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userID?: boolean
    eventType?: boolean
    deviceID?: boolean
    deviceName?: boolean
    deviceType?: boolean
    performedBy?: boolean
    timestamp?: boolean
    adminAction?: boolean | AuthLogSchema$adminActionArgs<ExtArgs>
  }, ExtArgs["result"]["authLogSchema"]>

  export type AuthLogSchemaSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userID?: boolean
    eventType?: boolean
    deviceID?: boolean
    deviceName?: boolean
    deviceType?: boolean
    performedBy?: boolean
    timestamp?: boolean
  }, ExtArgs["result"]["authLogSchema"]>

  export type AuthLogSchemaSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userID?: boolean
    eventType?: boolean
    deviceID?: boolean
    deviceName?: boolean
    deviceType?: boolean
    performedBy?: boolean
    timestamp?: boolean
  }, ExtArgs["result"]["authLogSchema"]>

  export type AuthLogSchemaSelectScalar = {
    id?: boolean
    userID?: boolean
    eventType?: boolean
    deviceID?: boolean
    deviceName?: boolean
    deviceType?: boolean
    performedBy?: boolean
    timestamp?: boolean
  }

  export type AuthLogSchemaOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userID" | "eventType" | "deviceID" | "deviceName" | "deviceType" | "performedBy" | "timestamp", ExtArgs["result"]["authLogSchema"]>
  export type AuthLogSchemaInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    adminAction?: boolean | AuthLogSchema$adminActionArgs<ExtArgs>
  }
  export type AuthLogSchemaIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type AuthLogSchemaIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $AuthLogSchemaPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AuthLogSchema"
    objects: {
      adminAction: Prisma.$AdminActionPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userID: string
      eventType: $Enums.AuthLogEvent
      deviceID: string
      deviceName: string | null
      deviceType: $Enums.DeviceType | null
      performedBy: $Enums.PerformedBy
      timestamp: Date
    }, ExtArgs["result"]["authLogSchema"]>
    composites: {}
  }

  type AuthLogSchemaGetPayload<S extends boolean | null | undefined | AuthLogSchemaDefaultArgs> = $Result.GetResult<Prisma.$AuthLogSchemaPayload, S>

  type AuthLogSchemaCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AuthLogSchemaFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AuthLogSchemaCountAggregateInputType | true
    }

  export interface AuthLogSchemaDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AuthLogSchema'], meta: { name: 'AuthLogSchema' } }
    /**
     * Find zero or one AuthLogSchema that matches the filter.
     * @param {AuthLogSchemaFindUniqueArgs} args - Arguments to find a AuthLogSchema
     * @example
     * // Get one AuthLogSchema
     * const authLogSchema = await prisma.authLogSchema.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AuthLogSchemaFindUniqueArgs>(args: SelectSubset<T, AuthLogSchemaFindUniqueArgs<ExtArgs>>): Prisma__AuthLogSchemaClient<$Result.GetResult<Prisma.$AuthLogSchemaPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one AuthLogSchema that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AuthLogSchemaFindUniqueOrThrowArgs} args - Arguments to find a AuthLogSchema
     * @example
     * // Get one AuthLogSchema
     * const authLogSchema = await prisma.authLogSchema.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AuthLogSchemaFindUniqueOrThrowArgs>(args: SelectSubset<T, AuthLogSchemaFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AuthLogSchemaClient<$Result.GetResult<Prisma.$AuthLogSchemaPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AuthLogSchema that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuthLogSchemaFindFirstArgs} args - Arguments to find a AuthLogSchema
     * @example
     * // Get one AuthLogSchema
     * const authLogSchema = await prisma.authLogSchema.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AuthLogSchemaFindFirstArgs>(args?: SelectSubset<T, AuthLogSchemaFindFirstArgs<ExtArgs>>): Prisma__AuthLogSchemaClient<$Result.GetResult<Prisma.$AuthLogSchemaPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AuthLogSchema that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuthLogSchemaFindFirstOrThrowArgs} args - Arguments to find a AuthLogSchema
     * @example
     * // Get one AuthLogSchema
     * const authLogSchema = await prisma.authLogSchema.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AuthLogSchemaFindFirstOrThrowArgs>(args?: SelectSubset<T, AuthLogSchemaFindFirstOrThrowArgs<ExtArgs>>): Prisma__AuthLogSchemaClient<$Result.GetResult<Prisma.$AuthLogSchemaPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more AuthLogSchemas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuthLogSchemaFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AuthLogSchemas
     * const authLogSchemas = await prisma.authLogSchema.findMany()
     * 
     * // Get first 10 AuthLogSchemas
     * const authLogSchemas = await prisma.authLogSchema.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const authLogSchemaWithIdOnly = await prisma.authLogSchema.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AuthLogSchemaFindManyArgs>(args?: SelectSubset<T, AuthLogSchemaFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuthLogSchemaPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a AuthLogSchema.
     * @param {AuthLogSchemaCreateArgs} args - Arguments to create a AuthLogSchema.
     * @example
     * // Create one AuthLogSchema
     * const AuthLogSchema = await prisma.authLogSchema.create({
     *   data: {
     *     // ... data to create a AuthLogSchema
     *   }
     * })
     * 
     */
    create<T extends AuthLogSchemaCreateArgs>(args: SelectSubset<T, AuthLogSchemaCreateArgs<ExtArgs>>): Prisma__AuthLogSchemaClient<$Result.GetResult<Prisma.$AuthLogSchemaPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many AuthLogSchemas.
     * @param {AuthLogSchemaCreateManyArgs} args - Arguments to create many AuthLogSchemas.
     * @example
     * // Create many AuthLogSchemas
     * const authLogSchema = await prisma.authLogSchema.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AuthLogSchemaCreateManyArgs>(args?: SelectSubset<T, AuthLogSchemaCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many AuthLogSchemas and returns the data saved in the database.
     * @param {AuthLogSchemaCreateManyAndReturnArgs} args - Arguments to create many AuthLogSchemas.
     * @example
     * // Create many AuthLogSchemas
     * const authLogSchema = await prisma.authLogSchema.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many AuthLogSchemas and only return the `id`
     * const authLogSchemaWithIdOnly = await prisma.authLogSchema.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AuthLogSchemaCreateManyAndReturnArgs>(args?: SelectSubset<T, AuthLogSchemaCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuthLogSchemaPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a AuthLogSchema.
     * @param {AuthLogSchemaDeleteArgs} args - Arguments to delete one AuthLogSchema.
     * @example
     * // Delete one AuthLogSchema
     * const AuthLogSchema = await prisma.authLogSchema.delete({
     *   where: {
     *     // ... filter to delete one AuthLogSchema
     *   }
     * })
     * 
     */
    delete<T extends AuthLogSchemaDeleteArgs>(args: SelectSubset<T, AuthLogSchemaDeleteArgs<ExtArgs>>): Prisma__AuthLogSchemaClient<$Result.GetResult<Prisma.$AuthLogSchemaPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one AuthLogSchema.
     * @param {AuthLogSchemaUpdateArgs} args - Arguments to update one AuthLogSchema.
     * @example
     * // Update one AuthLogSchema
     * const authLogSchema = await prisma.authLogSchema.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AuthLogSchemaUpdateArgs>(args: SelectSubset<T, AuthLogSchemaUpdateArgs<ExtArgs>>): Prisma__AuthLogSchemaClient<$Result.GetResult<Prisma.$AuthLogSchemaPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more AuthLogSchemas.
     * @param {AuthLogSchemaDeleteManyArgs} args - Arguments to filter AuthLogSchemas to delete.
     * @example
     * // Delete a few AuthLogSchemas
     * const { count } = await prisma.authLogSchema.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AuthLogSchemaDeleteManyArgs>(args?: SelectSubset<T, AuthLogSchemaDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AuthLogSchemas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuthLogSchemaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AuthLogSchemas
     * const authLogSchema = await prisma.authLogSchema.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AuthLogSchemaUpdateManyArgs>(args: SelectSubset<T, AuthLogSchemaUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AuthLogSchemas and returns the data updated in the database.
     * @param {AuthLogSchemaUpdateManyAndReturnArgs} args - Arguments to update many AuthLogSchemas.
     * @example
     * // Update many AuthLogSchemas
     * const authLogSchema = await prisma.authLogSchema.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more AuthLogSchemas and only return the `id`
     * const authLogSchemaWithIdOnly = await prisma.authLogSchema.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AuthLogSchemaUpdateManyAndReturnArgs>(args: SelectSubset<T, AuthLogSchemaUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuthLogSchemaPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one AuthLogSchema.
     * @param {AuthLogSchemaUpsertArgs} args - Arguments to update or create a AuthLogSchema.
     * @example
     * // Update or create a AuthLogSchema
     * const authLogSchema = await prisma.authLogSchema.upsert({
     *   create: {
     *     // ... data to create a AuthLogSchema
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AuthLogSchema we want to update
     *   }
     * })
     */
    upsert<T extends AuthLogSchemaUpsertArgs>(args: SelectSubset<T, AuthLogSchemaUpsertArgs<ExtArgs>>): Prisma__AuthLogSchemaClient<$Result.GetResult<Prisma.$AuthLogSchemaPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of AuthLogSchemas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuthLogSchemaCountArgs} args - Arguments to filter AuthLogSchemas to count.
     * @example
     * // Count the number of AuthLogSchemas
     * const count = await prisma.authLogSchema.count({
     *   where: {
     *     // ... the filter for the AuthLogSchemas we want to count
     *   }
     * })
    **/
    count<T extends AuthLogSchemaCountArgs>(
      args?: Subset<T, AuthLogSchemaCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AuthLogSchemaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AuthLogSchema.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuthLogSchemaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AuthLogSchemaAggregateArgs>(args: Subset<T, AuthLogSchemaAggregateArgs>): Prisma.PrismaPromise<GetAuthLogSchemaAggregateType<T>>

    /**
     * Group by AuthLogSchema.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuthLogSchemaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AuthLogSchemaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AuthLogSchemaGroupByArgs['orderBy'] }
        : { orderBy?: AuthLogSchemaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AuthLogSchemaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAuthLogSchemaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AuthLogSchema model
   */
  readonly fields: AuthLogSchemaFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AuthLogSchema.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AuthLogSchemaClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    adminAction<T extends AuthLogSchema$adminActionArgs<ExtArgs> = {}>(args?: Subset<T, AuthLogSchema$adminActionArgs<ExtArgs>>): Prisma__AdminActionClient<$Result.GetResult<Prisma.$AdminActionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the AuthLogSchema model
   */
  interface AuthLogSchemaFieldRefs {
    readonly id: FieldRef<"AuthLogSchema", 'Int'>
    readonly userID: FieldRef<"AuthLogSchema", 'String'>
    readonly eventType: FieldRef<"AuthLogSchema", 'AuthLogEvent'>
    readonly deviceID: FieldRef<"AuthLogSchema", 'String'>
    readonly deviceName: FieldRef<"AuthLogSchema", 'String'>
    readonly deviceType: FieldRef<"AuthLogSchema", 'DeviceType'>
    readonly performedBy: FieldRef<"AuthLogSchema", 'PerformedBy'>
    readonly timestamp: FieldRef<"AuthLogSchema", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * AuthLogSchema findUnique
   */
  export type AuthLogSchemaFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuthLogSchema
     */
    select?: AuthLogSchemaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuthLogSchema
     */
    omit?: AuthLogSchemaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuthLogSchemaInclude<ExtArgs> | null
    /**
     * Filter, which AuthLogSchema to fetch.
     */
    where: AuthLogSchemaWhereUniqueInput
  }

  /**
   * AuthLogSchema findUniqueOrThrow
   */
  export type AuthLogSchemaFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuthLogSchema
     */
    select?: AuthLogSchemaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuthLogSchema
     */
    omit?: AuthLogSchemaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuthLogSchemaInclude<ExtArgs> | null
    /**
     * Filter, which AuthLogSchema to fetch.
     */
    where: AuthLogSchemaWhereUniqueInput
  }

  /**
   * AuthLogSchema findFirst
   */
  export type AuthLogSchemaFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuthLogSchema
     */
    select?: AuthLogSchemaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuthLogSchema
     */
    omit?: AuthLogSchemaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuthLogSchemaInclude<ExtArgs> | null
    /**
     * Filter, which AuthLogSchema to fetch.
     */
    where?: AuthLogSchemaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuthLogSchemas to fetch.
     */
    orderBy?: AuthLogSchemaOrderByWithRelationInput | AuthLogSchemaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AuthLogSchemas.
     */
    cursor?: AuthLogSchemaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuthLogSchemas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuthLogSchemas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AuthLogSchemas.
     */
    distinct?: AuthLogSchemaScalarFieldEnum | AuthLogSchemaScalarFieldEnum[]
  }

  /**
   * AuthLogSchema findFirstOrThrow
   */
  export type AuthLogSchemaFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuthLogSchema
     */
    select?: AuthLogSchemaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuthLogSchema
     */
    omit?: AuthLogSchemaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuthLogSchemaInclude<ExtArgs> | null
    /**
     * Filter, which AuthLogSchema to fetch.
     */
    where?: AuthLogSchemaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuthLogSchemas to fetch.
     */
    orderBy?: AuthLogSchemaOrderByWithRelationInput | AuthLogSchemaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AuthLogSchemas.
     */
    cursor?: AuthLogSchemaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuthLogSchemas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuthLogSchemas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AuthLogSchemas.
     */
    distinct?: AuthLogSchemaScalarFieldEnum | AuthLogSchemaScalarFieldEnum[]
  }

  /**
   * AuthLogSchema findMany
   */
  export type AuthLogSchemaFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuthLogSchema
     */
    select?: AuthLogSchemaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuthLogSchema
     */
    omit?: AuthLogSchemaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuthLogSchemaInclude<ExtArgs> | null
    /**
     * Filter, which AuthLogSchemas to fetch.
     */
    where?: AuthLogSchemaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuthLogSchemas to fetch.
     */
    orderBy?: AuthLogSchemaOrderByWithRelationInput | AuthLogSchemaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AuthLogSchemas.
     */
    cursor?: AuthLogSchemaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuthLogSchemas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuthLogSchemas.
     */
    skip?: number
    distinct?: AuthLogSchemaScalarFieldEnum | AuthLogSchemaScalarFieldEnum[]
  }

  /**
   * AuthLogSchema create
   */
  export type AuthLogSchemaCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuthLogSchema
     */
    select?: AuthLogSchemaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuthLogSchema
     */
    omit?: AuthLogSchemaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuthLogSchemaInclude<ExtArgs> | null
    /**
     * The data needed to create a AuthLogSchema.
     */
    data: XOR<AuthLogSchemaCreateInput, AuthLogSchemaUncheckedCreateInput>
  }

  /**
   * AuthLogSchema createMany
   */
  export type AuthLogSchemaCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AuthLogSchemas.
     */
    data: AuthLogSchemaCreateManyInput | AuthLogSchemaCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * AuthLogSchema createManyAndReturn
   */
  export type AuthLogSchemaCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuthLogSchema
     */
    select?: AuthLogSchemaSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AuthLogSchema
     */
    omit?: AuthLogSchemaOmit<ExtArgs> | null
    /**
     * The data used to create many AuthLogSchemas.
     */
    data: AuthLogSchemaCreateManyInput | AuthLogSchemaCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * AuthLogSchema update
   */
  export type AuthLogSchemaUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuthLogSchema
     */
    select?: AuthLogSchemaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuthLogSchema
     */
    omit?: AuthLogSchemaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuthLogSchemaInclude<ExtArgs> | null
    /**
     * The data needed to update a AuthLogSchema.
     */
    data: XOR<AuthLogSchemaUpdateInput, AuthLogSchemaUncheckedUpdateInput>
    /**
     * Choose, which AuthLogSchema to update.
     */
    where: AuthLogSchemaWhereUniqueInput
  }

  /**
   * AuthLogSchema updateMany
   */
  export type AuthLogSchemaUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AuthLogSchemas.
     */
    data: XOR<AuthLogSchemaUpdateManyMutationInput, AuthLogSchemaUncheckedUpdateManyInput>
    /**
     * Filter which AuthLogSchemas to update
     */
    where?: AuthLogSchemaWhereInput
    /**
     * Limit how many AuthLogSchemas to update.
     */
    limit?: number
  }

  /**
   * AuthLogSchema updateManyAndReturn
   */
  export type AuthLogSchemaUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuthLogSchema
     */
    select?: AuthLogSchemaSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AuthLogSchema
     */
    omit?: AuthLogSchemaOmit<ExtArgs> | null
    /**
     * The data used to update AuthLogSchemas.
     */
    data: XOR<AuthLogSchemaUpdateManyMutationInput, AuthLogSchemaUncheckedUpdateManyInput>
    /**
     * Filter which AuthLogSchemas to update
     */
    where?: AuthLogSchemaWhereInput
    /**
     * Limit how many AuthLogSchemas to update.
     */
    limit?: number
  }

  /**
   * AuthLogSchema upsert
   */
  export type AuthLogSchemaUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuthLogSchema
     */
    select?: AuthLogSchemaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuthLogSchema
     */
    omit?: AuthLogSchemaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuthLogSchemaInclude<ExtArgs> | null
    /**
     * The filter to search for the AuthLogSchema to update in case it exists.
     */
    where: AuthLogSchemaWhereUniqueInput
    /**
     * In case the AuthLogSchema found by the `where` argument doesn't exist, create a new AuthLogSchema with this data.
     */
    create: XOR<AuthLogSchemaCreateInput, AuthLogSchemaUncheckedCreateInput>
    /**
     * In case the AuthLogSchema was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AuthLogSchemaUpdateInput, AuthLogSchemaUncheckedUpdateInput>
  }

  /**
   * AuthLogSchema delete
   */
  export type AuthLogSchemaDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuthLogSchema
     */
    select?: AuthLogSchemaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuthLogSchema
     */
    omit?: AuthLogSchemaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuthLogSchemaInclude<ExtArgs> | null
    /**
     * Filter which AuthLogSchema to delete.
     */
    where: AuthLogSchemaWhereUniqueInput
  }

  /**
   * AuthLogSchema deleteMany
   */
  export type AuthLogSchemaDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AuthLogSchemas to delete
     */
    where?: AuthLogSchemaWhereInput
    /**
     * Limit how many AuthLogSchemas to delete.
     */
    limit?: number
  }

  /**
   * AuthLogSchema.adminAction
   */
  export type AuthLogSchema$adminActionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminAction
     */
    select?: AdminActionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AdminAction
     */
    omit?: AdminActionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminActionInclude<ExtArgs> | null
    where?: AdminActionWhereInput
  }

  /**
   * AuthLogSchema without action
   */
  export type AuthLogSchemaDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuthLogSchema
     */
    select?: AuthLogSchemaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuthLogSchema
     */
    omit?: AuthLogSchemaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuthLogSchemaInclude<ExtArgs> | null
  }


  /**
   * Model AdminAction
   */

  export type AggregateAdminAction = {
    _count: AdminActionCountAggregateOutputType | null
    _avg: AdminActionAvgAggregateOutputType | null
    _sum: AdminActionSumAggregateOutputType | null
    _min: AdminActionMinAggregateOutputType | null
    _max: AdminActionMaxAggregateOutputType | null
  }

  export type AdminActionAvgAggregateOutputType = {
    id: number | null
  }

  export type AdminActionSumAggregateOutputType = {
    id: number | null
  }

  export type AdminActionMinAggregateOutputType = {
    id: number | null
    targetUserID: string | null
    reason: string | null
  }

  export type AdminActionMaxAggregateOutputType = {
    id: number | null
    targetUserID: string | null
    reason: string | null
  }

  export type AdminActionCountAggregateOutputType = {
    id: number
    targetUserID: number
    reason: number
    filter: number
    _all: number
  }


  export type AdminActionAvgAggregateInputType = {
    id?: true
  }

  export type AdminActionSumAggregateInputType = {
    id?: true
  }

  export type AdminActionMinAggregateInputType = {
    id?: true
    targetUserID?: true
    reason?: true
  }

  export type AdminActionMaxAggregateInputType = {
    id?: true
    targetUserID?: true
    reason?: true
  }

  export type AdminActionCountAggregateInputType = {
    id?: true
    targetUserID?: true
    reason?: true
    filter?: true
    _all?: true
  }

  export type AdminActionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AdminAction to aggregate.
     */
    where?: AdminActionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AdminActions to fetch.
     */
    orderBy?: AdminActionOrderByWithRelationInput | AdminActionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AdminActionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AdminActions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AdminActions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AdminActions
    **/
    _count?: true | AdminActionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AdminActionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AdminActionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AdminActionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AdminActionMaxAggregateInputType
  }

  export type GetAdminActionAggregateType<T extends AdminActionAggregateArgs> = {
        [P in keyof T & keyof AggregateAdminAction]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAdminAction[P]>
      : GetScalarType<T[P], AggregateAdminAction[P]>
  }




  export type AdminActionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AdminActionWhereInput
    orderBy?: AdminActionOrderByWithAggregationInput | AdminActionOrderByWithAggregationInput[]
    by: AdminActionScalarFieldEnum[] | AdminActionScalarFieldEnum
    having?: AdminActionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AdminActionCountAggregateInputType | true
    _avg?: AdminActionAvgAggregateInputType
    _sum?: AdminActionSumAggregateInputType
    _min?: AdminActionMinAggregateInputType
    _max?: AdminActionMaxAggregateInputType
  }

  export type AdminActionGroupByOutputType = {
    id: number
    targetUserID: string | null
    reason: string | null
    filter: $Enums.AuthLogEvent[]
    _count: AdminActionCountAggregateOutputType | null
    _avg: AdminActionAvgAggregateOutputType | null
    _sum: AdminActionSumAggregateOutputType | null
    _min: AdminActionMinAggregateOutputType | null
    _max: AdminActionMaxAggregateOutputType | null
  }

  type GetAdminActionGroupByPayload<T extends AdminActionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AdminActionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AdminActionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AdminActionGroupByOutputType[P]>
            : GetScalarType<T[P], AdminActionGroupByOutputType[P]>
        }
      >
    >


  export type AdminActionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    targetUserID?: boolean
    reason?: boolean
    filter?: boolean
    authLog?: boolean | AuthLogSchemaDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["adminAction"]>

  export type AdminActionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    targetUserID?: boolean
    reason?: boolean
    filter?: boolean
    authLog?: boolean | AuthLogSchemaDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["adminAction"]>

  export type AdminActionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    targetUserID?: boolean
    reason?: boolean
    filter?: boolean
    authLog?: boolean | AuthLogSchemaDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["adminAction"]>

  export type AdminActionSelectScalar = {
    id?: boolean
    targetUserID?: boolean
    reason?: boolean
    filter?: boolean
  }

  export type AdminActionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "targetUserID" | "reason" | "filter", ExtArgs["result"]["adminAction"]>
  export type AdminActionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    authLog?: boolean | AuthLogSchemaDefaultArgs<ExtArgs>
  }
  export type AdminActionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    authLog?: boolean | AuthLogSchemaDefaultArgs<ExtArgs>
  }
  export type AdminActionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    authLog?: boolean | AuthLogSchemaDefaultArgs<ExtArgs>
  }

  export type $AdminActionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AdminAction"
    objects: {
      authLog: Prisma.$AuthLogSchemaPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      targetUserID: string | null
      reason: string | null
      filter: $Enums.AuthLogEvent[]
    }, ExtArgs["result"]["adminAction"]>
    composites: {}
  }

  type AdminActionGetPayload<S extends boolean | null | undefined | AdminActionDefaultArgs> = $Result.GetResult<Prisma.$AdminActionPayload, S>

  type AdminActionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AdminActionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AdminActionCountAggregateInputType | true
    }

  export interface AdminActionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AdminAction'], meta: { name: 'AdminAction' } }
    /**
     * Find zero or one AdminAction that matches the filter.
     * @param {AdminActionFindUniqueArgs} args - Arguments to find a AdminAction
     * @example
     * // Get one AdminAction
     * const adminAction = await prisma.adminAction.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AdminActionFindUniqueArgs>(args: SelectSubset<T, AdminActionFindUniqueArgs<ExtArgs>>): Prisma__AdminActionClient<$Result.GetResult<Prisma.$AdminActionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one AdminAction that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AdminActionFindUniqueOrThrowArgs} args - Arguments to find a AdminAction
     * @example
     * // Get one AdminAction
     * const adminAction = await prisma.adminAction.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AdminActionFindUniqueOrThrowArgs>(args: SelectSubset<T, AdminActionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AdminActionClient<$Result.GetResult<Prisma.$AdminActionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AdminAction that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminActionFindFirstArgs} args - Arguments to find a AdminAction
     * @example
     * // Get one AdminAction
     * const adminAction = await prisma.adminAction.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AdminActionFindFirstArgs>(args?: SelectSubset<T, AdminActionFindFirstArgs<ExtArgs>>): Prisma__AdminActionClient<$Result.GetResult<Prisma.$AdminActionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AdminAction that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminActionFindFirstOrThrowArgs} args - Arguments to find a AdminAction
     * @example
     * // Get one AdminAction
     * const adminAction = await prisma.adminAction.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AdminActionFindFirstOrThrowArgs>(args?: SelectSubset<T, AdminActionFindFirstOrThrowArgs<ExtArgs>>): Prisma__AdminActionClient<$Result.GetResult<Prisma.$AdminActionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more AdminActions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminActionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AdminActions
     * const adminActions = await prisma.adminAction.findMany()
     * 
     * // Get first 10 AdminActions
     * const adminActions = await prisma.adminAction.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const adminActionWithIdOnly = await prisma.adminAction.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AdminActionFindManyArgs>(args?: SelectSubset<T, AdminActionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AdminActionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a AdminAction.
     * @param {AdminActionCreateArgs} args - Arguments to create a AdminAction.
     * @example
     * // Create one AdminAction
     * const AdminAction = await prisma.adminAction.create({
     *   data: {
     *     // ... data to create a AdminAction
     *   }
     * })
     * 
     */
    create<T extends AdminActionCreateArgs>(args: SelectSubset<T, AdminActionCreateArgs<ExtArgs>>): Prisma__AdminActionClient<$Result.GetResult<Prisma.$AdminActionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many AdminActions.
     * @param {AdminActionCreateManyArgs} args - Arguments to create many AdminActions.
     * @example
     * // Create many AdminActions
     * const adminAction = await prisma.adminAction.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AdminActionCreateManyArgs>(args?: SelectSubset<T, AdminActionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many AdminActions and returns the data saved in the database.
     * @param {AdminActionCreateManyAndReturnArgs} args - Arguments to create many AdminActions.
     * @example
     * // Create many AdminActions
     * const adminAction = await prisma.adminAction.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many AdminActions and only return the `id`
     * const adminActionWithIdOnly = await prisma.adminAction.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AdminActionCreateManyAndReturnArgs>(args?: SelectSubset<T, AdminActionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AdminActionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a AdminAction.
     * @param {AdminActionDeleteArgs} args - Arguments to delete one AdminAction.
     * @example
     * // Delete one AdminAction
     * const AdminAction = await prisma.adminAction.delete({
     *   where: {
     *     // ... filter to delete one AdminAction
     *   }
     * })
     * 
     */
    delete<T extends AdminActionDeleteArgs>(args: SelectSubset<T, AdminActionDeleteArgs<ExtArgs>>): Prisma__AdminActionClient<$Result.GetResult<Prisma.$AdminActionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one AdminAction.
     * @param {AdminActionUpdateArgs} args - Arguments to update one AdminAction.
     * @example
     * // Update one AdminAction
     * const adminAction = await prisma.adminAction.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AdminActionUpdateArgs>(args: SelectSubset<T, AdminActionUpdateArgs<ExtArgs>>): Prisma__AdminActionClient<$Result.GetResult<Prisma.$AdminActionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more AdminActions.
     * @param {AdminActionDeleteManyArgs} args - Arguments to filter AdminActions to delete.
     * @example
     * // Delete a few AdminActions
     * const { count } = await prisma.adminAction.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AdminActionDeleteManyArgs>(args?: SelectSubset<T, AdminActionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AdminActions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminActionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AdminActions
     * const adminAction = await prisma.adminAction.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AdminActionUpdateManyArgs>(args: SelectSubset<T, AdminActionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AdminActions and returns the data updated in the database.
     * @param {AdminActionUpdateManyAndReturnArgs} args - Arguments to update many AdminActions.
     * @example
     * // Update many AdminActions
     * const adminAction = await prisma.adminAction.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more AdminActions and only return the `id`
     * const adminActionWithIdOnly = await prisma.adminAction.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AdminActionUpdateManyAndReturnArgs>(args: SelectSubset<T, AdminActionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AdminActionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one AdminAction.
     * @param {AdminActionUpsertArgs} args - Arguments to update or create a AdminAction.
     * @example
     * // Update or create a AdminAction
     * const adminAction = await prisma.adminAction.upsert({
     *   create: {
     *     // ... data to create a AdminAction
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AdminAction we want to update
     *   }
     * })
     */
    upsert<T extends AdminActionUpsertArgs>(args: SelectSubset<T, AdminActionUpsertArgs<ExtArgs>>): Prisma__AdminActionClient<$Result.GetResult<Prisma.$AdminActionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of AdminActions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminActionCountArgs} args - Arguments to filter AdminActions to count.
     * @example
     * // Count the number of AdminActions
     * const count = await prisma.adminAction.count({
     *   where: {
     *     // ... the filter for the AdminActions we want to count
     *   }
     * })
    **/
    count<T extends AdminActionCountArgs>(
      args?: Subset<T, AdminActionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AdminActionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AdminAction.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminActionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AdminActionAggregateArgs>(args: Subset<T, AdminActionAggregateArgs>): Prisma.PrismaPromise<GetAdminActionAggregateType<T>>

    /**
     * Group by AdminAction.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminActionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AdminActionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AdminActionGroupByArgs['orderBy'] }
        : { orderBy?: AdminActionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AdminActionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAdminActionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AdminAction model
   */
  readonly fields: AdminActionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AdminAction.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AdminActionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    authLog<T extends AuthLogSchemaDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AuthLogSchemaDefaultArgs<ExtArgs>>): Prisma__AuthLogSchemaClient<$Result.GetResult<Prisma.$AuthLogSchemaPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the AdminAction model
   */
  interface AdminActionFieldRefs {
    readonly id: FieldRef<"AdminAction", 'Int'>
    readonly targetUserID: FieldRef<"AdminAction", 'String'>
    readonly reason: FieldRef<"AdminAction", 'String'>
    readonly filter: FieldRef<"AdminAction", 'AuthLogEvent[]'>
  }
    

  // Custom InputTypes
  /**
   * AdminAction findUnique
   */
  export type AdminActionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminAction
     */
    select?: AdminActionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AdminAction
     */
    omit?: AdminActionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminActionInclude<ExtArgs> | null
    /**
     * Filter, which AdminAction to fetch.
     */
    where: AdminActionWhereUniqueInput
  }

  /**
   * AdminAction findUniqueOrThrow
   */
  export type AdminActionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminAction
     */
    select?: AdminActionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AdminAction
     */
    omit?: AdminActionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminActionInclude<ExtArgs> | null
    /**
     * Filter, which AdminAction to fetch.
     */
    where: AdminActionWhereUniqueInput
  }

  /**
   * AdminAction findFirst
   */
  export type AdminActionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminAction
     */
    select?: AdminActionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AdminAction
     */
    omit?: AdminActionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminActionInclude<ExtArgs> | null
    /**
     * Filter, which AdminAction to fetch.
     */
    where?: AdminActionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AdminActions to fetch.
     */
    orderBy?: AdminActionOrderByWithRelationInput | AdminActionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AdminActions.
     */
    cursor?: AdminActionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AdminActions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AdminActions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AdminActions.
     */
    distinct?: AdminActionScalarFieldEnum | AdminActionScalarFieldEnum[]
  }

  /**
   * AdminAction findFirstOrThrow
   */
  export type AdminActionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminAction
     */
    select?: AdminActionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AdminAction
     */
    omit?: AdminActionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminActionInclude<ExtArgs> | null
    /**
     * Filter, which AdminAction to fetch.
     */
    where?: AdminActionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AdminActions to fetch.
     */
    orderBy?: AdminActionOrderByWithRelationInput | AdminActionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AdminActions.
     */
    cursor?: AdminActionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AdminActions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AdminActions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AdminActions.
     */
    distinct?: AdminActionScalarFieldEnum | AdminActionScalarFieldEnum[]
  }

  /**
   * AdminAction findMany
   */
  export type AdminActionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminAction
     */
    select?: AdminActionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AdminAction
     */
    omit?: AdminActionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminActionInclude<ExtArgs> | null
    /**
     * Filter, which AdminActions to fetch.
     */
    where?: AdminActionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AdminActions to fetch.
     */
    orderBy?: AdminActionOrderByWithRelationInput | AdminActionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AdminActions.
     */
    cursor?: AdminActionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AdminActions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AdminActions.
     */
    skip?: number
    distinct?: AdminActionScalarFieldEnum | AdminActionScalarFieldEnum[]
  }

  /**
   * AdminAction create
   */
  export type AdminActionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminAction
     */
    select?: AdminActionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AdminAction
     */
    omit?: AdminActionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminActionInclude<ExtArgs> | null
    /**
     * The data needed to create a AdminAction.
     */
    data: XOR<AdminActionCreateInput, AdminActionUncheckedCreateInput>
  }

  /**
   * AdminAction createMany
   */
  export type AdminActionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AdminActions.
     */
    data: AdminActionCreateManyInput | AdminActionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * AdminAction createManyAndReturn
   */
  export type AdminActionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminAction
     */
    select?: AdminActionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AdminAction
     */
    omit?: AdminActionOmit<ExtArgs> | null
    /**
     * The data used to create many AdminActions.
     */
    data: AdminActionCreateManyInput | AdminActionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminActionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * AdminAction update
   */
  export type AdminActionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminAction
     */
    select?: AdminActionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AdminAction
     */
    omit?: AdminActionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminActionInclude<ExtArgs> | null
    /**
     * The data needed to update a AdminAction.
     */
    data: XOR<AdminActionUpdateInput, AdminActionUncheckedUpdateInput>
    /**
     * Choose, which AdminAction to update.
     */
    where: AdminActionWhereUniqueInput
  }

  /**
   * AdminAction updateMany
   */
  export type AdminActionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AdminActions.
     */
    data: XOR<AdminActionUpdateManyMutationInput, AdminActionUncheckedUpdateManyInput>
    /**
     * Filter which AdminActions to update
     */
    where?: AdminActionWhereInput
    /**
     * Limit how many AdminActions to update.
     */
    limit?: number
  }

  /**
   * AdminAction updateManyAndReturn
   */
  export type AdminActionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminAction
     */
    select?: AdminActionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AdminAction
     */
    omit?: AdminActionOmit<ExtArgs> | null
    /**
     * The data used to update AdminActions.
     */
    data: XOR<AdminActionUpdateManyMutationInput, AdminActionUncheckedUpdateManyInput>
    /**
     * Filter which AdminActions to update
     */
    where?: AdminActionWhereInput
    /**
     * Limit how many AdminActions to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminActionIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * AdminAction upsert
   */
  export type AdminActionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminAction
     */
    select?: AdminActionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AdminAction
     */
    omit?: AdminActionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminActionInclude<ExtArgs> | null
    /**
     * The filter to search for the AdminAction to update in case it exists.
     */
    where: AdminActionWhereUniqueInput
    /**
     * In case the AdminAction found by the `where` argument doesn't exist, create a new AdminAction with this data.
     */
    create: XOR<AdminActionCreateInput, AdminActionUncheckedCreateInput>
    /**
     * In case the AdminAction was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AdminActionUpdateInput, AdminActionUncheckedUpdateInput>
  }

  /**
   * AdminAction delete
   */
  export type AdminActionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminAction
     */
    select?: AdminActionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AdminAction
     */
    omit?: AdminActionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminActionInclude<ExtArgs> | null
    /**
     * Filter which AdminAction to delete.
     */
    where: AdminActionWhereUniqueInput
  }

  /**
   * AdminAction deleteMany
   */
  export type AdminActionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AdminActions to delete
     */
    where?: AdminActionWhereInput
    /**
     * Limit how many AdminActions to delete.
     */
    limit?: number
  }

  /**
   * AdminAction without action
   */
  export type AdminActionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminAction
     */
    select?: AdminActionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AdminAction
     */
    omit?: AdminActionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminActionInclude<ExtArgs> | null
  }


  /**
   * Model counterSchema
   */

  export type AggregateCounterSchema = {
    _count: CounterSchemaCountAggregateOutputType | null
    _avg: CounterSchemaAvgAggregateOutputType | null
    _sum: CounterSchemaSumAggregateOutputType | null
    _min: CounterSchemaMinAggregateOutputType | null
    _max: CounterSchemaMaxAggregateOutputType | null
  }

  export type CounterSchemaAvgAggregateOutputType = {
    seq: number | null
  }

  export type CounterSchemaSumAggregateOutputType = {
    seq: number | null
  }

  export type CounterSchemaMinAggregateOutputType = {
    id: string | null
    seq: number | null
  }

  export type CounterSchemaMaxAggregateOutputType = {
    id: string | null
    seq: number | null
  }

  export type CounterSchemaCountAggregateOutputType = {
    id: number
    seq: number
    _all: number
  }


  export type CounterSchemaAvgAggregateInputType = {
    seq?: true
  }

  export type CounterSchemaSumAggregateInputType = {
    seq?: true
  }

  export type CounterSchemaMinAggregateInputType = {
    id?: true
    seq?: true
  }

  export type CounterSchemaMaxAggregateInputType = {
    id?: true
    seq?: true
  }

  export type CounterSchemaCountAggregateInputType = {
    id?: true
    seq?: true
    _all?: true
  }

  export type CounterSchemaAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which counterSchema to aggregate.
     */
    where?: counterSchemaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of counterSchemas to fetch.
     */
    orderBy?: counterSchemaOrderByWithRelationInput | counterSchemaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: counterSchemaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` counterSchemas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` counterSchemas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned counterSchemas
    **/
    _count?: true | CounterSchemaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CounterSchemaAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CounterSchemaSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CounterSchemaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CounterSchemaMaxAggregateInputType
  }

  export type GetCounterSchemaAggregateType<T extends CounterSchemaAggregateArgs> = {
        [P in keyof T & keyof AggregateCounterSchema]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCounterSchema[P]>
      : GetScalarType<T[P], AggregateCounterSchema[P]>
  }




  export type counterSchemaGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: counterSchemaWhereInput
    orderBy?: counterSchemaOrderByWithAggregationInput | counterSchemaOrderByWithAggregationInput[]
    by: CounterSchemaScalarFieldEnum[] | CounterSchemaScalarFieldEnum
    having?: counterSchemaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CounterSchemaCountAggregateInputType | true
    _avg?: CounterSchemaAvgAggregateInputType
    _sum?: CounterSchemaSumAggregateInputType
    _min?: CounterSchemaMinAggregateInputType
    _max?: CounterSchemaMaxAggregateInputType
  }

  export type CounterSchemaGroupByOutputType = {
    id: string
    seq: number
    _count: CounterSchemaCountAggregateOutputType | null
    _avg: CounterSchemaAvgAggregateOutputType | null
    _sum: CounterSchemaSumAggregateOutputType | null
    _min: CounterSchemaMinAggregateOutputType | null
    _max: CounterSchemaMaxAggregateOutputType | null
  }

  type GetCounterSchemaGroupByPayload<T extends counterSchemaGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CounterSchemaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CounterSchemaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CounterSchemaGroupByOutputType[P]>
            : GetScalarType<T[P], CounterSchemaGroupByOutputType[P]>
        }
      >
    >


  export type counterSchemaSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    seq?: boolean
  }, ExtArgs["result"]["counterSchema"]>

  export type counterSchemaSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    seq?: boolean
  }, ExtArgs["result"]["counterSchema"]>

  export type counterSchemaSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    seq?: boolean
  }, ExtArgs["result"]["counterSchema"]>

  export type counterSchemaSelectScalar = {
    id?: boolean
    seq?: boolean
  }

  export type counterSchemaOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "seq", ExtArgs["result"]["counterSchema"]>

  export type $counterSchemaPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "counterSchema"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      seq: number
    }, ExtArgs["result"]["counterSchema"]>
    composites: {}
  }

  type counterSchemaGetPayload<S extends boolean | null | undefined | counterSchemaDefaultArgs> = $Result.GetResult<Prisma.$counterSchemaPayload, S>

  type counterSchemaCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<counterSchemaFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CounterSchemaCountAggregateInputType | true
    }

  export interface counterSchemaDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['counterSchema'], meta: { name: 'counterSchema' } }
    /**
     * Find zero or one CounterSchema that matches the filter.
     * @param {counterSchemaFindUniqueArgs} args - Arguments to find a CounterSchema
     * @example
     * // Get one CounterSchema
     * const counterSchema = await prisma.counterSchema.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends counterSchemaFindUniqueArgs>(args: SelectSubset<T, counterSchemaFindUniqueArgs<ExtArgs>>): Prisma__counterSchemaClient<$Result.GetResult<Prisma.$counterSchemaPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one CounterSchema that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {counterSchemaFindUniqueOrThrowArgs} args - Arguments to find a CounterSchema
     * @example
     * // Get one CounterSchema
     * const counterSchema = await prisma.counterSchema.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends counterSchemaFindUniqueOrThrowArgs>(args: SelectSubset<T, counterSchemaFindUniqueOrThrowArgs<ExtArgs>>): Prisma__counterSchemaClient<$Result.GetResult<Prisma.$counterSchemaPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CounterSchema that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {counterSchemaFindFirstArgs} args - Arguments to find a CounterSchema
     * @example
     * // Get one CounterSchema
     * const counterSchema = await prisma.counterSchema.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends counterSchemaFindFirstArgs>(args?: SelectSubset<T, counterSchemaFindFirstArgs<ExtArgs>>): Prisma__counterSchemaClient<$Result.GetResult<Prisma.$counterSchemaPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CounterSchema that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {counterSchemaFindFirstOrThrowArgs} args - Arguments to find a CounterSchema
     * @example
     * // Get one CounterSchema
     * const counterSchema = await prisma.counterSchema.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends counterSchemaFindFirstOrThrowArgs>(args?: SelectSubset<T, counterSchemaFindFirstOrThrowArgs<ExtArgs>>): Prisma__counterSchemaClient<$Result.GetResult<Prisma.$counterSchemaPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more CounterSchemas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {counterSchemaFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CounterSchemas
     * const counterSchemas = await prisma.counterSchema.findMany()
     * 
     * // Get first 10 CounterSchemas
     * const counterSchemas = await prisma.counterSchema.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const counterSchemaWithIdOnly = await prisma.counterSchema.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends counterSchemaFindManyArgs>(args?: SelectSubset<T, counterSchemaFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$counterSchemaPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a CounterSchema.
     * @param {counterSchemaCreateArgs} args - Arguments to create a CounterSchema.
     * @example
     * // Create one CounterSchema
     * const CounterSchema = await prisma.counterSchema.create({
     *   data: {
     *     // ... data to create a CounterSchema
     *   }
     * })
     * 
     */
    create<T extends counterSchemaCreateArgs>(args: SelectSubset<T, counterSchemaCreateArgs<ExtArgs>>): Prisma__counterSchemaClient<$Result.GetResult<Prisma.$counterSchemaPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many CounterSchemas.
     * @param {counterSchemaCreateManyArgs} args - Arguments to create many CounterSchemas.
     * @example
     * // Create many CounterSchemas
     * const counterSchema = await prisma.counterSchema.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends counterSchemaCreateManyArgs>(args?: SelectSubset<T, counterSchemaCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many CounterSchemas and returns the data saved in the database.
     * @param {counterSchemaCreateManyAndReturnArgs} args - Arguments to create many CounterSchemas.
     * @example
     * // Create many CounterSchemas
     * const counterSchema = await prisma.counterSchema.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many CounterSchemas and only return the `id`
     * const counterSchemaWithIdOnly = await prisma.counterSchema.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends counterSchemaCreateManyAndReturnArgs>(args?: SelectSubset<T, counterSchemaCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$counterSchemaPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a CounterSchema.
     * @param {counterSchemaDeleteArgs} args - Arguments to delete one CounterSchema.
     * @example
     * // Delete one CounterSchema
     * const CounterSchema = await prisma.counterSchema.delete({
     *   where: {
     *     // ... filter to delete one CounterSchema
     *   }
     * })
     * 
     */
    delete<T extends counterSchemaDeleteArgs>(args: SelectSubset<T, counterSchemaDeleteArgs<ExtArgs>>): Prisma__counterSchemaClient<$Result.GetResult<Prisma.$counterSchemaPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one CounterSchema.
     * @param {counterSchemaUpdateArgs} args - Arguments to update one CounterSchema.
     * @example
     * // Update one CounterSchema
     * const counterSchema = await prisma.counterSchema.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends counterSchemaUpdateArgs>(args: SelectSubset<T, counterSchemaUpdateArgs<ExtArgs>>): Prisma__counterSchemaClient<$Result.GetResult<Prisma.$counterSchemaPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more CounterSchemas.
     * @param {counterSchemaDeleteManyArgs} args - Arguments to filter CounterSchemas to delete.
     * @example
     * // Delete a few CounterSchemas
     * const { count } = await prisma.counterSchema.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends counterSchemaDeleteManyArgs>(args?: SelectSubset<T, counterSchemaDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CounterSchemas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {counterSchemaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CounterSchemas
     * const counterSchema = await prisma.counterSchema.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends counterSchemaUpdateManyArgs>(args: SelectSubset<T, counterSchemaUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CounterSchemas and returns the data updated in the database.
     * @param {counterSchemaUpdateManyAndReturnArgs} args - Arguments to update many CounterSchemas.
     * @example
     * // Update many CounterSchemas
     * const counterSchema = await prisma.counterSchema.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more CounterSchemas and only return the `id`
     * const counterSchemaWithIdOnly = await prisma.counterSchema.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends counterSchemaUpdateManyAndReturnArgs>(args: SelectSubset<T, counterSchemaUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$counterSchemaPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one CounterSchema.
     * @param {counterSchemaUpsertArgs} args - Arguments to update or create a CounterSchema.
     * @example
     * // Update or create a CounterSchema
     * const counterSchema = await prisma.counterSchema.upsert({
     *   create: {
     *     // ... data to create a CounterSchema
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CounterSchema we want to update
     *   }
     * })
     */
    upsert<T extends counterSchemaUpsertArgs>(args: SelectSubset<T, counterSchemaUpsertArgs<ExtArgs>>): Prisma__counterSchemaClient<$Result.GetResult<Prisma.$counterSchemaPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of CounterSchemas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {counterSchemaCountArgs} args - Arguments to filter CounterSchemas to count.
     * @example
     * // Count the number of CounterSchemas
     * const count = await prisma.counterSchema.count({
     *   where: {
     *     // ... the filter for the CounterSchemas we want to count
     *   }
     * })
    **/
    count<T extends counterSchemaCountArgs>(
      args?: Subset<T, counterSchemaCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CounterSchemaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CounterSchema.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CounterSchemaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CounterSchemaAggregateArgs>(args: Subset<T, CounterSchemaAggregateArgs>): Prisma.PrismaPromise<GetCounterSchemaAggregateType<T>>

    /**
     * Group by CounterSchema.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {counterSchemaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends counterSchemaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: counterSchemaGroupByArgs['orderBy'] }
        : { orderBy?: counterSchemaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, counterSchemaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCounterSchemaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the counterSchema model
   */
  readonly fields: counterSchemaFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for counterSchema.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__counterSchemaClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the counterSchema model
   */
  interface counterSchemaFieldRefs {
    readonly id: FieldRef<"counterSchema", 'String'>
    readonly seq: FieldRef<"counterSchema", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * counterSchema findUnique
   */
  export type counterSchemaFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the counterSchema
     */
    select?: counterSchemaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the counterSchema
     */
    omit?: counterSchemaOmit<ExtArgs> | null
    /**
     * Filter, which counterSchema to fetch.
     */
    where: counterSchemaWhereUniqueInput
  }

  /**
   * counterSchema findUniqueOrThrow
   */
  export type counterSchemaFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the counterSchema
     */
    select?: counterSchemaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the counterSchema
     */
    omit?: counterSchemaOmit<ExtArgs> | null
    /**
     * Filter, which counterSchema to fetch.
     */
    where: counterSchemaWhereUniqueInput
  }

  /**
   * counterSchema findFirst
   */
  export type counterSchemaFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the counterSchema
     */
    select?: counterSchemaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the counterSchema
     */
    omit?: counterSchemaOmit<ExtArgs> | null
    /**
     * Filter, which counterSchema to fetch.
     */
    where?: counterSchemaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of counterSchemas to fetch.
     */
    orderBy?: counterSchemaOrderByWithRelationInput | counterSchemaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for counterSchemas.
     */
    cursor?: counterSchemaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` counterSchemas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` counterSchemas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of counterSchemas.
     */
    distinct?: CounterSchemaScalarFieldEnum | CounterSchemaScalarFieldEnum[]
  }

  /**
   * counterSchema findFirstOrThrow
   */
  export type counterSchemaFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the counterSchema
     */
    select?: counterSchemaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the counterSchema
     */
    omit?: counterSchemaOmit<ExtArgs> | null
    /**
     * Filter, which counterSchema to fetch.
     */
    where?: counterSchemaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of counterSchemas to fetch.
     */
    orderBy?: counterSchemaOrderByWithRelationInput | counterSchemaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for counterSchemas.
     */
    cursor?: counterSchemaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` counterSchemas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` counterSchemas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of counterSchemas.
     */
    distinct?: CounterSchemaScalarFieldEnum | CounterSchemaScalarFieldEnum[]
  }

  /**
   * counterSchema findMany
   */
  export type counterSchemaFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the counterSchema
     */
    select?: counterSchemaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the counterSchema
     */
    omit?: counterSchemaOmit<ExtArgs> | null
    /**
     * Filter, which counterSchemas to fetch.
     */
    where?: counterSchemaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of counterSchemas to fetch.
     */
    orderBy?: counterSchemaOrderByWithRelationInput | counterSchemaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing counterSchemas.
     */
    cursor?: counterSchemaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` counterSchemas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` counterSchemas.
     */
    skip?: number
    distinct?: CounterSchemaScalarFieldEnum | CounterSchemaScalarFieldEnum[]
  }

  /**
   * counterSchema create
   */
  export type counterSchemaCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the counterSchema
     */
    select?: counterSchemaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the counterSchema
     */
    omit?: counterSchemaOmit<ExtArgs> | null
    /**
     * The data needed to create a counterSchema.
     */
    data: XOR<counterSchemaCreateInput, counterSchemaUncheckedCreateInput>
  }

  /**
   * counterSchema createMany
   */
  export type counterSchemaCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many counterSchemas.
     */
    data: counterSchemaCreateManyInput | counterSchemaCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * counterSchema createManyAndReturn
   */
  export type counterSchemaCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the counterSchema
     */
    select?: counterSchemaSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the counterSchema
     */
    omit?: counterSchemaOmit<ExtArgs> | null
    /**
     * The data used to create many counterSchemas.
     */
    data: counterSchemaCreateManyInput | counterSchemaCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * counterSchema update
   */
  export type counterSchemaUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the counterSchema
     */
    select?: counterSchemaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the counterSchema
     */
    omit?: counterSchemaOmit<ExtArgs> | null
    /**
     * The data needed to update a counterSchema.
     */
    data: XOR<counterSchemaUpdateInput, counterSchemaUncheckedUpdateInput>
    /**
     * Choose, which counterSchema to update.
     */
    where: counterSchemaWhereUniqueInput
  }

  /**
   * counterSchema updateMany
   */
  export type counterSchemaUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update counterSchemas.
     */
    data: XOR<counterSchemaUpdateManyMutationInput, counterSchemaUncheckedUpdateManyInput>
    /**
     * Filter which counterSchemas to update
     */
    where?: counterSchemaWhereInput
    /**
     * Limit how many counterSchemas to update.
     */
    limit?: number
  }

  /**
   * counterSchema updateManyAndReturn
   */
  export type counterSchemaUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the counterSchema
     */
    select?: counterSchemaSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the counterSchema
     */
    omit?: counterSchemaOmit<ExtArgs> | null
    /**
     * The data used to update counterSchemas.
     */
    data: XOR<counterSchemaUpdateManyMutationInput, counterSchemaUncheckedUpdateManyInput>
    /**
     * Filter which counterSchemas to update
     */
    where?: counterSchemaWhereInput
    /**
     * Limit how many counterSchemas to update.
     */
    limit?: number
  }

  /**
   * counterSchema upsert
   */
  export type counterSchemaUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the counterSchema
     */
    select?: counterSchemaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the counterSchema
     */
    omit?: counterSchemaOmit<ExtArgs> | null
    /**
     * The filter to search for the counterSchema to update in case it exists.
     */
    where: counterSchemaWhereUniqueInput
    /**
     * In case the counterSchema found by the `where` argument doesn't exist, create a new counterSchema with this data.
     */
    create: XOR<counterSchemaCreateInput, counterSchemaUncheckedCreateInput>
    /**
     * In case the counterSchema was found with the provided `where` argument, update it with this data.
     */
    update: XOR<counterSchemaUpdateInput, counterSchemaUncheckedUpdateInput>
  }

  /**
   * counterSchema delete
   */
  export type counterSchemaDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the counterSchema
     */
    select?: counterSchemaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the counterSchema
     */
    omit?: counterSchemaOmit<ExtArgs> | null
    /**
     * Filter which counterSchema to delete.
     */
    where: counterSchemaWhereUniqueInput
  }

  /**
   * counterSchema deleteMany
   */
  export type counterSchemaDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which counterSchemas to delete
     */
    where?: counterSchemaWhereInput
    /**
     * Limit how many counterSchemas to delete.
     */
    limit?: number
  }

  /**
   * counterSchema without action
   */
  export type counterSchemaDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the counterSchema
     */
    select?: counterSchemaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the counterSchema
     */
    omit?: counterSchemaOmit<ExtArgs> | null
  }


  /**
   * Model rateLimitSchema
   */

  export type AggregateRateLimitSchema = {
    _count: RateLimitSchemaCountAggregateOutputType | null
    _avg: RateLimitSchemaAvgAggregateOutputType | null
    _sum: RateLimitSchemaSumAggregateOutputType | null
    _min: RateLimitSchemaMinAggregateOutputType | null
    _max: RateLimitSchemaMaxAggregateOutputType | null
  }

  export type RateLimitSchemaAvgAggregateOutputType = {
    requestCount: number | null
  }

  export type RateLimitSchemaSumAggregateOutputType = {
    requestCount: number | null
  }

  export type RateLimitSchemaMinAggregateOutputType = {
    deviceID: string | null
    routeKey: string | null
    requestCount: number | null
    lastRequestAt: Date | null
  }

  export type RateLimitSchemaMaxAggregateOutputType = {
    deviceID: string | null
    routeKey: string | null
    requestCount: number | null
    lastRequestAt: Date | null
  }

  export type RateLimitSchemaCountAggregateOutputType = {
    deviceID: number
    routeKey: number
    requestCount: number
    lastRequestAt: number
    _all: number
  }


  export type RateLimitSchemaAvgAggregateInputType = {
    requestCount?: true
  }

  export type RateLimitSchemaSumAggregateInputType = {
    requestCount?: true
  }

  export type RateLimitSchemaMinAggregateInputType = {
    deviceID?: true
    routeKey?: true
    requestCount?: true
    lastRequestAt?: true
  }

  export type RateLimitSchemaMaxAggregateInputType = {
    deviceID?: true
    routeKey?: true
    requestCount?: true
    lastRequestAt?: true
  }

  export type RateLimitSchemaCountAggregateInputType = {
    deviceID?: true
    routeKey?: true
    requestCount?: true
    lastRequestAt?: true
    _all?: true
  }

  export type RateLimitSchemaAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which rateLimitSchema to aggregate.
     */
    where?: rateLimitSchemaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of rateLimitSchemas to fetch.
     */
    orderBy?: rateLimitSchemaOrderByWithRelationInput | rateLimitSchemaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: rateLimitSchemaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` rateLimitSchemas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` rateLimitSchemas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned rateLimitSchemas
    **/
    _count?: true | RateLimitSchemaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RateLimitSchemaAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RateLimitSchemaSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RateLimitSchemaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RateLimitSchemaMaxAggregateInputType
  }

  export type GetRateLimitSchemaAggregateType<T extends RateLimitSchemaAggregateArgs> = {
        [P in keyof T & keyof AggregateRateLimitSchema]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRateLimitSchema[P]>
      : GetScalarType<T[P], AggregateRateLimitSchema[P]>
  }




  export type rateLimitSchemaGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: rateLimitSchemaWhereInput
    orderBy?: rateLimitSchemaOrderByWithAggregationInput | rateLimitSchemaOrderByWithAggregationInput[]
    by: RateLimitSchemaScalarFieldEnum[] | RateLimitSchemaScalarFieldEnum
    having?: rateLimitSchemaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RateLimitSchemaCountAggregateInputType | true
    _avg?: RateLimitSchemaAvgAggregateInputType
    _sum?: RateLimitSchemaSumAggregateInputType
    _min?: RateLimitSchemaMinAggregateInputType
    _max?: RateLimitSchemaMaxAggregateInputType
  }

  export type RateLimitSchemaGroupByOutputType = {
    deviceID: string
    routeKey: string
    requestCount: number
    lastRequestAt: Date
    _count: RateLimitSchemaCountAggregateOutputType | null
    _avg: RateLimitSchemaAvgAggregateOutputType | null
    _sum: RateLimitSchemaSumAggregateOutputType | null
    _min: RateLimitSchemaMinAggregateOutputType | null
    _max: RateLimitSchemaMaxAggregateOutputType | null
  }

  type GetRateLimitSchemaGroupByPayload<T extends rateLimitSchemaGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RateLimitSchemaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RateLimitSchemaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RateLimitSchemaGroupByOutputType[P]>
            : GetScalarType<T[P], RateLimitSchemaGroupByOutputType[P]>
        }
      >
    >


  export type rateLimitSchemaSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    deviceID?: boolean
    routeKey?: boolean
    requestCount?: boolean
    lastRequestAt?: boolean
  }, ExtArgs["result"]["rateLimitSchema"]>

  export type rateLimitSchemaSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    deviceID?: boolean
    routeKey?: boolean
    requestCount?: boolean
    lastRequestAt?: boolean
  }, ExtArgs["result"]["rateLimitSchema"]>

  export type rateLimitSchemaSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    deviceID?: boolean
    routeKey?: boolean
    requestCount?: boolean
    lastRequestAt?: boolean
  }, ExtArgs["result"]["rateLimitSchema"]>

  export type rateLimitSchemaSelectScalar = {
    deviceID?: boolean
    routeKey?: boolean
    requestCount?: boolean
    lastRequestAt?: boolean
  }

  export type rateLimitSchemaOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"deviceID" | "routeKey" | "requestCount" | "lastRequestAt", ExtArgs["result"]["rateLimitSchema"]>

  export type $rateLimitSchemaPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "rateLimitSchema"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      deviceID: string
      routeKey: string
      requestCount: number
      lastRequestAt: Date
    }, ExtArgs["result"]["rateLimitSchema"]>
    composites: {}
  }

  type rateLimitSchemaGetPayload<S extends boolean | null | undefined | rateLimitSchemaDefaultArgs> = $Result.GetResult<Prisma.$rateLimitSchemaPayload, S>

  type rateLimitSchemaCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<rateLimitSchemaFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: RateLimitSchemaCountAggregateInputType | true
    }

  export interface rateLimitSchemaDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['rateLimitSchema'], meta: { name: 'rateLimitSchema' } }
    /**
     * Find zero or one RateLimitSchema that matches the filter.
     * @param {rateLimitSchemaFindUniqueArgs} args - Arguments to find a RateLimitSchema
     * @example
     * // Get one RateLimitSchema
     * const rateLimitSchema = await prisma.rateLimitSchema.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends rateLimitSchemaFindUniqueArgs>(args: SelectSubset<T, rateLimitSchemaFindUniqueArgs<ExtArgs>>): Prisma__rateLimitSchemaClient<$Result.GetResult<Prisma.$rateLimitSchemaPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one RateLimitSchema that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {rateLimitSchemaFindUniqueOrThrowArgs} args - Arguments to find a RateLimitSchema
     * @example
     * // Get one RateLimitSchema
     * const rateLimitSchema = await prisma.rateLimitSchema.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends rateLimitSchemaFindUniqueOrThrowArgs>(args: SelectSubset<T, rateLimitSchemaFindUniqueOrThrowArgs<ExtArgs>>): Prisma__rateLimitSchemaClient<$Result.GetResult<Prisma.$rateLimitSchemaPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first RateLimitSchema that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {rateLimitSchemaFindFirstArgs} args - Arguments to find a RateLimitSchema
     * @example
     * // Get one RateLimitSchema
     * const rateLimitSchema = await prisma.rateLimitSchema.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends rateLimitSchemaFindFirstArgs>(args?: SelectSubset<T, rateLimitSchemaFindFirstArgs<ExtArgs>>): Prisma__rateLimitSchemaClient<$Result.GetResult<Prisma.$rateLimitSchemaPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first RateLimitSchema that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {rateLimitSchemaFindFirstOrThrowArgs} args - Arguments to find a RateLimitSchema
     * @example
     * // Get one RateLimitSchema
     * const rateLimitSchema = await prisma.rateLimitSchema.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends rateLimitSchemaFindFirstOrThrowArgs>(args?: SelectSubset<T, rateLimitSchemaFindFirstOrThrowArgs<ExtArgs>>): Prisma__rateLimitSchemaClient<$Result.GetResult<Prisma.$rateLimitSchemaPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more RateLimitSchemas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {rateLimitSchemaFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all RateLimitSchemas
     * const rateLimitSchemas = await prisma.rateLimitSchema.findMany()
     * 
     * // Get first 10 RateLimitSchemas
     * const rateLimitSchemas = await prisma.rateLimitSchema.findMany({ take: 10 })
     * 
     * // Only select the `deviceID`
     * const rateLimitSchemaWithDeviceIDOnly = await prisma.rateLimitSchema.findMany({ select: { deviceID: true } })
     * 
     */
    findMany<T extends rateLimitSchemaFindManyArgs>(args?: SelectSubset<T, rateLimitSchemaFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$rateLimitSchemaPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a RateLimitSchema.
     * @param {rateLimitSchemaCreateArgs} args - Arguments to create a RateLimitSchema.
     * @example
     * // Create one RateLimitSchema
     * const RateLimitSchema = await prisma.rateLimitSchema.create({
     *   data: {
     *     // ... data to create a RateLimitSchema
     *   }
     * })
     * 
     */
    create<T extends rateLimitSchemaCreateArgs>(args: SelectSubset<T, rateLimitSchemaCreateArgs<ExtArgs>>): Prisma__rateLimitSchemaClient<$Result.GetResult<Prisma.$rateLimitSchemaPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many RateLimitSchemas.
     * @param {rateLimitSchemaCreateManyArgs} args - Arguments to create many RateLimitSchemas.
     * @example
     * // Create many RateLimitSchemas
     * const rateLimitSchema = await prisma.rateLimitSchema.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends rateLimitSchemaCreateManyArgs>(args?: SelectSubset<T, rateLimitSchemaCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many RateLimitSchemas and returns the data saved in the database.
     * @param {rateLimitSchemaCreateManyAndReturnArgs} args - Arguments to create many RateLimitSchemas.
     * @example
     * // Create many RateLimitSchemas
     * const rateLimitSchema = await prisma.rateLimitSchema.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many RateLimitSchemas and only return the `deviceID`
     * const rateLimitSchemaWithDeviceIDOnly = await prisma.rateLimitSchema.createManyAndReturn({
     *   select: { deviceID: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends rateLimitSchemaCreateManyAndReturnArgs>(args?: SelectSubset<T, rateLimitSchemaCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$rateLimitSchemaPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a RateLimitSchema.
     * @param {rateLimitSchemaDeleteArgs} args - Arguments to delete one RateLimitSchema.
     * @example
     * // Delete one RateLimitSchema
     * const RateLimitSchema = await prisma.rateLimitSchema.delete({
     *   where: {
     *     // ... filter to delete one RateLimitSchema
     *   }
     * })
     * 
     */
    delete<T extends rateLimitSchemaDeleteArgs>(args: SelectSubset<T, rateLimitSchemaDeleteArgs<ExtArgs>>): Prisma__rateLimitSchemaClient<$Result.GetResult<Prisma.$rateLimitSchemaPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one RateLimitSchema.
     * @param {rateLimitSchemaUpdateArgs} args - Arguments to update one RateLimitSchema.
     * @example
     * // Update one RateLimitSchema
     * const rateLimitSchema = await prisma.rateLimitSchema.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends rateLimitSchemaUpdateArgs>(args: SelectSubset<T, rateLimitSchemaUpdateArgs<ExtArgs>>): Prisma__rateLimitSchemaClient<$Result.GetResult<Prisma.$rateLimitSchemaPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more RateLimitSchemas.
     * @param {rateLimitSchemaDeleteManyArgs} args - Arguments to filter RateLimitSchemas to delete.
     * @example
     * // Delete a few RateLimitSchemas
     * const { count } = await prisma.rateLimitSchema.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends rateLimitSchemaDeleteManyArgs>(args?: SelectSubset<T, rateLimitSchemaDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more RateLimitSchemas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {rateLimitSchemaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many RateLimitSchemas
     * const rateLimitSchema = await prisma.rateLimitSchema.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends rateLimitSchemaUpdateManyArgs>(args: SelectSubset<T, rateLimitSchemaUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more RateLimitSchemas and returns the data updated in the database.
     * @param {rateLimitSchemaUpdateManyAndReturnArgs} args - Arguments to update many RateLimitSchemas.
     * @example
     * // Update many RateLimitSchemas
     * const rateLimitSchema = await prisma.rateLimitSchema.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more RateLimitSchemas and only return the `deviceID`
     * const rateLimitSchemaWithDeviceIDOnly = await prisma.rateLimitSchema.updateManyAndReturn({
     *   select: { deviceID: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends rateLimitSchemaUpdateManyAndReturnArgs>(args: SelectSubset<T, rateLimitSchemaUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$rateLimitSchemaPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one RateLimitSchema.
     * @param {rateLimitSchemaUpsertArgs} args - Arguments to update or create a RateLimitSchema.
     * @example
     * // Update or create a RateLimitSchema
     * const rateLimitSchema = await prisma.rateLimitSchema.upsert({
     *   create: {
     *     // ... data to create a RateLimitSchema
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the RateLimitSchema we want to update
     *   }
     * })
     */
    upsert<T extends rateLimitSchemaUpsertArgs>(args: SelectSubset<T, rateLimitSchemaUpsertArgs<ExtArgs>>): Prisma__rateLimitSchemaClient<$Result.GetResult<Prisma.$rateLimitSchemaPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of RateLimitSchemas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {rateLimitSchemaCountArgs} args - Arguments to filter RateLimitSchemas to count.
     * @example
     * // Count the number of RateLimitSchemas
     * const count = await prisma.rateLimitSchema.count({
     *   where: {
     *     // ... the filter for the RateLimitSchemas we want to count
     *   }
     * })
    **/
    count<T extends rateLimitSchemaCountArgs>(
      args?: Subset<T, rateLimitSchemaCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RateLimitSchemaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a RateLimitSchema.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RateLimitSchemaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RateLimitSchemaAggregateArgs>(args: Subset<T, RateLimitSchemaAggregateArgs>): Prisma.PrismaPromise<GetRateLimitSchemaAggregateType<T>>

    /**
     * Group by RateLimitSchema.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {rateLimitSchemaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends rateLimitSchemaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: rateLimitSchemaGroupByArgs['orderBy'] }
        : { orderBy?: rateLimitSchemaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, rateLimitSchemaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRateLimitSchemaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the rateLimitSchema model
   */
  readonly fields: rateLimitSchemaFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for rateLimitSchema.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__rateLimitSchemaClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the rateLimitSchema model
   */
  interface rateLimitSchemaFieldRefs {
    readonly deviceID: FieldRef<"rateLimitSchema", 'String'>
    readonly routeKey: FieldRef<"rateLimitSchema", 'String'>
    readonly requestCount: FieldRef<"rateLimitSchema", 'Int'>
    readonly lastRequestAt: FieldRef<"rateLimitSchema", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * rateLimitSchema findUnique
   */
  export type rateLimitSchemaFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the rateLimitSchema
     */
    select?: rateLimitSchemaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the rateLimitSchema
     */
    omit?: rateLimitSchemaOmit<ExtArgs> | null
    /**
     * Filter, which rateLimitSchema to fetch.
     */
    where: rateLimitSchemaWhereUniqueInput
  }

  /**
   * rateLimitSchema findUniqueOrThrow
   */
  export type rateLimitSchemaFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the rateLimitSchema
     */
    select?: rateLimitSchemaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the rateLimitSchema
     */
    omit?: rateLimitSchemaOmit<ExtArgs> | null
    /**
     * Filter, which rateLimitSchema to fetch.
     */
    where: rateLimitSchemaWhereUniqueInput
  }

  /**
   * rateLimitSchema findFirst
   */
  export type rateLimitSchemaFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the rateLimitSchema
     */
    select?: rateLimitSchemaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the rateLimitSchema
     */
    omit?: rateLimitSchemaOmit<ExtArgs> | null
    /**
     * Filter, which rateLimitSchema to fetch.
     */
    where?: rateLimitSchemaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of rateLimitSchemas to fetch.
     */
    orderBy?: rateLimitSchemaOrderByWithRelationInput | rateLimitSchemaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for rateLimitSchemas.
     */
    cursor?: rateLimitSchemaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` rateLimitSchemas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` rateLimitSchemas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of rateLimitSchemas.
     */
    distinct?: RateLimitSchemaScalarFieldEnum | RateLimitSchemaScalarFieldEnum[]
  }

  /**
   * rateLimitSchema findFirstOrThrow
   */
  export type rateLimitSchemaFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the rateLimitSchema
     */
    select?: rateLimitSchemaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the rateLimitSchema
     */
    omit?: rateLimitSchemaOmit<ExtArgs> | null
    /**
     * Filter, which rateLimitSchema to fetch.
     */
    where?: rateLimitSchemaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of rateLimitSchemas to fetch.
     */
    orderBy?: rateLimitSchemaOrderByWithRelationInput | rateLimitSchemaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for rateLimitSchemas.
     */
    cursor?: rateLimitSchemaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` rateLimitSchemas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` rateLimitSchemas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of rateLimitSchemas.
     */
    distinct?: RateLimitSchemaScalarFieldEnum | RateLimitSchemaScalarFieldEnum[]
  }

  /**
   * rateLimitSchema findMany
   */
  export type rateLimitSchemaFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the rateLimitSchema
     */
    select?: rateLimitSchemaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the rateLimitSchema
     */
    omit?: rateLimitSchemaOmit<ExtArgs> | null
    /**
     * Filter, which rateLimitSchemas to fetch.
     */
    where?: rateLimitSchemaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of rateLimitSchemas to fetch.
     */
    orderBy?: rateLimitSchemaOrderByWithRelationInput | rateLimitSchemaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing rateLimitSchemas.
     */
    cursor?: rateLimitSchemaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` rateLimitSchemas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` rateLimitSchemas.
     */
    skip?: number
    distinct?: RateLimitSchemaScalarFieldEnum | RateLimitSchemaScalarFieldEnum[]
  }

  /**
   * rateLimitSchema create
   */
  export type rateLimitSchemaCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the rateLimitSchema
     */
    select?: rateLimitSchemaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the rateLimitSchema
     */
    omit?: rateLimitSchemaOmit<ExtArgs> | null
    /**
     * The data needed to create a rateLimitSchema.
     */
    data: XOR<rateLimitSchemaCreateInput, rateLimitSchemaUncheckedCreateInput>
  }

  /**
   * rateLimitSchema createMany
   */
  export type rateLimitSchemaCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many rateLimitSchemas.
     */
    data: rateLimitSchemaCreateManyInput | rateLimitSchemaCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * rateLimitSchema createManyAndReturn
   */
  export type rateLimitSchemaCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the rateLimitSchema
     */
    select?: rateLimitSchemaSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the rateLimitSchema
     */
    omit?: rateLimitSchemaOmit<ExtArgs> | null
    /**
     * The data used to create many rateLimitSchemas.
     */
    data: rateLimitSchemaCreateManyInput | rateLimitSchemaCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * rateLimitSchema update
   */
  export type rateLimitSchemaUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the rateLimitSchema
     */
    select?: rateLimitSchemaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the rateLimitSchema
     */
    omit?: rateLimitSchemaOmit<ExtArgs> | null
    /**
     * The data needed to update a rateLimitSchema.
     */
    data: XOR<rateLimitSchemaUpdateInput, rateLimitSchemaUncheckedUpdateInput>
    /**
     * Choose, which rateLimitSchema to update.
     */
    where: rateLimitSchemaWhereUniqueInput
  }

  /**
   * rateLimitSchema updateMany
   */
  export type rateLimitSchemaUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update rateLimitSchemas.
     */
    data: XOR<rateLimitSchemaUpdateManyMutationInput, rateLimitSchemaUncheckedUpdateManyInput>
    /**
     * Filter which rateLimitSchemas to update
     */
    where?: rateLimitSchemaWhereInput
    /**
     * Limit how many rateLimitSchemas to update.
     */
    limit?: number
  }

  /**
   * rateLimitSchema updateManyAndReturn
   */
  export type rateLimitSchemaUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the rateLimitSchema
     */
    select?: rateLimitSchemaSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the rateLimitSchema
     */
    omit?: rateLimitSchemaOmit<ExtArgs> | null
    /**
     * The data used to update rateLimitSchemas.
     */
    data: XOR<rateLimitSchemaUpdateManyMutationInput, rateLimitSchemaUncheckedUpdateManyInput>
    /**
     * Filter which rateLimitSchemas to update
     */
    where?: rateLimitSchemaWhereInput
    /**
     * Limit how many rateLimitSchemas to update.
     */
    limit?: number
  }

  /**
   * rateLimitSchema upsert
   */
  export type rateLimitSchemaUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the rateLimitSchema
     */
    select?: rateLimitSchemaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the rateLimitSchema
     */
    omit?: rateLimitSchemaOmit<ExtArgs> | null
    /**
     * The filter to search for the rateLimitSchema to update in case it exists.
     */
    where: rateLimitSchemaWhereUniqueInput
    /**
     * In case the rateLimitSchema found by the `where` argument doesn't exist, create a new rateLimitSchema with this data.
     */
    create: XOR<rateLimitSchemaCreateInput, rateLimitSchemaUncheckedCreateInput>
    /**
     * In case the rateLimitSchema was found with the provided `where` argument, update it with this data.
     */
    update: XOR<rateLimitSchemaUpdateInput, rateLimitSchemaUncheckedUpdateInput>
  }

  /**
   * rateLimitSchema delete
   */
  export type rateLimitSchemaDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the rateLimitSchema
     */
    select?: rateLimitSchemaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the rateLimitSchema
     */
    omit?: rateLimitSchemaOmit<ExtArgs> | null
    /**
     * Filter which rateLimitSchema to delete.
     */
    where: rateLimitSchemaWhereUniqueInput
  }

  /**
   * rateLimitSchema deleteMany
   */
  export type rateLimitSchemaDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which rateLimitSchemas to delete
     */
    where?: rateLimitSchemaWhereInput
    /**
     * Limit how many rateLimitSchemas to delete.
     */
    limit?: number
  }

  /**
   * rateLimitSchema without action
   */
  export type rateLimitSchemaDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the rateLimitSchema
     */
    select?: rateLimitSchemaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the rateLimitSchema
     */
    omit?: rateLimitSchemaOmit<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const DeviceRateLimitScalarFieldEnum: {
    deviceID: 'deviceID',
    attempts: 'attempts',
    lastAttemptAt: 'lastAttemptAt',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type DeviceRateLimitScalarFieldEnum = (typeof DeviceRateLimitScalarFieldEnum)[keyof typeof DeviceRateLimitScalarFieldEnum]


  export const AuthLogSchemaScalarFieldEnum: {
    id: 'id',
    userID: 'userID',
    eventType: 'eventType',
    deviceID: 'deviceID',
    deviceName: 'deviceName',
    deviceType: 'deviceType',
    performedBy: 'performedBy',
    timestamp: 'timestamp'
  };

  export type AuthLogSchemaScalarFieldEnum = (typeof AuthLogSchemaScalarFieldEnum)[keyof typeof AuthLogSchemaScalarFieldEnum]


  export const AdminActionScalarFieldEnum: {
    id: 'id',
    targetUserID: 'targetUserID',
    reason: 'reason',
    filter: 'filter'
  };

  export type AdminActionScalarFieldEnum = (typeof AdminActionScalarFieldEnum)[keyof typeof AdminActionScalarFieldEnum]


  export const CounterSchemaScalarFieldEnum: {
    id: 'id',
    seq: 'seq'
  };

  export type CounterSchemaScalarFieldEnum = (typeof CounterSchemaScalarFieldEnum)[keyof typeof CounterSchemaScalarFieldEnum]


  export const RateLimitSchemaScalarFieldEnum: {
    deviceID: 'deviceID',
    routeKey: 'routeKey',
    requestCount: 'requestCount',
    lastRequestAt: 'lastRequestAt'
  };

  export type RateLimitSchemaScalarFieldEnum = (typeof RateLimitSchemaScalarFieldEnum)[keyof typeof RateLimitSchemaScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'AuthLogEvent'
   */
  export type EnumAuthLogEventFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AuthLogEvent'>
    


  /**
   * Reference to a field of type 'AuthLogEvent[]'
   */
  export type ListEnumAuthLogEventFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AuthLogEvent[]'>
    


  /**
   * Reference to a field of type 'DeviceType'
   */
  export type EnumDeviceTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DeviceType'>
    


  /**
   * Reference to a field of type 'DeviceType[]'
   */
  export type ListEnumDeviceTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DeviceType[]'>
    


  /**
   * Reference to a field of type 'PerformedBy'
   */
  export type EnumPerformedByFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PerformedBy'>
    


  /**
   * Reference to a field of type 'PerformedBy[]'
   */
  export type ListEnumPerformedByFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PerformedBy[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type DeviceRateLimitWhereInput = {
    AND?: DeviceRateLimitWhereInput | DeviceRateLimitWhereInput[]
    OR?: DeviceRateLimitWhereInput[]
    NOT?: DeviceRateLimitWhereInput | DeviceRateLimitWhereInput[]
    deviceID?: StringFilter<"DeviceRateLimit"> | string
    attempts?: IntFilter<"DeviceRateLimit"> | number
    lastAttemptAt?: DateTimeFilter<"DeviceRateLimit"> | Date | string
    createdAt?: DateTimeFilter<"DeviceRateLimit"> | Date | string
    updatedAt?: DateTimeFilter<"DeviceRateLimit"> | Date | string
  }

  export type DeviceRateLimitOrderByWithRelationInput = {
    deviceID?: SortOrder
    attempts?: SortOrder
    lastAttemptAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DeviceRateLimitWhereUniqueInput = Prisma.AtLeast<{
    deviceID?: string
    AND?: DeviceRateLimitWhereInput | DeviceRateLimitWhereInput[]
    OR?: DeviceRateLimitWhereInput[]
    NOT?: DeviceRateLimitWhereInput | DeviceRateLimitWhereInput[]
    attempts?: IntFilter<"DeviceRateLimit"> | number
    lastAttemptAt?: DateTimeFilter<"DeviceRateLimit"> | Date | string
    createdAt?: DateTimeFilter<"DeviceRateLimit"> | Date | string
    updatedAt?: DateTimeFilter<"DeviceRateLimit"> | Date | string
  }, "deviceID">

  export type DeviceRateLimitOrderByWithAggregationInput = {
    deviceID?: SortOrder
    attempts?: SortOrder
    lastAttemptAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: DeviceRateLimitCountOrderByAggregateInput
    _avg?: DeviceRateLimitAvgOrderByAggregateInput
    _max?: DeviceRateLimitMaxOrderByAggregateInput
    _min?: DeviceRateLimitMinOrderByAggregateInput
    _sum?: DeviceRateLimitSumOrderByAggregateInput
  }

  export type DeviceRateLimitScalarWhereWithAggregatesInput = {
    AND?: DeviceRateLimitScalarWhereWithAggregatesInput | DeviceRateLimitScalarWhereWithAggregatesInput[]
    OR?: DeviceRateLimitScalarWhereWithAggregatesInput[]
    NOT?: DeviceRateLimitScalarWhereWithAggregatesInput | DeviceRateLimitScalarWhereWithAggregatesInput[]
    deviceID?: StringWithAggregatesFilter<"DeviceRateLimit"> | string
    attempts?: IntWithAggregatesFilter<"DeviceRateLimit"> | number
    lastAttemptAt?: DateTimeWithAggregatesFilter<"DeviceRateLimit"> | Date | string
    createdAt?: DateTimeWithAggregatesFilter<"DeviceRateLimit"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"DeviceRateLimit"> | Date | string
  }

  export type AuthLogSchemaWhereInput = {
    AND?: AuthLogSchemaWhereInput | AuthLogSchemaWhereInput[]
    OR?: AuthLogSchemaWhereInput[]
    NOT?: AuthLogSchemaWhereInput | AuthLogSchemaWhereInput[]
    id?: IntFilter<"AuthLogSchema"> | number
    userID?: StringFilter<"AuthLogSchema"> | string
    eventType?: EnumAuthLogEventFilter<"AuthLogSchema"> | $Enums.AuthLogEvent
    deviceID?: StringFilter<"AuthLogSchema"> | string
    deviceName?: StringNullableFilter<"AuthLogSchema"> | string | null
    deviceType?: EnumDeviceTypeNullableFilter<"AuthLogSchema"> | $Enums.DeviceType | null
    performedBy?: EnumPerformedByFilter<"AuthLogSchema"> | $Enums.PerformedBy
    timestamp?: DateTimeFilter<"AuthLogSchema"> | Date | string
    adminAction?: XOR<AdminActionNullableScalarRelationFilter, AdminActionWhereInput> | null
  }

  export type AuthLogSchemaOrderByWithRelationInput = {
    id?: SortOrder
    userID?: SortOrder
    eventType?: SortOrder
    deviceID?: SortOrder
    deviceName?: SortOrderInput | SortOrder
    deviceType?: SortOrderInput | SortOrder
    performedBy?: SortOrder
    timestamp?: SortOrder
    adminAction?: AdminActionOrderByWithRelationInput
  }

  export type AuthLogSchemaWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: AuthLogSchemaWhereInput | AuthLogSchemaWhereInput[]
    OR?: AuthLogSchemaWhereInput[]
    NOT?: AuthLogSchemaWhereInput | AuthLogSchemaWhereInput[]
    userID?: StringFilter<"AuthLogSchema"> | string
    eventType?: EnumAuthLogEventFilter<"AuthLogSchema"> | $Enums.AuthLogEvent
    deviceID?: StringFilter<"AuthLogSchema"> | string
    deviceName?: StringNullableFilter<"AuthLogSchema"> | string | null
    deviceType?: EnumDeviceTypeNullableFilter<"AuthLogSchema"> | $Enums.DeviceType | null
    performedBy?: EnumPerformedByFilter<"AuthLogSchema"> | $Enums.PerformedBy
    timestamp?: DateTimeFilter<"AuthLogSchema"> | Date | string
    adminAction?: XOR<AdminActionNullableScalarRelationFilter, AdminActionWhereInput> | null
  }, "id">

  export type AuthLogSchemaOrderByWithAggregationInput = {
    id?: SortOrder
    userID?: SortOrder
    eventType?: SortOrder
    deviceID?: SortOrder
    deviceName?: SortOrderInput | SortOrder
    deviceType?: SortOrderInput | SortOrder
    performedBy?: SortOrder
    timestamp?: SortOrder
    _count?: AuthLogSchemaCountOrderByAggregateInput
    _avg?: AuthLogSchemaAvgOrderByAggregateInput
    _max?: AuthLogSchemaMaxOrderByAggregateInput
    _min?: AuthLogSchemaMinOrderByAggregateInput
    _sum?: AuthLogSchemaSumOrderByAggregateInput
  }

  export type AuthLogSchemaScalarWhereWithAggregatesInput = {
    AND?: AuthLogSchemaScalarWhereWithAggregatesInput | AuthLogSchemaScalarWhereWithAggregatesInput[]
    OR?: AuthLogSchemaScalarWhereWithAggregatesInput[]
    NOT?: AuthLogSchemaScalarWhereWithAggregatesInput | AuthLogSchemaScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"AuthLogSchema"> | number
    userID?: StringWithAggregatesFilter<"AuthLogSchema"> | string
    eventType?: EnumAuthLogEventWithAggregatesFilter<"AuthLogSchema"> | $Enums.AuthLogEvent
    deviceID?: StringWithAggregatesFilter<"AuthLogSchema"> | string
    deviceName?: StringNullableWithAggregatesFilter<"AuthLogSchema"> | string | null
    deviceType?: EnumDeviceTypeNullableWithAggregatesFilter<"AuthLogSchema"> | $Enums.DeviceType | null
    performedBy?: EnumPerformedByWithAggregatesFilter<"AuthLogSchema"> | $Enums.PerformedBy
    timestamp?: DateTimeWithAggregatesFilter<"AuthLogSchema"> | Date | string
  }

  export type AdminActionWhereInput = {
    AND?: AdminActionWhereInput | AdminActionWhereInput[]
    OR?: AdminActionWhereInput[]
    NOT?: AdminActionWhereInput | AdminActionWhereInput[]
    id?: IntFilter<"AdminAction"> | number
    targetUserID?: StringNullableFilter<"AdminAction"> | string | null
    reason?: StringNullableFilter<"AdminAction"> | string | null
    filter?: EnumAuthLogEventNullableListFilter<"AdminAction">
    authLog?: XOR<AuthLogSchemaScalarRelationFilter, AuthLogSchemaWhereInput>
  }

  export type AdminActionOrderByWithRelationInput = {
    id?: SortOrder
    targetUserID?: SortOrderInput | SortOrder
    reason?: SortOrderInput | SortOrder
    filter?: SortOrder
    authLog?: AuthLogSchemaOrderByWithRelationInput
  }

  export type AdminActionWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: AdminActionWhereInput | AdminActionWhereInput[]
    OR?: AdminActionWhereInput[]
    NOT?: AdminActionWhereInput | AdminActionWhereInput[]
    targetUserID?: StringNullableFilter<"AdminAction"> | string | null
    reason?: StringNullableFilter<"AdminAction"> | string | null
    filter?: EnumAuthLogEventNullableListFilter<"AdminAction">
    authLog?: XOR<AuthLogSchemaScalarRelationFilter, AuthLogSchemaWhereInput>
  }, "id">

  export type AdminActionOrderByWithAggregationInput = {
    id?: SortOrder
    targetUserID?: SortOrderInput | SortOrder
    reason?: SortOrderInput | SortOrder
    filter?: SortOrder
    _count?: AdminActionCountOrderByAggregateInput
    _avg?: AdminActionAvgOrderByAggregateInput
    _max?: AdminActionMaxOrderByAggregateInput
    _min?: AdminActionMinOrderByAggregateInput
    _sum?: AdminActionSumOrderByAggregateInput
  }

  export type AdminActionScalarWhereWithAggregatesInput = {
    AND?: AdminActionScalarWhereWithAggregatesInput | AdminActionScalarWhereWithAggregatesInput[]
    OR?: AdminActionScalarWhereWithAggregatesInput[]
    NOT?: AdminActionScalarWhereWithAggregatesInput | AdminActionScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"AdminAction"> | number
    targetUserID?: StringNullableWithAggregatesFilter<"AdminAction"> | string | null
    reason?: StringNullableWithAggregatesFilter<"AdminAction"> | string | null
    filter?: EnumAuthLogEventNullableListFilter<"AdminAction">
  }

  export type counterSchemaWhereInput = {
    AND?: counterSchemaWhereInput | counterSchemaWhereInput[]
    OR?: counterSchemaWhereInput[]
    NOT?: counterSchemaWhereInput | counterSchemaWhereInput[]
    id?: StringFilter<"counterSchema"> | string
    seq?: IntFilter<"counterSchema"> | number
  }

  export type counterSchemaOrderByWithRelationInput = {
    id?: SortOrder
    seq?: SortOrder
  }

  export type counterSchemaWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: counterSchemaWhereInput | counterSchemaWhereInput[]
    OR?: counterSchemaWhereInput[]
    NOT?: counterSchemaWhereInput | counterSchemaWhereInput[]
    seq?: IntFilter<"counterSchema"> | number
  }, "id">

  export type counterSchemaOrderByWithAggregationInput = {
    id?: SortOrder
    seq?: SortOrder
    _count?: counterSchemaCountOrderByAggregateInput
    _avg?: counterSchemaAvgOrderByAggregateInput
    _max?: counterSchemaMaxOrderByAggregateInput
    _min?: counterSchemaMinOrderByAggregateInput
    _sum?: counterSchemaSumOrderByAggregateInput
  }

  export type counterSchemaScalarWhereWithAggregatesInput = {
    AND?: counterSchemaScalarWhereWithAggregatesInput | counterSchemaScalarWhereWithAggregatesInput[]
    OR?: counterSchemaScalarWhereWithAggregatesInput[]
    NOT?: counterSchemaScalarWhereWithAggregatesInput | counterSchemaScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"counterSchema"> | string
    seq?: IntWithAggregatesFilter<"counterSchema"> | number
  }

  export type rateLimitSchemaWhereInput = {
    AND?: rateLimitSchemaWhereInput | rateLimitSchemaWhereInput[]
    OR?: rateLimitSchemaWhereInput[]
    NOT?: rateLimitSchemaWhereInput | rateLimitSchemaWhereInput[]
    deviceID?: StringFilter<"rateLimitSchema"> | string
    routeKey?: StringFilter<"rateLimitSchema"> | string
    requestCount?: IntFilter<"rateLimitSchema"> | number
    lastRequestAt?: DateTimeFilter<"rateLimitSchema"> | Date | string
  }

  export type rateLimitSchemaOrderByWithRelationInput = {
    deviceID?: SortOrder
    routeKey?: SortOrder
    requestCount?: SortOrder
    lastRequestAt?: SortOrder
  }

  export type rateLimitSchemaWhereUniqueInput = Prisma.AtLeast<{
    deviceID_routeKey?: rateLimitSchemaDeviceIDRouteKeyCompoundUniqueInput
    AND?: rateLimitSchemaWhereInput | rateLimitSchemaWhereInput[]
    OR?: rateLimitSchemaWhereInput[]
    NOT?: rateLimitSchemaWhereInput | rateLimitSchemaWhereInput[]
    deviceID?: StringFilter<"rateLimitSchema"> | string
    routeKey?: StringFilter<"rateLimitSchema"> | string
    requestCount?: IntFilter<"rateLimitSchema"> | number
    lastRequestAt?: DateTimeFilter<"rateLimitSchema"> | Date | string
  }, "deviceID_routeKey">

  export type rateLimitSchemaOrderByWithAggregationInput = {
    deviceID?: SortOrder
    routeKey?: SortOrder
    requestCount?: SortOrder
    lastRequestAt?: SortOrder
    _count?: rateLimitSchemaCountOrderByAggregateInput
    _avg?: rateLimitSchemaAvgOrderByAggregateInput
    _max?: rateLimitSchemaMaxOrderByAggregateInput
    _min?: rateLimitSchemaMinOrderByAggregateInput
    _sum?: rateLimitSchemaSumOrderByAggregateInput
  }

  export type rateLimitSchemaScalarWhereWithAggregatesInput = {
    AND?: rateLimitSchemaScalarWhereWithAggregatesInput | rateLimitSchemaScalarWhereWithAggregatesInput[]
    OR?: rateLimitSchemaScalarWhereWithAggregatesInput[]
    NOT?: rateLimitSchemaScalarWhereWithAggregatesInput | rateLimitSchemaScalarWhereWithAggregatesInput[]
    deviceID?: StringWithAggregatesFilter<"rateLimitSchema"> | string
    routeKey?: StringWithAggregatesFilter<"rateLimitSchema"> | string
    requestCount?: IntWithAggregatesFilter<"rateLimitSchema"> | number
    lastRequestAt?: DateTimeWithAggregatesFilter<"rateLimitSchema"> | Date | string
  }

  export type DeviceRateLimitCreateInput = {
    deviceID: string
    attempts?: number
    lastAttemptAt?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DeviceRateLimitUncheckedCreateInput = {
    deviceID: string
    attempts?: number
    lastAttemptAt?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DeviceRateLimitUpdateInput = {
    deviceID?: StringFieldUpdateOperationsInput | string
    attempts?: IntFieldUpdateOperationsInput | number
    lastAttemptAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DeviceRateLimitUncheckedUpdateInput = {
    deviceID?: StringFieldUpdateOperationsInput | string
    attempts?: IntFieldUpdateOperationsInput | number
    lastAttemptAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DeviceRateLimitCreateManyInput = {
    deviceID: string
    attempts?: number
    lastAttemptAt?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DeviceRateLimitUpdateManyMutationInput = {
    deviceID?: StringFieldUpdateOperationsInput | string
    attempts?: IntFieldUpdateOperationsInput | number
    lastAttemptAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DeviceRateLimitUncheckedUpdateManyInput = {
    deviceID?: StringFieldUpdateOperationsInput | string
    attempts?: IntFieldUpdateOperationsInput | number
    lastAttemptAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuthLogSchemaCreateInput = {
    userID: string
    eventType: $Enums.AuthLogEvent
    deviceID: string
    deviceName?: string | null
    deviceType?: $Enums.DeviceType | null
    performedBy?: $Enums.PerformedBy
    timestamp?: Date | string
    adminAction?: AdminActionCreateNestedOneWithoutAuthLogInput
  }

  export type AuthLogSchemaUncheckedCreateInput = {
    id?: number
    userID: string
    eventType: $Enums.AuthLogEvent
    deviceID: string
    deviceName?: string | null
    deviceType?: $Enums.DeviceType | null
    performedBy?: $Enums.PerformedBy
    timestamp?: Date | string
    adminAction?: AdminActionUncheckedCreateNestedOneWithoutAuthLogInput
  }

  export type AuthLogSchemaUpdateInput = {
    userID?: StringFieldUpdateOperationsInput | string
    eventType?: EnumAuthLogEventFieldUpdateOperationsInput | $Enums.AuthLogEvent
    deviceID?: StringFieldUpdateOperationsInput | string
    deviceName?: NullableStringFieldUpdateOperationsInput | string | null
    deviceType?: NullableEnumDeviceTypeFieldUpdateOperationsInput | $Enums.DeviceType | null
    performedBy?: EnumPerformedByFieldUpdateOperationsInput | $Enums.PerformedBy
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    adminAction?: AdminActionUpdateOneWithoutAuthLogNestedInput
  }

  export type AuthLogSchemaUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userID?: StringFieldUpdateOperationsInput | string
    eventType?: EnumAuthLogEventFieldUpdateOperationsInput | $Enums.AuthLogEvent
    deviceID?: StringFieldUpdateOperationsInput | string
    deviceName?: NullableStringFieldUpdateOperationsInput | string | null
    deviceType?: NullableEnumDeviceTypeFieldUpdateOperationsInput | $Enums.DeviceType | null
    performedBy?: EnumPerformedByFieldUpdateOperationsInput | $Enums.PerformedBy
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    adminAction?: AdminActionUncheckedUpdateOneWithoutAuthLogNestedInput
  }

  export type AuthLogSchemaCreateManyInput = {
    id?: number
    userID: string
    eventType: $Enums.AuthLogEvent
    deviceID: string
    deviceName?: string | null
    deviceType?: $Enums.DeviceType | null
    performedBy?: $Enums.PerformedBy
    timestamp?: Date | string
  }

  export type AuthLogSchemaUpdateManyMutationInput = {
    userID?: StringFieldUpdateOperationsInput | string
    eventType?: EnumAuthLogEventFieldUpdateOperationsInput | $Enums.AuthLogEvent
    deviceID?: StringFieldUpdateOperationsInput | string
    deviceName?: NullableStringFieldUpdateOperationsInput | string | null
    deviceType?: NullableEnumDeviceTypeFieldUpdateOperationsInput | $Enums.DeviceType | null
    performedBy?: EnumPerformedByFieldUpdateOperationsInput | $Enums.PerformedBy
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuthLogSchemaUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userID?: StringFieldUpdateOperationsInput | string
    eventType?: EnumAuthLogEventFieldUpdateOperationsInput | $Enums.AuthLogEvent
    deviceID?: StringFieldUpdateOperationsInput | string
    deviceName?: NullableStringFieldUpdateOperationsInput | string | null
    deviceType?: NullableEnumDeviceTypeFieldUpdateOperationsInput | $Enums.DeviceType | null
    performedBy?: EnumPerformedByFieldUpdateOperationsInput | $Enums.PerformedBy
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AdminActionCreateInput = {
    targetUserID?: string | null
    reason?: string | null
    filter?: AdminActionCreatefilterInput | $Enums.AuthLogEvent[]
    authLog: AuthLogSchemaCreateNestedOneWithoutAdminActionInput
  }

  export type AdminActionUncheckedCreateInput = {
    id: number
    targetUserID?: string | null
    reason?: string | null
    filter?: AdminActionCreatefilterInput | $Enums.AuthLogEvent[]
  }

  export type AdminActionUpdateInput = {
    targetUserID?: NullableStringFieldUpdateOperationsInput | string | null
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    filter?: AdminActionUpdatefilterInput | $Enums.AuthLogEvent[]
    authLog?: AuthLogSchemaUpdateOneRequiredWithoutAdminActionNestedInput
  }

  export type AdminActionUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    targetUserID?: NullableStringFieldUpdateOperationsInput | string | null
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    filter?: AdminActionUpdatefilterInput | $Enums.AuthLogEvent[]
  }

  export type AdminActionCreateManyInput = {
    id: number
    targetUserID?: string | null
    reason?: string | null
    filter?: AdminActionCreatefilterInput | $Enums.AuthLogEvent[]
  }

  export type AdminActionUpdateManyMutationInput = {
    targetUserID?: NullableStringFieldUpdateOperationsInput | string | null
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    filter?: AdminActionUpdatefilterInput | $Enums.AuthLogEvent[]
  }

  export type AdminActionUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    targetUserID?: NullableStringFieldUpdateOperationsInput | string | null
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    filter?: AdminActionUpdatefilterInput | $Enums.AuthLogEvent[]
  }

  export type counterSchemaCreateInput = {
    id: string
    seq?: number
  }

  export type counterSchemaUncheckedCreateInput = {
    id: string
    seq?: number
  }

  export type counterSchemaUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    seq?: IntFieldUpdateOperationsInput | number
  }

  export type counterSchemaUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    seq?: IntFieldUpdateOperationsInput | number
  }

  export type counterSchemaCreateManyInput = {
    id: string
    seq?: number
  }

  export type counterSchemaUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    seq?: IntFieldUpdateOperationsInput | number
  }

  export type counterSchemaUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    seq?: IntFieldUpdateOperationsInput | number
  }

  export type rateLimitSchemaCreateInput = {
    deviceID: string
    routeKey: string
    requestCount?: number
    lastRequestAt?: Date | string
  }

  export type rateLimitSchemaUncheckedCreateInput = {
    deviceID: string
    routeKey: string
    requestCount?: number
    lastRequestAt?: Date | string
  }

  export type rateLimitSchemaUpdateInput = {
    deviceID?: StringFieldUpdateOperationsInput | string
    routeKey?: StringFieldUpdateOperationsInput | string
    requestCount?: IntFieldUpdateOperationsInput | number
    lastRequestAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type rateLimitSchemaUncheckedUpdateInput = {
    deviceID?: StringFieldUpdateOperationsInput | string
    routeKey?: StringFieldUpdateOperationsInput | string
    requestCount?: IntFieldUpdateOperationsInput | number
    lastRequestAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type rateLimitSchemaCreateManyInput = {
    deviceID: string
    routeKey: string
    requestCount?: number
    lastRequestAt?: Date | string
  }

  export type rateLimitSchemaUpdateManyMutationInput = {
    deviceID?: StringFieldUpdateOperationsInput | string
    routeKey?: StringFieldUpdateOperationsInput | string
    requestCount?: IntFieldUpdateOperationsInput | number
    lastRequestAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type rateLimitSchemaUncheckedUpdateManyInput = {
    deviceID?: StringFieldUpdateOperationsInput | string
    routeKey?: StringFieldUpdateOperationsInput | string
    requestCount?: IntFieldUpdateOperationsInput | number
    lastRequestAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type DeviceRateLimitCountOrderByAggregateInput = {
    deviceID?: SortOrder
    attempts?: SortOrder
    lastAttemptAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DeviceRateLimitAvgOrderByAggregateInput = {
    attempts?: SortOrder
  }

  export type DeviceRateLimitMaxOrderByAggregateInput = {
    deviceID?: SortOrder
    attempts?: SortOrder
    lastAttemptAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DeviceRateLimitMinOrderByAggregateInput = {
    deviceID?: SortOrder
    attempts?: SortOrder
    lastAttemptAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DeviceRateLimitSumOrderByAggregateInput = {
    attempts?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type EnumAuthLogEventFilter<$PrismaModel = never> = {
    equals?: $Enums.AuthLogEvent | EnumAuthLogEventFieldRefInput<$PrismaModel>
    in?: $Enums.AuthLogEvent[] | ListEnumAuthLogEventFieldRefInput<$PrismaModel>
    notIn?: $Enums.AuthLogEvent[] | ListEnumAuthLogEventFieldRefInput<$PrismaModel>
    not?: NestedEnumAuthLogEventFilter<$PrismaModel> | $Enums.AuthLogEvent
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type EnumDeviceTypeNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.DeviceType | EnumDeviceTypeFieldRefInput<$PrismaModel> | null
    in?: $Enums.DeviceType[] | ListEnumDeviceTypeFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.DeviceType[] | ListEnumDeviceTypeFieldRefInput<$PrismaModel> | null
    not?: NestedEnumDeviceTypeNullableFilter<$PrismaModel> | $Enums.DeviceType | null
  }

  export type EnumPerformedByFilter<$PrismaModel = never> = {
    equals?: $Enums.PerformedBy | EnumPerformedByFieldRefInput<$PrismaModel>
    in?: $Enums.PerformedBy[] | ListEnumPerformedByFieldRefInput<$PrismaModel>
    notIn?: $Enums.PerformedBy[] | ListEnumPerformedByFieldRefInput<$PrismaModel>
    not?: NestedEnumPerformedByFilter<$PrismaModel> | $Enums.PerformedBy
  }

  export type AdminActionNullableScalarRelationFilter = {
    is?: AdminActionWhereInput | null
    isNot?: AdminActionWhereInput | null
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type AuthLogSchemaCountOrderByAggregateInput = {
    id?: SortOrder
    userID?: SortOrder
    eventType?: SortOrder
    deviceID?: SortOrder
    deviceName?: SortOrder
    deviceType?: SortOrder
    performedBy?: SortOrder
    timestamp?: SortOrder
  }

  export type AuthLogSchemaAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type AuthLogSchemaMaxOrderByAggregateInput = {
    id?: SortOrder
    userID?: SortOrder
    eventType?: SortOrder
    deviceID?: SortOrder
    deviceName?: SortOrder
    deviceType?: SortOrder
    performedBy?: SortOrder
    timestamp?: SortOrder
  }

  export type AuthLogSchemaMinOrderByAggregateInput = {
    id?: SortOrder
    userID?: SortOrder
    eventType?: SortOrder
    deviceID?: SortOrder
    deviceName?: SortOrder
    deviceType?: SortOrder
    performedBy?: SortOrder
    timestamp?: SortOrder
  }

  export type AuthLogSchemaSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type EnumAuthLogEventWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AuthLogEvent | EnumAuthLogEventFieldRefInput<$PrismaModel>
    in?: $Enums.AuthLogEvent[] | ListEnumAuthLogEventFieldRefInput<$PrismaModel>
    notIn?: $Enums.AuthLogEvent[] | ListEnumAuthLogEventFieldRefInput<$PrismaModel>
    not?: NestedEnumAuthLogEventWithAggregatesFilter<$PrismaModel> | $Enums.AuthLogEvent
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAuthLogEventFilter<$PrismaModel>
    _max?: NestedEnumAuthLogEventFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type EnumDeviceTypeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.DeviceType | EnumDeviceTypeFieldRefInput<$PrismaModel> | null
    in?: $Enums.DeviceType[] | ListEnumDeviceTypeFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.DeviceType[] | ListEnumDeviceTypeFieldRefInput<$PrismaModel> | null
    not?: NestedEnumDeviceTypeNullableWithAggregatesFilter<$PrismaModel> | $Enums.DeviceType | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumDeviceTypeNullableFilter<$PrismaModel>
    _max?: NestedEnumDeviceTypeNullableFilter<$PrismaModel>
  }

  export type EnumPerformedByWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PerformedBy | EnumPerformedByFieldRefInput<$PrismaModel>
    in?: $Enums.PerformedBy[] | ListEnumPerformedByFieldRefInput<$PrismaModel>
    notIn?: $Enums.PerformedBy[] | ListEnumPerformedByFieldRefInput<$PrismaModel>
    not?: NestedEnumPerformedByWithAggregatesFilter<$PrismaModel> | $Enums.PerformedBy
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPerformedByFilter<$PrismaModel>
    _max?: NestedEnumPerformedByFilter<$PrismaModel>
  }

  export type EnumAuthLogEventNullableListFilter<$PrismaModel = never> = {
    equals?: $Enums.AuthLogEvent[] | ListEnumAuthLogEventFieldRefInput<$PrismaModel> | null
    has?: $Enums.AuthLogEvent | EnumAuthLogEventFieldRefInput<$PrismaModel> | null
    hasEvery?: $Enums.AuthLogEvent[] | ListEnumAuthLogEventFieldRefInput<$PrismaModel>
    hasSome?: $Enums.AuthLogEvent[] | ListEnumAuthLogEventFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }

  export type AuthLogSchemaScalarRelationFilter = {
    is?: AuthLogSchemaWhereInput
    isNot?: AuthLogSchemaWhereInput
  }

  export type AdminActionCountOrderByAggregateInput = {
    id?: SortOrder
    targetUserID?: SortOrder
    reason?: SortOrder
    filter?: SortOrder
  }

  export type AdminActionAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type AdminActionMaxOrderByAggregateInput = {
    id?: SortOrder
    targetUserID?: SortOrder
    reason?: SortOrder
  }

  export type AdminActionMinOrderByAggregateInput = {
    id?: SortOrder
    targetUserID?: SortOrder
    reason?: SortOrder
  }

  export type AdminActionSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type counterSchemaCountOrderByAggregateInput = {
    id?: SortOrder
    seq?: SortOrder
  }

  export type counterSchemaAvgOrderByAggregateInput = {
    seq?: SortOrder
  }

  export type counterSchemaMaxOrderByAggregateInput = {
    id?: SortOrder
    seq?: SortOrder
  }

  export type counterSchemaMinOrderByAggregateInput = {
    id?: SortOrder
    seq?: SortOrder
  }

  export type counterSchemaSumOrderByAggregateInput = {
    seq?: SortOrder
  }

  export type rateLimitSchemaDeviceIDRouteKeyCompoundUniqueInput = {
    deviceID: string
    routeKey: string
  }

  export type rateLimitSchemaCountOrderByAggregateInput = {
    deviceID?: SortOrder
    routeKey?: SortOrder
    requestCount?: SortOrder
    lastRequestAt?: SortOrder
  }

  export type rateLimitSchemaAvgOrderByAggregateInput = {
    requestCount?: SortOrder
  }

  export type rateLimitSchemaMaxOrderByAggregateInput = {
    deviceID?: SortOrder
    routeKey?: SortOrder
    requestCount?: SortOrder
    lastRequestAt?: SortOrder
  }

  export type rateLimitSchemaMinOrderByAggregateInput = {
    deviceID?: SortOrder
    routeKey?: SortOrder
    requestCount?: SortOrder
    lastRequestAt?: SortOrder
  }

  export type rateLimitSchemaSumOrderByAggregateInput = {
    requestCount?: SortOrder
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type AdminActionCreateNestedOneWithoutAuthLogInput = {
    create?: XOR<AdminActionCreateWithoutAuthLogInput, AdminActionUncheckedCreateWithoutAuthLogInput>
    connectOrCreate?: AdminActionCreateOrConnectWithoutAuthLogInput
    connect?: AdminActionWhereUniqueInput
  }

  export type AdminActionUncheckedCreateNestedOneWithoutAuthLogInput = {
    create?: XOR<AdminActionCreateWithoutAuthLogInput, AdminActionUncheckedCreateWithoutAuthLogInput>
    connectOrCreate?: AdminActionCreateOrConnectWithoutAuthLogInput
    connect?: AdminActionWhereUniqueInput
  }

  export type EnumAuthLogEventFieldUpdateOperationsInput = {
    set?: $Enums.AuthLogEvent
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type NullableEnumDeviceTypeFieldUpdateOperationsInput = {
    set?: $Enums.DeviceType | null
  }

  export type EnumPerformedByFieldUpdateOperationsInput = {
    set?: $Enums.PerformedBy
  }

  export type AdminActionUpdateOneWithoutAuthLogNestedInput = {
    create?: XOR<AdminActionCreateWithoutAuthLogInput, AdminActionUncheckedCreateWithoutAuthLogInput>
    connectOrCreate?: AdminActionCreateOrConnectWithoutAuthLogInput
    upsert?: AdminActionUpsertWithoutAuthLogInput
    disconnect?: AdminActionWhereInput | boolean
    delete?: AdminActionWhereInput | boolean
    connect?: AdminActionWhereUniqueInput
    update?: XOR<XOR<AdminActionUpdateToOneWithWhereWithoutAuthLogInput, AdminActionUpdateWithoutAuthLogInput>, AdminActionUncheckedUpdateWithoutAuthLogInput>
  }

  export type AdminActionUncheckedUpdateOneWithoutAuthLogNestedInput = {
    create?: XOR<AdminActionCreateWithoutAuthLogInput, AdminActionUncheckedCreateWithoutAuthLogInput>
    connectOrCreate?: AdminActionCreateOrConnectWithoutAuthLogInput
    upsert?: AdminActionUpsertWithoutAuthLogInput
    disconnect?: AdminActionWhereInput | boolean
    delete?: AdminActionWhereInput | boolean
    connect?: AdminActionWhereUniqueInput
    update?: XOR<XOR<AdminActionUpdateToOneWithWhereWithoutAuthLogInput, AdminActionUpdateWithoutAuthLogInput>, AdminActionUncheckedUpdateWithoutAuthLogInput>
  }

  export type AdminActionCreatefilterInput = {
    set: $Enums.AuthLogEvent[]
  }

  export type AuthLogSchemaCreateNestedOneWithoutAdminActionInput = {
    create?: XOR<AuthLogSchemaCreateWithoutAdminActionInput, AuthLogSchemaUncheckedCreateWithoutAdminActionInput>
    connectOrCreate?: AuthLogSchemaCreateOrConnectWithoutAdminActionInput
    connect?: AuthLogSchemaWhereUniqueInput
  }

  export type AdminActionUpdatefilterInput = {
    set?: $Enums.AuthLogEvent[]
    push?: $Enums.AuthLogEvent | $Enums.AuthLogEvent[]
  }

  export type AuthLogSchemaUpdateOneRequiredWithoutAdminActionNestedInput = {
    create?: XOR<AuthLogSchemaCreateWithoutAdminActionInput, AuthLogSchemaUncheckedCreateWithoutAdminActionInput>
    connectOrCreate?: AuthLogSchemaCreateOrConnectWithoutAdminActionInput
    upsert?: AuthLogSchemaUpsertWithoutAdminActionInput
    connect?: AuthLogSchemaWhereUniqueInput
    update?: XOR<XOR<AuthLogSchemaUpdateToOneWithWhereWithoutAdminActionInput, AuthLogSchemaUpdateWithoutAdminActionInput>, AuthLogSchemaUncheckedUpdateWithoutAdminActionInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedEnumAuthLogEventFilter<$PrismaModel = never> = {
    equals?: $Enums.AuthLogEvent | EnumAuthLogEventFieldRefInput<$PrismaModel>
    in?: $Enums.AuthLogEvent[] | ListEnumAuthLogEventFieldRefInput<$PrismaModel>
    notIn?: $Enums.AuthLogEvent[] | ListEnumAuthLogEventFieldRefInput<$PrismaModel>
    not?: NestedEnumAuthLogEventFilter<$PrismaModel> | $Enums.AuthLogEvent
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedEnumDeviceTypeNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.DeviceType | EnumDeviceTypeFieldRefInput<$PrismaModel> | null
    in?: $Enums.DeviceType[] | ListEnumDeviceTypeFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.DeviceType[] | ListEnumDeviceTypeFieldRefInput<$PrismaModel> | null
    not?: NestedEnumDeviceTypeNullableFilter<$PrismaModel> | $Enums.DeviceType | null
  }

  export type NestedEnumPerformedByFilter<$PrismaModel = never> = {
    equals?: $Enums.PerformedBy | EnumPerformedByFieldRefInput<$PrismaModel>
    in?: $Enums.PerformedBy[] | ListEnumPerformedByFieldRefInput<$PrismaModel>
    notIn?: $Enums.PerformedBy[] | ListEnumPerformedByFieldRefInput<$PrismaModel>
    not?: NestedEnumPerformedByFilter<$PrismaModel> | $Enums.PerformedBy
  }

  export type NestedEnumAuthLogEventWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AuthLogEvent | EnumAuthLogEventFieldRefInput<$PrismaModel>
    in?: $Enums.AuthLogEvent[] | ListEnumAuthLogEventFieldRefInput<$PrismaModel>
    notIn?: $Enums.AuthLogEvent[] | ListEnumAuthLogEventFieldRefInput<$PrismaModel>
    not?: NestedEnumAuthLogEventWithAggregatesFilter<$PrismaModel> | $Enums.AuthLogEvent
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAuthLogEventFilter<$PrismaModel>
    _max?: NestedEnumAuthLogEventFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedEnumDeviceTypeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.DeviceType | EnumDeviceTypeFieldRefInput<$PrismaModel> | null
    in?: $Enums.DeviceType[] | ListEnumDeviceTypeFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.DeviceType[] | ListEnumDeviceTypeFieldRefInput<$PrismaModel> | null
    not?: NestedEnumDeviceTypeNullableWithAggregatesFilter<$PrismaModel> | $Enums.DeviceType | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumDeviceTypeNullableFilter<$PrismaModel>
    _max?: NestedEnumDeviceTypeNullableFilter<$PrismaModel>
  }

  export type NestedEnumPerformedByWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PerformedBy | EnumPerformedByFieldRefInput<$PrismaModel>
    in?: $Enums.PerformedBy[] | ListEnumPerformedByFieldRefInput<$PrismaModel>
    notIn?: $Enums.PerformedBy[] | ListEnumPerformedByFieldRefInput<$PrismaModel>
    not?: NestedEnumPerformedByWithAggregatesFilter<$PrismaModel> | $Enums.PerformedBy
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPerformedByFilter<$PrismaModel>
    _max?: NestedEnumPerformedByFilter<$PrismaModel>
  }

  export type AdminActionCreateWithoutAuthLogInput = {
    targetUserID?: string | null
    reason?: string | null
    filter?: AdminActionCreatefilterInput | $Enums.AuthLogEvent[]
  }

  export type AdminActionUncheckedCreateWithoutAuthLogInput = {
    targetUserID?: string | null
    reason?: string | null
    filter?: AdminActionCreatefilterInput | $Enums.AuthLogEvent[]
  }

  export type AdminActionCreateOrConnectWithoutAuthLogInput = {
    where: AdminActionWhereUniqueInput
    create: XOR<AdminActionCreateWithoutAuthLogInput, AdminActionUncheckedCreateWithoutAuthLogInput>
  }

  export type AdminActionUpsertWithoutAuthLogInput = {
    update: XOR<AdminActionUpdateWithoutAuthLogInput, AdminActionUncheckedUpdateWithoutAuthLogInput>
    create: XOR<AdminActionCreateWithoutAuthLogInput, AdminActionUncheckedCreateWithoutAuthLogInput>
    where?: AdminActionWhereInput
  }

  export type AdminActionUpdateToOneWithWhereWithoutAuthLogInput = {
    where?: AdminActionWhereInput
    data: XOR<AdminActionUpdateWithoutAuthLogInput, AdminActionUncheckedUpdateWithoutAuthLogInput>
  }

  export type AdminActionUpdateWithoutAuthLogInput = {
    targetUserID?: NullableStringFieldUpdateOperationsInput | string | null
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    filter?: AdminActionUpdatefilterInput | $Enums.AuthLogEvent[]
  }

  export type AdminActionUncheckedUpdateWithoutAuthLogInput = {
    targetUserID?: NullableStringFieldUpdateOperationsInput | string | null
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    filter?: AdminActionUpdatefilterInput | $Enums.AuthLogEvent[]
  }

  export type AuthLogSchemaCreateWithoutAdminActionInput = {
    userID: string
    eventType: $Enums.AuthLogEvent
    deviceID: string
    deviceName?: string | null
    deviceType?: $Enums.DeviceType | null
    performedBy?: $Enums.PerformedBy
    timestamp?: Date | string
  }

  export type AuthLogSchemaUncheckedCreateWithoutAdminActionInput = {
    id?: number
    userID: string
    eventType: $Enums.AuthLogEvent
    deviceID: string
    deviceName?: string | null
    deviceType?: $Enums.DeviceType | null
    performedBy?: $Enums.PerformedBy
    timestamp?: Date | string
  }

  export type AuthLogSchemaCreateOrConnectWithoutAdminActionInput = {
    where: AuthLogSchemaWhereUniqueInput
    create: XOR<AuthLogSchemaCreateWithoutAdminActionInput, AuthLogSchemaUncheckedCreateWithoutAdminActionInput>
  }

  export type AuthLogSchemaUpsertWithoutAdminActionInput = {
    update: XOR<AuthLogSchemaUpdateWithoutAdminActionInput, AuthLogSchemaUncheckedUpdateWithoutAdminActionInput>
    create: XOR<AuthLogSchemaCreateWithoutAdminActionInput, AuthLogSchemaUncheckedCreateWithoutAdminActionInput>
    where?: AuthLogSchemaWhereInput
  }

  export type AuthLogSchemaUpdateToOneWithWhereWithoutAdminActionInput = {
    where?: AuthLogSchemaWhereInput
    data: XOR<AuthLogSchemaUpdateWithoutAdminActionInput, AuthLogSchemaUncheckedUpdateWithoutAdminActionInput>
  }

  export type AuthLogSchemaUpdateWithoutAdminActionInput = {
    userID?: StringFieldUpdateOperationsInput | string
    eventType?: EnumAuthLogEventFieldUpdateOperationsInput | $Enums.AuthLogEvent
    deviceID?: StringFieldUpdateOperationsInput | string
    deviceName?: NullableStringFieldUpdateOperationsInput | string | null
    deviceType?: NullableEnumDeviceTypeFieldUpdateOperationsInput | $Enums.DeviceType | null
    performedBy?: EnumPerformedByFieldUpdateOperationsInput | $Enums.PerformedBy
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuthLogSchemaUncheckedUpdateWithoutAdminActionInput = {
    id?: IntFieldUpdateOperationsInput | number
    userID?: StringFieldUpdateOperationsInput | string
    eventType?: EnumAuthLogEventFieldUpdateOperationsInput | $Enums.AuthLogEvent
    deviceID?: StringFieldUpdateOperationsInput | string
    deviceName?: NullableStringFieldUpdateOperationsInput | string | null
    deviceType?: NullableEnumDeviceTypeFieldUpdateOperationsInput | $Enums.DeviceType | null
    performedBy?: EnumPerformedByFieldUpdateOperationsInput | $Enums.PerformedBy
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}