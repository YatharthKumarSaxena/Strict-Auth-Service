generator client {
  provider = "prisma-client-js"
  output   = "../../node_modules/.prisma/private"
}

datasource db {
  provider = "postgresql"
  url      = env("PRIVATE_DB_URL") // Comes from your .env file
}

enum AuthLogEvent {
  LOGIN
  LOGOUT_ALL_DEVICE
  ACTIVATE
  DEACTIVATE
  BLOCKED
  UNBLOCKED
  CHANGE_PASSWORD
  REGISTER
  LOGOUT_SPECIFIC_DEVICE
  CHECK_AUTH_LOGS
  GET_USER_ACTIVE_DEVICES
  GET_MY_ACTIVE_DEVICES
  ACCESS_TOKEN
  REFRESH_TOKEN
  UPDATE_ACCOUNT_DETAILS
  PROVIDE_USER_ACCOUNT_DETAILS
  PROVIDE_MY_ACCOUNT_DETAILS
  GET_TOTAL_REGISTERED_USERS
  SET_REFRESH_TOKEN_FOR_ADMIN
  CLEAN_UP_DEACTIVATED_USER
  CLEAN_UP_AUTH_LOGS
}

enum DeviceType {
  LAPTOP
  MOBILE
  TABLET
}

enum PerformedBy {
  CUSTOMER
  ADMIN
  SYSTEM
}

model DeviceRateLimit {
  deviceID      String   @id
  attempts      Int      @default(1)
  lastAttemptAt DateTime @default(now())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model AuthLogSchema {
  id          Int          @id @default(autoincrement())
  userID      String
  eventType   AuthLogEvent
  deviceID    String
  deviceName  String?
  deviceType  DeviceType?
  performedBy PerformedBy  @default(CUSTOMER)
  timestamp   DateTime     @default(now())
  adminAction AdminAction?

  @@index([userID])
}

model AdminAction {
  id           Int            @id
  authLog      AuthLogSchema  @relation(fields: [id], references: [id])
  targetUserID String?
  reason       String?
  filter       AuthLogEvent[]
}

model counterSchema {
  id  String @id
  seq Int    @default(0)
}

model rateLimitSchema {
  deviceID      String
  routeKey      String
  requestCount  Int      @default(1)
  lastRequestAt DateTime @default(now())

  @@id([deviceID, routeKey])
}
