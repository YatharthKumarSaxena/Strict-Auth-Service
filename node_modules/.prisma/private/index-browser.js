
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.11.1
 * Query Engine version: f40f79ec31188888a2e33acda0ecc8fd10a853a9
 */
Prisma.prismaVersion = {
  client: "6.11.1",
  engine: "f40f79ec31188888a2e33acda0ecc8fd10a853a9"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.DeviceRateLimitScalarFieldEnum = {
  deviceID: 'deviceID',
  attempts: 'attempts',
  lastAttemptAt: 'lastAttemptAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AuthLogScalarFieldEnum = {
  id: 'id',
  userID: 'userID',
  eventType: 'eventType',
  deviceID: 'deviceID',
  deviceName: 'deviceName',
  deviceType: 'deviceType',
  performedBy: 'performedBy',
  timestamp: 'timestamp'
};

exports.Prisma.AdminActionScalarFieldEnum = {
  id: 'id',
  targetUserID: 'targetUserID',
  reason: 'reason',
  filter: 'filter'
};

exports.Prisma.CounterScalarFieldEnum = {
  id: 'id',
  seq: 'seq'
};

exports.Prisma.RateLimitScalarFieldEnum = {
  deviceID: 'deviceID',
  routeKey: 'routeKey',
  requestCount: 'requestCount',
  lastRequestAt: 'lastRequestAt'
};

exports.Prisma.DeviceBlockScalarFieldEnum = {
  deviceID: 'deviceID',
  isBlocked: 'isBlocked',
  blockedAt: 'blockedAt',
  unblockedAt: 'unblockedAt',
  blockedBy: 'blockedBy',
  unblockedBy: 'unblockedBy',
  reason: 'reason',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.AuthLogEvent = exports.$Enums.AuthLogEvent = {
  LOGIN: 'LOGIN',
  LOGOUT_ALL_DEVICE: 'LOGOUT_ALL_DEVICE',
  ACTIVATE: 'ACTIVATE',
  DEACTIVATE: 'DEACTIVATE',
  BLOCKED: 'BLOCKED',
  UNBLOCKED: 'UNBLOCKED',
  CHANGE_PASSWORD: 'CHANGE_PASSWORD',
  REGISTER: 'REGISTER',
  LOGOUT_SPECIFIC_DEVICE: 'LOGOUT_SPECIFIC_DEVICE',
  CHECK_AUTH_LOGS: 'CHECK_AUTH_LOGS',
  GET_USER_ACTIVE_DEVICES: 'GET_USER_ACTIVE_DEVICES',
  GET_MY_ACTIVE_DEVICES: 'GET_MY_ACTIVE_DEVICES',
  ACCESS_TOKEN: 'ACCESS_TOKEN',
  REFRESH_TOKEN: 'REFRESH_TOKEN',
  UPDATE_ACCOUNT_DETAILS: 'UPDATE_ACCOUNT_DETAILS',
  PROVIDE_USER_ACCOUNT_DETAILS: 'PROVIDE_USER_ACCOUNT_DETAILS',
  PROVIDE_MY_ACCOUNT_DETAILS: 'PROVIDE_MY_ACCOUNT_DETAILS',
  GET_TOTAL_REGISTERED_USERS: 'GET_TOTAL_REGISTERED_USERS',
  SET_REFRESH_TOKEN_FOR_ADMIN: 'SET_REFRESH_TOKEN_FOR_ADMIN',
  CLEAN_UP_DEACTIVATED_USER: 'CLEAN_UP_DEACTIVATED_USER',
  CLEAN_UP_AUTH_LOGS: 'CLEAN_UP_AUTH_LOGS'
};

exports.DeviceType = exports.$Enums.DeviceType = {
  LAPTOP: 'LAPTOP',
  MOBILE: 'MOBILE',
  TABLET: 'TABLET'
};

exports.PerformedBy = exports.$Enums.PerformedBy = {
  CUSTOMER: 'CUSTOMER',
  ADMIN: 'ADMIN',
  SYSTEM: 'SYSTEM'
};

exports.Prisma.ModelName = {
  DeviceRateLimit: 'DeviceRateLimit',
  AuthLog: 'AuthLog',
  AdminAction: 'AdminAction',
  Counter: 'Counter',
  RateLimit: 'RateLimit',
  DeviceBlock: 'DeviceBlock'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
