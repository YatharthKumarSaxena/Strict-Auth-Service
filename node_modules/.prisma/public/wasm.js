
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.11.1
 * Query Engine version: f40f79ec31188888a2e33acda0ecc8fd10a853a9
 */
Prisma.prismaVersion = {
  client: "6.11.1",
  engine: "f40f79ec31188888a2e33acda0ecc8fd10a853a9"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  name: 'name',
  fullPhoneNumber: 'fullPhoneNumber',
  password: 'password',
  userID: 'userID',
  emailID: 'emailID',
  isActive: 'isActive',
  isBlocked: 'isBlocked',
  isVerified: 'isVerified',
  userType: 'userType',
  loginCount: 'loginCount',
  blockedVia: 'blockedVia',
  unblockedVia: 'unblockedVia',
  blockReason: 'blockReason',
  blockCount: 'blockCount',
  unblockCount: 'unblockCount',
  unblockReason: 'unblockReason',
  blockedBy: 'blockedBy',
  unblockedBy: 'unblockedBy',
  blockedAt: 'blockedAt',
  unblockedAt: 'unblockedAt',
  lastActivatedAt: 'lastActivatedAt',
  lastDeactivatedAt: 'lastDeactivatedAt',
  lastLogin: 'lastLogin',
  lastLogout: 'lastLogout',
  jwtTokenIssuedAt: 'jwtTokenIssuedAt',
  passwordChangedAt: 'passwordChangedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PhoneNumberScalarFieldEnum = {
  userID: 'userID',
  countryCode: 'countryCode',
  number: 'number'
};

exports.Prisma.DeviceScalarFieldEnum = {
  deviceID: 'deviceID',
  deviceName: 'deviceName',
  deviceType: 'deviceType',
  requestCount: 'requestCount',
  addedAt: 'addedAt',
  lastUsedAt: 'lastUsedAt',
  userID: 'userID'
};

exports.Prisma.OTPScalarFieldEnum = {
  id: 'id',
  code: 'code',
  expiresAt: 'expiresAt',
  verified: 'verified',
  resendCount: 'resendCount',
  userID: 'userID'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.UserType = exports.$Enums.UserType = {
  CUSTOMER: 'CUSTOMER',
  ADMIN: 'ADMIN'
};

exports.ViaType = exports.$Enums.ViaType = {
  USER_ID: 'USER_ID',
  PHONE: 'PHONE',
  EMAIL: 'EMAIL'
};

exports.BlockReason = exports.$Enums.BlockReason = {
  POLICY_VIOLATION: 'POLICY_VIOLATION',
  SPAM_ACTIVITY: 'SPAM_ACTIVITY',
  HARASSMENT: 'HARASSMENT',
  FRAUDULENT_BEHAVIOR: 'FRAUDULENT_BEHAVIOR',
  SUSPICIOUS_LOGIN: 'SUSPICIOUS_LOGIN',
  OTHER: 'OTHER'
};

exports.UnblockReason = exports.$Enums.UnblockReason = {
  MANUAL_REVIEW_PASSED: 'MANUAL_REVIEW_PASSED',
  USER_APPEAL_GRANTED: 'USER_APPEAL_GRANTED',
  SYSTEM_ERROR: 'SYSTEM_ERROR',
  OTHER: 'OTHER'
};

exports.DeviceType = exports.$Enums.DeviceType = {
  MOBILE: 'MOBILE',
  LAPTOP: 'LAPTOP',
  TABLET: 'TABLET'
};

exports.Prisma.ModelName = {
  User: 'User',
  PhoneNumber: 'PhoneNumber',
  Device: 'Device',
  OTP: 'OTP'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
